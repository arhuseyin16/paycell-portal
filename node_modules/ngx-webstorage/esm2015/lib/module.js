import { APP_INITIALIZER, Inject, InjectionToken, NgModule, Optional } from '@angular/core';
import { LocalStorageProvider, SessionStorageProvider } from './core/nativeStorage';
import { Services } from './services/index';
import { Strategies } from './strategies/index';
import { StrategyIndex } from './services/strategyIndex';
import { StorageKeyManager } from './helpers/storageKeyManager';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './services/strategyIndex';
export const LIB_CONFIG = new InjectionToken('ngx_webstorage_config');
export function appInit(index) {
    index.indexStrategies();
    return () => StrategyIndex.index;
}
export class NgxWebstorageModule {
    constructor(index, config) {
        if (config)
            StorageKeyManager.consumeConfiguration(config);
        else
            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');
    }
    static forRoot(config = {}) {
        return {
            ngModule: NgxWebstorageModule,
            providers: [
                {
                    provide: LIB_CONFIG,
                    useValue: config,
                },
                LocalStorageProvider,
                SessionStorageProvider,
                ...Services,
                ...Strategies,
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInit,
                    deps: [StrategyIndex],
                    multi: true
                }
            ]
        };
    }
}
NgxWebstorageModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxWebstorageModule });
NgxWebstorageModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxWebstorageModule_Factory(t) { return new (t || NgxWebstorageModule)(ɵngcc0.ɵɵinject(ɵngcc1.StrategyIndex), ɵngcc0.ɵɵinject(LIB_CONFIG, 8)); } });
NgxWebstorageModule.ctorParameters = () => [
    { type: StrategyIndex },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIB_CONFIG,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxWebstorageModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: ɵngcc1.StrategyIndex }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LIB_CONFIG]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtd2Vic3RvcmFnZS9zcmMvbGliL21vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0csT0FBTyxFQUFDLG9CQUFvQixFQUFFLHNCQUFzQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDbEYsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFdkQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7OztBQUU5RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQStDLElBQUksY0FBYyxDQUE2Qix1QkFBdUIsQ0FBQyxDQUFDO0FBRTlJLE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBb0I7QUFDNUMsSUFBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDekIsSUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7QUFDbEMsQ0FBQztBQUdELE1BQU0sT0FBTyxtQkFBbUI7QUFDaEMsSUFDQyxZQUFZLEtBQW9CLEVBQWtDLE1BQWtDO0FBQ3JHLFFBQUUsSUFBSSxNQUFNO0FBQUUsWUFBQSxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3RDtBQUFhLFlBQU4sT0FBTyxDQUFDLEtBQUssQ0FBQyxtR0FBbUcsQ0FBQyxDQUFDO0FBQzFILElBQUMsQ0FBQztBQUNGLElBQ0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFxQyxFQUFFO0FBQUksUUFDekQsT0FBTztBQUNULFlBQUcsUUFBUSxFQUFFLG1CQUFtQjtBQUNoQyxZQUFHLFNBQVMsRUFBRTtBQUNkLGdCQUFJO0FBQ0osb0JBQUssT0FBTyxFQUFFLFVBQVU7QUFDeEIsb0JBQUssUUFBUSxFQUFFLE1BQU07QUFDckIsaUJBQUs7QUFDTCxnQkFBSSxvQkFBb0I7QUFDeEIsZ0JBQUksc0JBQXNCO0FBQzFCLGdCQUFJLEdBQUcsUUFBUTtBQUNmLGdCQUFJLEdBQUcsVUFBVTtBQUNqQixnQkFBSTtBQUNKLG9CQUFLLE9BQU8sRUFBRSxlQUFlO0FBQzdCLG9CQUFLLFVBQVUsRUFBRSxPQUFPO0FBQ3hCLG9CQUFLLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztBQUMxQixvQkFBSyxLQUFLLEVBQUUsSUFBSTtBQUNoQixpQkFBSztBQUNMLGFBQUk7QUFDSixTQUFHLENBQUM7QUFDSixJQUFDLENBQUM7QUFDRjsrQ0E3QkMsUUFBUSxTQUFDLEVBQUU7Mk5BQ1A7QUFBQztBQUVTLFlBZFAsYUFBYTtBQUFJLDRDQWNXLFFBQVEsWUFBSSxNQUFNLFNBQUMsVUFBVTtBQUFROzs7Ozs7Ozs7a0NBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QVBQX0lOSVRJQUxJWkVSLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMb2NhbFN0b3JhZ2VQcm92aWRlciwgU2Vzc2lvblN0b3JhZ2VQcm92aWRlcn0gZnJvbSAnLi9jb3JlL25hdGl2ZVN0b3JhZ2UnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi9zZXJ2aWNlcy9pbmRleCc7XG5pbXBvcnQge1N0cmF0ZWdpZXN9IGZyb20gJy4vc3RyYXRlZ2llcy9pbmRleCc7XG5pbXBvcnQge1N0cmF0ZWd5SW5kZXh9IGZyb20gJy4vc2VydmljZXMvc3RyYXRlZ3lJbmRleCc7XG5pbXBvcnQge05neFdlYnN0b3JhZ2VDb25maWd1cmF0aW9ufSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQge1N0b3JhZ2VLZXlNYW5hZ2VyfSBmcm9tICcuL2hlbHBlcnMvc3RvcmFnZUtleU1hbmFnZXInO1xuXG5leHBvcnQgY29uc3QgTElCX0NPTkZJRzogSW5qZWN0aW9uVG9rZW48Tmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb24+ID0gbmV3IEluamVjdGlvblRva2VuPE5neFdlYnN0b3JhZ2VDb25maWd1cmF0aW9uPignbmd4X3dlYnN0b3JhZ2VfY29uZmlnJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBJbml0KGluZGV4OiBTdHJhdGVneUluZGV4KSB7XG5cdGluZGV4LmluZGV4U3RyYXRlZ2llcygpO1xuXHRyZXR1cm4gKCkgPT4gU3RyYXRlZ3lJbmRleC5pbmRleDtcbn1cblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIE5neFdlYnN0b3JhZ2VNb2R1bGUge1xuXG5cdGNvbnN0cnVjdG9yKGluZGV4OiBTdHJhdGVneUluZGV4LCBAT3B0aW9uYWwoKSBASW5qZWN0KExJQl9DT05GSUcpIGNvbmZpZzogTmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb24pIHtcblx0XHRpZiAoY29uZmlnKSBTdG9yYWdlS2V5TWFuYWdlci5jb25zdW1lQ29uZmlndXJhdGlvbihjb25maWcpO1xuXHRcdGVsc2UgY29uc29sZS5lcnJvcignTmd4V2Vic3RvcmFnZSA6IFBvc3NpYmxlIG1pc2NvbmZpZ3VyYXRpb24gKFRoZSBmb3JSb290IG1ldGhvZCB1c2FnZSBpcyBtYW5kYXRvcnkgc2luY2UgdGhlIDMuMC4wKScpO1xuXHR9XG5cblx0c3RhdGljIGZvclJvb3QoY29uZmlnOiBOZ3hXZWJzdG9yYWdlQ29uZmlndXJhdGlvbiA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hXZWJzdG9yYWdlTW9kdWxlPiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG5nTW9kdWxlOiBOZ3hXZWJzdG9yYWdlTW9kdWxlLFxuXHRcdFx0cHJvdmlkZXJzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwcm92aWRlOiBMSUJfQ09ORklHLFxuXHRcdFx0XHRcdHVzZVZhbHVlOiBjb25maWcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdExvY2FsU3RvcmFnZVByb3ZpZGVyLFxuXHRcdFx0XHRTZXNzaW9uU3RvcmFnZVByb3ZpZGVyLFxuXHRcdFx0XHQuLi5TZXJ2aWNlcyxcblx0XHRcdFx0Li4uU3RyYXRlZ2llcyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcblx0XHRcdFx0XHR1c2VGYWN0b3J5OiBhcHBJbml0LFxuXHRcdFx0XHRcdGRlcHM6IFtTdHJhdGVneUluZGV4XSxcblx0XHRcdFx0XHRtdWx0aTogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHRdXG5cdFx0fTtcblx0fVxuXG59XG4iXX0=