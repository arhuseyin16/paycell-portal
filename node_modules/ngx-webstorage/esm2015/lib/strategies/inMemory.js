import { of, Subject } from 'rxjs';
import { StrategyCacheService } from '../core/strategyCache';
import { StorageStrategies } from '../constants/strategy';
import { Inject, Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../core/strategyCache';
export class InMemoryStorageStrategy {
    constructor(cache) {
        this.cache = cache;
        this.keyChanges = new Subject();
        this.isAvailable = true;
        this.name = InMemoryStorageStrategy.strategyName;
    }
    get(key) {
        return of(this.cache.get(this.name, key));
    }
    set(key, value) {
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    }
    del(key) {
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    }
    clear() {
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    }
}
InMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) { return new (t || InMemoryStorageStrategy)(ɵngcc0.ɵɵinject(StrategyCacheService)); };
InMemoryStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InMemoryStorageStrategy, factory: InMemoryStorageStrategy.ɵfac });
InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
InMemoryStorageStrategy.ctorParameters = () => [
    { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InMemoryStorageStrategy, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.StrategyCacheService, decorators: [{
                type: Inject,
                args: [StrategyCacheService]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5NZW1vcnkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL25neC13ZWJzdG9yYWdlL3NyYy9saWIvc3RyYXRlZ2llcy9pbk1lbW9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWEsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7O0FBR2pELE1BQU0sT0FBTyx1QkFBdUI7QUFBRyxJQU10QyxZQUFvRCxLQUEyQjtBQUFJLFFBQS9CLFVBQUssR0FBTCxLQUFLLENBQXNCO0FBQUMsUUFKdkUsZUFBVSxHQUFvQixJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ3RELFFBQUMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7QUFDN0IsUUFBVSxTQUFJLEdBQVcsdUJBQXVCLENBQUMsWUFBWSxDQUFDO0FBQzlELElBQ21GLENBQUM7QUFDcEYsSUFDQyxHQUFHLENBQUMsR0FBVztBQUFJLFFBQ2xCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM1QyxJQUFDLENBQUM7QUFDRixJQUNDLEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBVTtBQUFJLFFBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLFFBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDNUIsUUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQixJQUFDLENBQUM7QUFDRixJQUNDLEdBQUcsQ0FBQyxHQUFXO0FBQUksUUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqQyxRQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLFFBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEIsSUFBQyxDQUFDO0FBQ0YsSUFDQyxLQUFLO0FBQUssUUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsUUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixRQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xCLElBQUMsQ0FBQztBQUNGOztxSUFDQTtBQTdCaUIsb0NBQVksR0FBVyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQUFEakU7QUFBQztFQURGLFVBQVUsWkFDeUMsWUFMNUMsb0JBQW9CLHVCQVdkLE1BQU0sU0FBQyxvQkFBb0I7QUFBUTs7Ozs7O2tDQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XG5pbXBvcnQge09ic2VydmFibGUsIG9mLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7U3RyYXRlZ3lDYWNoZVNlcnZpY2V9IGZyb20gJy4uL2NvcmUvc3RyYXRlZ3lDYWNoZSc7XG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlTdG9yYWdlU3RyYXRlZ3kgaW1wbGVtZW50cyBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XG5cdHN0YXRpYyByZWFkb25seSBzdHJhdGVneU5hbWU6IHN0cmluZyA9IFN0b3JhZ2VTdHJhdGVnaWVzLkluTWVtb3J5O1xuXHRyZWFkb25seSBrZXlDaGFuZ2VzOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xuXHRpc0F2YWlsYWJsZTogYm9vbGVhbiA9IHRydWU7XG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IEluTWVtb3J5U3RvcmFnZVN0cmF0ZWd5LnN0cmF0ZWd5TmFtZTtcblxuXHRjb25zdHJ1Y3RvcihASW5qZWN0KFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlKSBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlKSB7fVxuXG5cdGdldChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG5cdFx0cmV0dXJuIG9mKHRoaXMuY2FjaGUuZ2V0KHRoaXMubmFtZSwga2V5KSk7XG5cdH1cblxuXHRzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuXHRcdHRoaXMuY2FjaGUuc2V0KHRoaXMubmFtZSwga2V5LCB2YWx1ZSk7XG5cdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcblx0XHRyZXR1cm4gb2YodmFsdWUpO1xuXHR9XG5cblx0ZGVsKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG5cdFx0dGhpcy5jYWNoZS5kZWwodGhpcy5uYW1lLCBrZXkpO1xuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XG5cdFx0cmV0dXJuIG9mKG51bGwpO1xuXHR9XG5cblx0Y2xlYXIoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG5cdFx0dGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KG51bGwpO1xuXHRcdHJldHVybiBvZihudWxsKTtcblx0fVxuXG59XG4iXX0=