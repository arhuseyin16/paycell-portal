{"ast":null,"code":"import _inherits from \"/Users/mac/Desktop/portal-web/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/mac/Desktop/portal-web/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/mac/Desktop/portal-web/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mac/Desktop/portal-web/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport { ɵɵdefineInjectable, Injectable, InjectionToken, Inject, PLATFORM_ID, NgZone, ɵɵinject, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar StorageStrategies;\n\n(function (StorageStrategies) {\n  StorageStrategies[\"Local\"] = \"local_strategy\";\n  StorageStrategies[\"Session\"] = \"session_strategy\";\n  StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nvar CompatHelper = /*#__PURE__*/function () {\n  function CompatHelper() {\n    _classCallCheck(this, CompatHelper);\n  }\n\n  _createClass(CompatHelper, null, [{\n    key: \"isStorageAvailable\",\n    value: function isStorageAvailable(storage) {\n      var available = true;\n\n      try {\n        if (typeof storage === 'object') {\n          storage.setItem('test-storage', 'foobar');\n          storage.removeItem('test-storage');\n        } else available = false;\n      } catch (e) {\n        available = false;\n      }\n\n      return available;\n    }\n  }]);\n\n  return CompatHelper;\n}();\n\nfunction noop() {}\n\nvar DefaultPrefix = 'ngx-webstorage';\nvar DefaultSeparator = '|';\nvar DefaultIsCaseSensitive = false;\n\nvar StorageKeyManager = /*#__PURE__*/function () {\n  function StorageKeyManager() {\n    _classCallCheck(this, StorageKeyManager);\n  }\n\n  _createClass(StorageKeyManager, null, [{\n    key: \"normalize\",\n    value: function normalize(raw) {\n      raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n      return \"\".concat(StorageKeyManager.prefix).concat(StorageKeyManager.separator).concat(raw);\n    }\n  }, {\n    key: \"isNormalizedKey\",\n    value: function isNormalizedKey(key) {\n      return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n    }\n  }, {\n    key: \"setPrefix\",\n    value: function setPrefix(prefix) {\n      StorageKeyManager.prefix = prefix;\n    }\n  }, {\n    key: \"setSeparator\",\n    value: function setSeparator(separator) {\n      StorageKeyManager.separator = separator;\n    }\n  }, {\n    key: \"setCaseSensitive\",\n    value: function setCaseSensitive(enable) {\n      StorageKeyManager.isCaseSensitive = enable;\n    }\n  }, {\n    key: \"consumeConfiguration\",\n    value: function consumeConfiguration(config) {\n      if ('prefix' in config) this.setPrefix(config.prefix);\n      if ('separator' in config) this.setSeparator(config.separator);\n      if ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n    }\n  }]);\n\n  return StorageKeyManager;\n}();\n\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\n\nvar SyncStorage = /*#__PURE__*/function () {\n  function SyncStorage(strategy) {\n    _classCallCheck(this, SyncStorage);\n\n    this.strategy = strategy;\n  }\n\n  _createClass(SyncStorage, [{\n    key: \"retrieve\",\n    value: function retrieve(key) {\n      var value;\n      this.strategy.get(StorageKeyManager.normalize(key)).subscribe(function (result) {\n        return value = typeof result === 'undefined' ? null : result;\n      });\n      return value;\n    }\n  }, {\n    key: \"store\",\n    value: function store(key, value) {\n      this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n      return value;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(key) {\n      if (key !== undefined) this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);else this.strategy.clear().subscribe(noop);\n    }\n  }, {\n    key: \"getStrategyName\",\n    value: function getStrategyName() {\n      return this.strategy.name;\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(key) {\n      var _this = this;\n\n      key = StorageKeyManager.normalize(key);\n      return this.strategy.keyChanges.pipe(filter(function (changed) {\n        return changed === null || changed === key;\n      }), switchMap(function () {\n        return _this.strategy.get(key);\n      }), distinctUntilChanged(), shareReplay());\n    }\n  }]);\n\n  return SyncStorage;\n}();\n\nvar AsyncStorage = /*#__PURE__*/function () {\n  function AsyncStorage(strategy) {\n    _classCallCheck(this, AsyncStorage);\n\n    this.strategy = strategy;\n  }\n\n  _createClass(AsyncStorage, [{\n    key: \"retrieve\",\n    value: function retrieve(key) {\n      return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(function (value) {\n        return typeof value === 'undefined' ? null : value;\n      }));\n    }\n  }, {\n    key: \"store\",\n    value: function store(key, value) {\n      return this.strategy.set(StorageKeyManager.normalize(key), value);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(key) {\n      return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n    }\n  }, {\n    key: \"getStrategyName\",\n    value: function getStrategyName() {\n      return this.strategy.name;\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(key) {\n      var _this2 = this;\n\n      key = StorageKeyManager.normalize(key);\n      return this.strategy.keyChanges.pipe(filter(function (changed) {\n        return changed === null || changed === key;\n      }), switchMap(function () {\n        return _this2.strategy.get(key);\n      }), distinctUntilChanged(), shareReplay());\n    }\n  }]);\n\n  return AsyncStorage;\n}();\n\nvar StrategyCacheService = /*#__PURE__*/function () {\n  function StrategyCacheService() {\n    _classCallCheck(this, StrategyCacheService);\n\n    this.caches = {};\n  }\n\n  _createClass(StrategyCacheService, [{\n    key: \"get\",\n    value: function get(strategyName, key) {\n      return this.getCacheStore(strategyName)[key];\n    }\n  }, {\n    key: \"set\",\n    value: function set(strategyName, key, value) {\n      this.getCacheStore(strategyName)[key] = value;\n    }\n  }, {\n    key: \"del\",\n    value: function del(strategyName, key) {\n      delete this.getCacheStore(strategyName)[key];\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(strategyName) {\n      this.caches[strategyName] = {};\n    }\n  }, {\n    key: \"getCacheStore\",\n    value: function getCacheStore(strategyName) {\n      if (strategyName in this.caches) return this.caches[strategyName];\n      return this.caches[strategyName] = {};\n    }\n  }]);\n\n  return StrategyCacheService;\n}();\n\nStrategyCacheService.ɵfac = function StrategyCacheService_Factory(t) {\n  return new (t || StrategyCacheService)();\n};\n\nStrategyCacheService.ɵprov = ɵɵdefineInjectable({\n  factory: function StrategyCacheService_Factory() {\n    return new StrategyCacheService();\n  },\n  token: StrategyCacheService,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(StrategyCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar LOCAL_STORAGE = new InjectionToken('window_local_storage');\n\nfunction getLocalStorage() {\n  return typeof window !== 'undefined' ? window.localStorage : null;\n}\n\nvar LocalStorageProvider = {\n  provide: LOCAL_STORAGE,\n  useFactory: getLocalStorage\n};\nvar SESSION_STORAGE = new InjectionToken('window_session_storage');\n\nfunction getSessionStorage() {\n  return typeof window !== 'undefined' ? window.sessionStorage : null;\n}\n\nvar SessionStorageProvider = {\n  provide: SESSION_STORAGE,\n  useFactory: getSessionStorage\n};\n\nvar BaseSyncStorageStrategy = /*#__PURE__*/function () {\n  function BaseSyncStorageStrategy(storage, cache) {\n    _classCallCheck(this, BaseSyncStorageStrategy);\n\n    this.storage = storage;\n    this.cache = cache;\n    this.keyChanges = new Subject();\n  }\n\n  _createClass(BaseSyncStorageStrategy, [{\n    key: \"isAvailable\",\n    get: function get() {\n      if (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n      return this._isAvailable;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var data = this.cache.get(this.name, key);\n      if (data !== undefined) return of(data);\n\n      try {\n        var item = this.storage.getItem(key);\n\n        if (item !== null) {\n          data = JSON.parse(item);\n          this.cache.set(this.name, key, data);\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n\n      return of(data);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var data = JSON.stringify(value);\n      this.storage.setItem(key, data);\n      this.cache.set(this.name, key, value);\n      this.keyChanges.next(key);\n      return of(value);\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      this.storage.removeItem(key);\n      this.cache.del(this.name, key);\n      this.keyChanges.next(key);\n      return of(null);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.storage.clear();\n      this.cache.clear(this.name);\n      this.keyChanges.next(null);\n      return of(null);\n    }\n  }]);\n\n  return BaseSyncStorageStrategy;\n}();\n\nvar LocalStorageStrategy = /*#__PURE__*/function (_BaseSyncStorageStrat) {\n  _inherits(LocalStorageStrategy, _BaseSyncStorageStrat);\n\n  var _super = _createSuper(LocalStorageStrategy);\n\n  function LocalStorageStrategy(storage, cache, platformId, zone) {\n    var _this3;\n\n    _classCallCheck(this, LocalStorageStrategy);\n\n    _this3 = _super.call(this, storage, cache);\n    _this3.storage = storage;\n    _this3.cache = cache;\n    _this3.platformId = platformId;\n    _this3.zone = zone;\n    _this3.name = LocalStorageStrategy.strategyName;\n    if (isPlatformBrowser(_this3.platformId)) _this3.listenExternalChanges();\n    return _this3;\n  }\n\n  _createClass(LocalStorageStrategy, [{\n    key: \"listenExternalChanges\",\n    value: function listenExternalChanges() {\n      var _this4 = this;\n\n      window.addEventListener('storage', function (event) {\n        return _this4.zone.run(function () {\n          if (event.storageArea !== _this4.storage) return;\n          var key = event.key;\n          if (key !== null) _this4.cache.del(_this4.name, event.key);else _this4.cache.clear(_this4.name);\n\n          _this4.keyChanges.next(key);\n        });\n      });\n    }\n  }]);\n\n  return LocalStorageStrategy;\n}(BaseSyncStorageStrategy);\n\nLocalStorageStrategy.ɵfac = function LocalStorageStrategy_Factory(t) {\n  return new (t || LocalStorageStrategy)(ɵngcc0.ɵɵinject(LOCAL_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nLocalStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: LocalStorageStrategy,\n  factory: LocalStorageStrategy.ɵfac\n});\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\n\nLocalStorageStrategy.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [LOCAL_STORAGE]\n    }]\n  }, {\n    type: StrategyCacheService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(LocalStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCAL_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nvar SessionStorageStrategy = /*#__PURE__*/function (_BaseSyncStorageStrat2) {\n  _inherits(SessionStorageStrategy, _BaseSyncStorageStrat2);\n\n  var _super2 = _createSuper(SessionStorageStrategy);\n\n  function SessionStorageStrategy(storage, cache, platformId, zone) {\n    var _this5;\n\n    _classCallCheck(this, SessionStorageStrategy);\n\n    _this5 = _super2.call(this, storage, cache);\n    _this5.storage = storage;\n    _this5.cache = cache;\n    _this5.platformId = platformId;\n    _this5.zone = zone;\n    _this5.name = SessionStorageStrategy.strategyName;\n    if (isPlatformBrowser(_this5.platformId)) _this5.listenExternalChanges();\n    return _this5;\n  }\n\n  _createClass(SessionStorageStrategy, [{\n    key: \"listenExternalChanges\",\n    value: function listenExternalChanges() {\n      var _this6 = this;\n\n      window.addEventListener('storage', function (event) {\n        return _this6.zone.run(function () {\n          if (event.storageArea !== _this6.storage) return;\n          var key = event.key;\n          if (event.key !== null) _this6.cache.del(_this6.name, event.key);else _this6.cache.clear(_this6.name);\n\n          _this6.keyChanges.next(key);\n        });\n      });\n    }\n  }]);\n\n  return SessionStorageStrategy;\n}(BaseSyncStorageStrategy);\n\nSessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) {\n  return new (t || SessionStorageStrategy)(ɵngcc0.ɵɵinject(SESSION_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nSessionStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SessionStorageStrategy,\n  factory: SessionStorageStrategy.ɵfac\n});\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\n\nSessionStorageStrategy.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [SESSION_STORAGE]\n    }]\n  }, {\n    type: StrategyCacheService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SessionStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SESSION_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nvar InMemoryStorageStrategy = /*#__PURE__*/function () {\n  function InMemoryStorageStrategy(cache) {\n    _classCallCheck(this, InMemoryStorageStrategy);\n\n    this.cache = cache;\n    this.keyChanges = new Subject();\n    this.isAvailable = true;\n    this.name = InMemoryStorageStrategy.strategyName;\n  }\n\n  _createClass(InMemoryStorageStrategy, [{\n    key: \"get\",\n    value: function get(key) {\n      return of(this.cache.get(this.name, key));\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      this.cache.set(this.name, key, value);\n      this.keyChanges.next(key);\n      return of(value);\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      this.cache.del(this.name, key);\n      this.keyChanges.next(key);\n      return of(null);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.cache.clear(this.name);\n      this.keyChanges.next(null);\n      return of(null);\n    }\n  }]);\n\n  return InMemoryStorageStrategy;\n}();\n\nInMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) {\n  return new (t || InMemoryStorageStrategy)(ɵngcc0.ɵɵinject(StrategyCacheService));\n};\n\nInMemoryStorageStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: InMemoryStorageStrategy,\n  factory: InMemoryStorageStrategy.ɵfac\n});\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\n\nInMemoryStorageStrategy.ctorParameters = function () {\n  return [{\n    type: StrategyCacheService,\n    decorators: [{\n      type: Inject,\n      args: [StrategyCacheService]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InMemoryStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StrategyCacheService,\n      decorators: [{\n        type: Inject,\n        args: [StrategyCacheService]\n      }]\n    }];\n  }, null);\n})();\n\nvar STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nvar Strategies = [{\n  provide: STORAGE_STRATEGIES,\n  useClass: InMemoryStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: LocalStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: SessionStorageStrategy,\n  multi: true\n}];\nvar StorageStrategyStubName = 'stub_strategy';\n\nvar StorageStrategyStub = /*#__PURE__*/function () {\n  function StorageStrategyStub(name) {\n    _classCallCheck(this, StorageStrategyStub);\n\n    this.keyChanges = new Subject();\n    this.store = {};\n    this._available = true;\n    this.name = name || StorageStrategyStubName;\n  }\n\n  _createClass(StorageStrategyStub, [{\n    key: \"isAvailable\",\n    get: function get() {\n      return this._available;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return of(this.store[key]);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      this.store[key] = value;\n      this.keyChanges.next(key);\n      return of(value);\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      delete this.store[key];\n      this.keyChanges.next(key);\n      return of(null);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.store = {};\n      this.keyChanges.next(null);\n      return of(null);\n    }\n  }]);\n\n  return StorageStrategyStub;\n}();\n\nvar StorageStub = /*#__PURE__*/function () {\n  function StorageStub() {\n    _classCallCheck(this, StorageStub);\n\n    this.store = {};\n  }\n\n  _createClass(StorageStub, [{\n    key: \"length\",\n    get: function get() {\n      return Object.keys(this.store).length;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.store = {};\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.store[key] || null;\n    }\n  }, {\n    key: \"key\",\n    value: function key(index) {\n      return Object.keys(this.store)[index];\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      delete this.store[key];\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      this.store[key] = value;\n    }\n  }]);\n\n  return StorageStub;\n}();\n\nvar InvalidStrategyError = 'invalid_strategy';\n\nvar StrategyIndex = /*#__PURE__*/function () {\n  function StrategyIndex(strategies) {\n    _classCallCheck(this, StrategyIndex);\n\n    this.strategies = strategies;\n    this.registration$ = new Subject();\n    if (!strategies) strategies = [];\n    this.strategies = strategies.reverse().map(function (strategy, index, arr) {\n      return strategy.name;\n    }).map(function (name, index, arr) {\n      return arr.indexOf(name) === index ? index : null;\n    }).filter(function (index) {\n      return index !== null;\n    }).map(function (index) {\n      return strategies[index];\n    });\n  }\n\n  _createClass(StrategyIndex, [{\n    key: \"getStrategy\",\n    value: function getStrategy(name) {\n      return StrategyIndex.get(name);\n    }\n  }, {\n    key: \"indexStrategies\",\n    value: function indexStrategies() {\n      var _this7 = this;\n\n      this.strategies.forEach(function (strategy) {\n        return _this7.register(strategy.name, strategy);\n      });\n    }\n  }, {\n    key: \"indexStrategy\",\n    value: function indexStrategy(name) {\n      var overrideIfExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n      var strategy = this.strategies.find(function (strategy) {\n        return strategy.name === name;\n      });\n      if (!strategy) throw new Error(InvalidStrategyError);\n      this.register(name, strategy, overrideIfExists);\n      return strategy;\n    }\n  }, {\n    key: \"register\",\n    value: function register(name, strategy) {\n      var overrideIfExists = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n        StrategyIndex.set(name, strategy);\n        this.registration$.next(name);\n      }\n    }\n  }], [{\n    key: \"get\",\n    value: function get(name) {\n      if (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n      var strategy = this.index[name];\n\n      if (!strategy.isAvailable) {\n        strategy = this.index[StorageStrategies.InMemory];\n      }\n\n      return strategy;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, strategy) {\n      this.index[name] = strategy;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(name) {\n      if (name !== undefined) delete this.index[name];else this.index = {};\n    }\n  }, {\n    key: \"isStrategyRegistered\",\n    value: function isStrategyRegistered(name) {\n      return name in this.index;\n    }\n  }, {\n    key: \"hasRegistredStrategies\",\n    value: function hasRegistredStrategies() {\n      return Object.keys(this.index).length > 0;\n    }\n  }]);\n\n  return StrategyIndex;\n}();\n\nStrategyIndex.ɵfac = function StrategyIndex_Factory(t) {\n  return new (t || StrategyIndex)(ɵngcc0.ɵɵinject(STORAGE_STRATEGIES, 8));\n};\n\nStrategyIndex.index = {};\nStrategyIndex.ɵprov = ɵɵdefineInjectable({\n  factory: function StrategyIndex_Factory() {\n    return new StrategyIndex(ɵɵinject(STORAGE_STRATEGIES, 8));\n  },\n  token: StrategyIndex,\n  providedIn: \"root\"\n});\n\nStrategyIndex.ctorParameters = function () {\n  return [{\n    type: Array,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [STORAGE_STRATEGIES]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(StrategyIndex, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [STORAGE_STRATEGIES]\n      }]\n    }];\n  }, null);\n})();\n\nvar LocalStorageService = /*#__PURE__*/function (_SyncStorage) {\n  _inherits(LocalStorageService, _SyncStorage);\n\n  var _super3 = _createSuper(LocalStorageService);\n\n  function LocalStorageService() {\n    _classCallCheck(this, LocalStorageService);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return LocalStorageService;\n}(SyncStorage);\n\nfunction buildService(index) {\n  var strategy = index.indexStrategy(StorageStrategies.Local);\n  return new SyncStorage(strategy);\n}\n\nvar LocalStorageServiceProvider = {\n  provide: LocalStorageService,\n  useFactory: buildService,\n  deps: [StrategyIndex]\n};\n\nvar SessionStorageService = /*#__PURE__*/function (_SyncStorage2) {\n  _inherits(SessionStorageService, _SyncStorage2);\n\n  var _super4 = _createSuper(SessionStorageService);\n\n  function SessionStorageService() {\n    _classCallCheck(this, SessionStorageService);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return SessionStorageService;\n}(SyncStorage);\n\nfunction buildService$1(index) {\n  var strategy = index.indexStrategy(StorageStrategies.Session);\n  return new SyncStorage(strategy);\n}\n\nvar SessionStorageServiceProvider = {\n  provide: SessionStorageService,\n  useFactory: buildService$1,\n  deps: [StrategyIndex]\n};\n\nvar DecoratorBuilder = /*#__PURE__*/function () {\n  function DecoratorBuilder() {\n    _classCallCheck(this, DecoratorBuilder);\n  }\n\n  _createClass(DecoratorBuilder, null, [{\n    key: \"buildSyncStrategyDecorator\",\n    value: function buildSyncStrategyDecorator(strategyName, prototype, propName, key) {\n      var defaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var rawKey = key || propName;\n      var storageKey;\n      Object.defineProperty(prototype, propName, {\n        get: function get() {\n          var value;\n          StrategyIndex.get(strategyName).get(getKey()).subscribe(function (result) {\n            return value = result;\n          });\n          return value === undefined ? defaultValue : value;\n        },\n        set: function set(value) {\n          StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n        }\n      });\n\n      function getKey() {\n        if (storageKey !== undefined) return storageKey;\n        return storageKey = StorageKeyManager.normalize(rawKey);\n      }\n    }\n  }]);\n\n  return DecoratorBuilder;\n}();\n\nfunction LocalStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n  };\n}\n\nfunction SessionStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n  };\n}\n\nvar Services = [LocalStorageServiceProvider, SessionStorageServiceProvider];\nvar LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\n\nfunction appInit(index) {\n  index.indexStrategies();\n  return function () {\n    return StrategyIndex.index;\n  };\n}\n\nvar NgxWebstorageModule = /*#__PURE__*/function () {\n  function NgxWebstorageModule(index, config) {\n    _classCallCheck(this, NgxWebstorageModule);\n\n    if (config) StorageKeyManager.consumeConfiguration(config);else console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n  }\n\n  _createClass(NgxWebstorageModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: NgxWebstorageModule,\n        providers: [{\n          provide: LIB_CONFIG,\n          useValue: config\n        }, LocalStorageProvider, SessionStorageProvider].concat(Services, Strategies, [{\n          provide: APP_INITIALIZER,\n          useFactory: appInit,\n          deps: [StrategyIndex],\n          multi: true\n        }])\n      };\n    }\n  }]);\n\n  return NgxWebstorageModule;\n}();\n\nNgxWebstorageModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgxWebstorageModule\n});\nNgxWebstorageModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgxWebstorageModule_Factory(t) {\n    return new (t || NgxWebstorageModule)(ɵngcc0.ɵɵinject(StrategyIndex), ɵngcc0.ɵɵinject(LIB_CONFIG, 8));\n  }\n});\n\nNgxWebstorageModule.ctorParameters = function () {\n  return [{\n    type: StrategyIndex\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LIB_CONFIG]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgxWebstorageModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: StrategyIndex\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIB_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit, getLocalStorage as ɵa, LocalStorageProvider as ɵb, getSessionStorage as ɵc, SessionStorageProvider as ɵd, Strategies as ɵe, buildService as ɵf, LocalStorageServiceProvider as ɵg, buildService$1 as ɵh, SessionStorageServiceProvider as ɵi, BaseSyncStorageStrategy as ɵj, STORAGE_STRATEGIES as ɵl, Services as ɵn };","map":{"version":3,"sources":["../projects/ngx-webstorage/src/lib/constants/strategy.ts","../projects/ngx-webstorage/src/lib/helpers/compat.ts","../projects/ngx-webstorage/src/lib/helpers/noop.ts","../projects/ngx-webstorage/src/lib/constants/config.ts","../projects/ngx-webstorage/src/lib/helpers/storageKeyManager.ts","../esm2015/projects/ngx-webstorage/src/lib/core/templates/syncStorage.ts","../esm2015/projects/ngx-webstorage/src/lib/core/templates/asyncStorage.ts","../projects/ngx-webstorage/src/lib/core/strategyCache.ts","../projects/ngx-webstorage/src/lib/core/nativeStorage.ts","../projects/ngx-webstorage/src/lib/strategies/baseSyncStorage.ts","../projects/ngx-webstorage/src/lib/strategies/localStorage.ts","../projects/ngx-webstorage/src/lib/strategies/sessionStorage.ts","../projects/ngx-webstorage/src/lib/strategies/inMemory.ts","../projects/ngx-webstorage/src/lib/strategies/index.ts","../../projects/ngx-webstorage/src/stubs/storageStrategy.stub.ts","../../projects/ngx-webstorage/src/stubs/storage.stub.ts","../projects/ngx-webstorage/src/lib/services/strategyIndex.ts","../projects/ngx-webstorage/src/lib/services/localStorage.ts","../projects/ngx-webstorage/src/lib/services/sessionStorage.ts","../projects/ngx-webstorage/src/lib/helpers/decoratorBuilder.ts","../../projects/ngx-webstorage/src/lib/decorators.ts","../projects/ngx-webstorage/src/lib/services/index.ts","../../projects/ngx-webstorage/src/lib/module.ts","../../../projects/ngx-webstorage/src/public_api.ts","../../../projects/ngx-webstorage/src/ngx-webstorage.ts"],"names":["buildService"],"mappings":"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","sourcesContent":["export enum StorageStrategies {\n\tLocal = 'local_strategy',\n\tSession = 'session_strategy',\n\tInMemory = 'in_memory_strategy'\n}\n","import {WebStorage} from '../core/interfaces/webStorage';\n\nexport class CompatHelper {\n\n\tstatic isStorageAvailable(storage: WebStorage): boolean {\n\t\tlet available = true;\n\t\ttry {\n\t\t\tif (typeof storage === 'object') {\n\t\t\t\tstorage.setItem('test-storage', 'foobar');\n\t\t\t\tstorage.removeItem('test-storage');\n\t\t\t}\n\t\t\telse available = false;\n\t\t} catch(e) {\n\t\t\tavailable = false;\n\t\t}\n\t\treturn available;\n\t}\n\n}\n","export function noop() {}\n","export const DefaultPrefix = 'ngx-webstorage';\nexport const DefaultSeparator = '|';\nexport const DefaultIsCaseSensitive = false;\n","import {DefaultIsCaseSensitive, DefaultPrefix, DefaultSeparator} from '../constants/config';\nimport {NgxWebstorageConfiguration} from '../config';\n\nexport class StorageKeyManager {\n\t\n\tstatic prefix = DefaultPrefix;\n\tstatic separator = DefaultSeparator;\n\tstatic isCaseSensitive = DefaultIsCaseSensitive;\n\t\n\tstatic normalize(raw: string) {\n\t\traw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n\t\treturn `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n\t}\n\t\n\tstatic isNormalizedKey(key: string) {\n\t\treturn key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n\t}\n\t\n\tstatic setPrefix(prefix: string) {\n\t\tStorageKeyManager.prefix = prefix;\n\t}\n\t\n\tstatic setSeparator(separator: string) {\n\t\tStorageKeyManager.separator = separator;\n\t}\n\t\n\tstatic setCaseSensitive(enable: boolean) {\n\t\tStorageKeyManager.isCaseSensitive = enable;\n\t}\n\t\n\tstatic consumeConfiguration(config: NgxWebstorageConfiguration) {\n\t\tif ('prefix' in config) this.setPrefix(config.prefix);\n\t\tif ('separator' in config) this.setSeparator(config.separator);\n\t\tif ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n\t}\n}\n","import {StorageStrategy} from '../interfaces/storageStrategy';\nimport {noop} from '../../helpers/noop';\nimport {StorageService} from '../interfaces/storageService';\nimport {StorageKeyManager} from '../../helpers/storageKeyManager';\nimport {Observable} from 'rxjs';\nimport {distinctUntilChanged, filter, shareReplay, switchMap} from 'rxjs/operators';\n\nexport class SyncStorage implements StorageService {\n\tconstructor(protected strategy: StorageStrategy<any>) {\n\t}\n\n\tretrieve(key: string): any {\n\t\tlet value: any;\n\t\tthis.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);\n\t\treturn value;\n\t}\n\n\tstore(key: string, value: any): any {\n\t\tthis.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n\t\treturn value;\n\t}\n\n\tclear(key?: string): void {\n\t\tif (key !== undefined)\n\t\t\tthis.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);\n\t\telse this.strategy.clear().subscribe(noop);\n\t}\n\n\tgetStrategyName(): string {return this.strategy.name; }\n\n\tobserve(key: string): Observable<any> {\n\t\tkey = StorageKeyManager.normalize(key);\n\t\treturn this.strategy.keyChanges.pipe(\n\t\t\tfilter((changed: string) => changed === null || changed === key),\n\t\t\tswitchMap(() => this.strategy.get(key)),\n\t\t\tdistinctUntilChanged(),\n\t\t\tshareReplay()\n\t\t);\n\t}\n\n}\n","import {StorageStrategy} from '../interfaces/storageStrategy';\nimport {Observable} from 'rxjs';\nimport {StorageService} from '../interfaces/storageService';\nimport {StorageKeyManager} from '../../helpers/storageKeyManager';\nimport {distinctUntilChanged, filter, map, shareReplay, switchMap} from 'rxjs/operators';\n\nexport class AsyncStorage implements StorageService {\n\n\tconstructor(protected strategy: StorageStrategy<any>) {\n\t}\n\n\tretrieve(key: string): Observable<any> {\n\t\treturn this.strategy.get(StorageKeyManager.normalize(key)).pipe(\n\t\t\tmap((value: any) => typeof value === 'undefined' ? null : value)\n\t\t);\n\t}\n\n\tstore(key: string, value: any): Observable<any> {\n\t\treturn this.strategy.set(StorageKeyManager.normalize(key), value);\n\t}\n\n\tclear(key?: string): Observable<void> {\n\t\treturn key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n\t}\n\n\tgetStrategyName(): string { return this.strategy.name; }\n\n\tobserve(key: string): Observable<any> {\n\t\tkey = StorageKeyManager.normalize(key);\n\t\treturn this.strategy.keyChanges.pipe(\n\t\t\tfilter((changed: string) => changed === null || changed === key),\n\t\t\tswitchMap(() => this.strategy.get(key)),\n\t\t\tdistinctUntilChanged(),\n\t\t\tshareReplay()\n\t\t);\n\t}\n}\n","import {Injectable} from '@angular/core';\n\nexport interface StrategyCache {\n\t[key: string]: any;\n}\n\n@Injectable({providedIn: 'root'})\nexport class StrategyCacheService {\n\n\tprotected caches: { [name: string]: StrategyCache } = {};\n\n\tget(strategyName: string, key: string) {\n\t\treturn this.getCacheStore(strategyName)[key];\n\t}\n\n\tset(strategyName: string, key: string, value: any) {\n\t\tthis.getCacheStore(strategyName)[key] = value;\n\t}\n\n\tdel(strategyName: string, key: string) {\n\t\tdelete this.getCacheStore(strategyName)[key];\n\t}\n\n\tclear(strategyName: string) {\n\t\tthis.caches[strategyName] = {} as StrategyCache;\n\t}\n\n\tprotected getCacheStore(strategyName: string): StrategyCache {\n\t\tif (strategyName in this.caches) return this.caches[strategyName];\n\t\treturn this.caches[strategyName] = {} as StrategyCache;\n\t}\n}\n","import {FactoryProvider, InjectionToken} from '@angular/core';\nimport {WebStorage} from './interfaces/webStorage';\n\nexport const LOCAL_STORAGE: InjectionToken<WebStorage> = new InjectionToken<WebStorage>('window_local_storage');\n\nexport function getLocalStorage() {\n\treturn (typeof window !== 'undefined') ? window.localStorage : null;\n}\n\nexport const LocalStorageProvider: FactoryProvider = {provide: LOCAL_STORAGE, useFactory: getLocalStorage};\n\nexport const SESSION_STORAGE: InjectionToken<WebStorage> = new InjectionToken<WebStorage>('window_session_storage');\n\nexport function getSessionStorage() {\n\treturn (typeof window !== 'undefined') ? window.sessionStorage : null;\n}\n\nexport const SessionStorageProvider: FactoryProvider = {provide: SESSION_STORAGE, useFactory: getSessionStorage};\n","import {StorageStrategy} from '../core/interfaces/storageStrategy';\nimport {Observable, of, Subject} from 'rxjs';\nimport {StrategyCacheService} from '../core/strategyCache';\nimport {CompatHelper} from '../helpers/compat';\nimport {WebStorage} from '../core/interfaces/webStorage';\n\nexport abstract class BaseSyncStorageStrategy implements StorageStrategy<any> {\n\treadonly keyChanges: Subject<string> = new Subject();\n\tabstract readonly name: string;\n\n\tconstructor(protected storage: WebStorage, protected cache: StrategyCacheService) {}\n\n\tprotected _isAvailable: boolean;\n\n\tget isAvailable(): boolean {\n\t\tif (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n\t\treturn this._isAvailable;\n\t}\n\t\n\tget(key: string): Observable<any> {\n\t\tlet data: any = this.cache.get(this.name, key);\n\t\tif (data !== undefined) return of(data);\n\n\t\ttry {\n\t\t\tconst item: any = this.storage.getItem(key);\n\t\t\tif (item !== null) {\n\t\t\t\tdata = JSON.parse(item);\n\t\t\t\tthis.cache.set(this.name, key, data);\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tconsole.warn(err);\n\t\t}\n\n\t\treturn of(data);\n\t}\n\n\tset(key: string, value: any): Observable<any> {\n\t\tconst data: string = JSON.stringify(value);\n\t\tthis.storage.setItem(key, data);\n\t\tthis.cache.set(this.name, key, value);\n\t\tthis.keyChanges.next(key);\n\t\treturn of(value);\n\t}\n\n\tdel(key: string): Observable<void> {\n\t\tthis.storage.removeItem(key);\n\t\tthis.cache.del(this.name, key);\n\t\tthis.keyChanges.next(key);\n\t\treturn of(null);\n\t}\n\n\tclear(): Observable<void> {\n\t\tthis.storage.clear();\n\t\tthis.cache.clear(this.name);\n\t\tthis.keyChanges.next(null);\n\t\treturn of(null);\n\t}\n\n}\n","import {StrategyCacheService} from '../core/strategyCache';\nimport {BaseSyncStorageStrategy} from './baseSyncStorage';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {LOCAL_STORAGE} from '../core/nativeStorage';\nimport {StorageStrategies} from '../constants/strategy';\nimport {isPlatformBrowser} from '@angular/common';\nimport {WebStorage} from '../core/interfaces/webStorage';\n\n@Injectable()\nexport class LocalStorageStrategy extends BaseSyncStorageStrategy {\n\tstatic readonly strategyName: string = StorageStrategies.Local;\n\treadonly name: string = LocalStorageStrategy.strategyName;\n\n\tconstructor(@Inject(LOCAL_STORAGE) protected storage: WebStorage,\n\t            protected cache: StrategyCacheService,\n\t            @Inject(PLATFORM_ID) protected platformId: any,\n\t            protected zone: NgZone) {\n\t\tsuper(storage, cache);\n\t\tif (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n\t}\n\n\tprotected listenExternalChanges() {\n\t\twindow.addEventListener('storage', (event: StorageEvent) => this.zone.run(() => {\n\t\t\tif (event.storageArea !== this.storage) return;\n\t\t\tconst key: string = event.key;\n\t\t\tif (key !== null) this.cache.del(this.name, event.key);\n\t\t\telse this.cache.clear(this.name);\n\t\t\tthis.keyChanges.next(key);\n\t\t}));\n\t}\n\n}\n","import {StrategyCacheService} from '../core/strategyCache';\nimport {BaseSyncStorageStrategy} from './baseSyncStorage';\nimport {Inject, Injectable, NgZone, PLATFORM_ID} from '@angular/core';\nimport {SESSION_STORAGE} from '../core/nativeStorage';\nimport {StorageStrategies} from '../constants/strategy';\nimport {isPlatformBrowser} from '@angular/common';\nimport {WebStorage} from '../core/interfaces/webStorage';\n\n@Injectable()\nexport class SessionStorageStrategy extends BaseSyncStorageStrategy {\n\tstatic readonly strategyName: string = StorageStrategies.Session;\n\treadonly name: string = SessionStorageStrategy.strategyName;\n\n\tconstructor(@Inject(SESSION_STORAGE) protected storage: WebStorage,\n\t            protected cache: StrategyCacheService,\n\t            @Inject(PLATFORM_ID) protected platformId: any,\n\t            protected zone: NgZone) {\n\t\tsuper(storage, cache);\n\t\tif (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n\t}\n\n\tprotected listenExternalChanges() {\n\t\twindow.addEventListener('storage', (event: StorageEvent) => this.zone.run(() => {\n\t\t\tif (event.storageArea !== this.storage) return;\n\t\t\tconst key: string = event.key;\n\t\t\tif (event.key !== null) this.cache.del(this.name, event.key);\n\t\t\telse this.cache.clear(this.name);\n\t\t\tthis.keyChanges.next(key);\n\t\t}));\n\t}\n\n}\n","import {StorageStrategy} from '../core/interfaces/storageStrategy';\nimport {Observable, of, Subject} from 'rxjs';\nimport {StrategyCacheService} from '../core/strategyCache';\nimport {StorageStrategies} from '../constants/strategy';\nimport {Inject, Injectable} from '@angular/core';\n\n@Injectable()\nexport class InMemoryStorageStrategy implements StorageStrategy<any> {\n\tstatic readonly strategyName: string = StorageStrategies.InMemory;\n\treadonly keyChanges: Subject<string> = new Subject();\n\tisAvailable: boolean = true;\n\treadonly name: string = InMemoryStorageStrategy.strategyName;\n\n\tconstructor(@Inject(StrategyCacheService) protected cache: StrategyCacheService) {}\n\n\tget(key: string): Observable<any> {\n\t\treturn of(this.cache.get(this.name, key));\n\t}\n\n\tset(key: string, value: any): Observable<any> {\n\t\tthis.cache.set(this.name, key, value);\n\t\tthis.keyChanges.next(key);\n\t\treturn of(value);\n\t}\n\n\tdel(key: string): Observable<void> {\n\t\tthis.cache.del(this.name, key);\n\t\tthis.keyChanges.next(key);\n\t\treturn of(null);\n\t}\n\n\tclear(): Observable<void> {\n\t\tthis.cache.clear(this.name);\n\t\tthis.keyChanges.next(null);\n\t\treturn of(null);\n\t}\n\n}\n","import {InjectionToken, Provider} from '@angular/core';\nimport {StorageStrategy} from '../core/interfaces/storageStrategy';\nimport {LocalStorageStrategy} from './localStorage';\nimport {SessionStorageStrategy} from './sessionStorage';\nimport {InMemoryStorageStrategy} from './inMemory';\n\nexport const STORAGE_STRATEGIES: InjectionToken<StorageStrategy<any>> = new InjectionToken<StorageStrategy<any>>('STORAGE_STRATEGIES');\n\nexport const Strategies: Provider[] = [\n\t{provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true},\n\t{provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true},\n\t{provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true},\n];\n","import {Observable, of, Subject} from 'rxjs';\nimport {StorageStrategy} from '../lib/core/interfaces/storageStrategy';\n\nexport const StorageStrategyStubName: string = 'stub_strategy';\n\nexport class StorageStrategyStub implements StorageStrategy<any> {\n\n\treadonly keyChanges: Subject<string> = new Subject();\n\tpublic store: any = {};\n\tpublic _available: boolean = true;\n\treadonly name: string;\n\n\tconstructor(name?: string) {\n\t\tthis.name = name || StorageStrategyStubName;\n\t}\n\n\tget isAvailable(): boolean {\n\t\treturn this._available;\n\t}\n\n\tget(key: string): Observable<any> {\n\t\treturn of(this.store[key]);\n\t}\n\n\tset(key: string, value: any): Observable<any> {\n\t\tthis.store[key] = value;\n\t\tthis.keyChanges.next(key);\n\t\treturn of(value);\n\t}\n\n\tdel(key: string): Observable<void> {\n\t\tdelete this.store[key];\n\t\tthis.keyChanges.next(key);\n\t\treturn of(null);\n\t}\n\n\tclear(): Observable<void> {\n\t\tthis.store = {};\n\t\tthis.keyChanges.next(null);\n\t\treturn of(null);\n\t}\n\n}\n","import {WebStorage} from '../lib/core/interfaces/webStorage';\n\nexport class StorageStub implements WebStorage {\n\t[name: string]: any;\n\n\tpublic store: { [prop: string]: any } = {};\n\n\tget length(): number {\n\t\treturn Object.keys(this.store).length;\n\t}\n\n\tclear(): void {\n\t\tthis.store = {};\n\t}\n\n\tgetItem(key: string): string | null {\n\t\treturn this.store[key] || null;\n\t}\n\n\tkey(index: number): string | null {\n\t\treturn Object.keys(this.store)[index];\n\t}\n\n\tremoveItem(key: string): void {\n\t\tdelete this.store[key];\n\t}\n\n\tsetItem(key: string, value: string): void {\n\t\tthis.store[key] = value;\n\t}\n\n}\n","import {StorageStrategy} from '../core/interfaces/storageStrategy';\nimport {Subject} from 'rxjs';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {STORAGE_STRATEGIES} from '../strategies';\nimport {StorageStrategies} from '../constants/strategy';\n\nexport const InvalidStrategyError = 'invalid_strategy';\n\n@Injectable({providedIn: 'root'})\nexport class StrategyIndex {\n\n\tstatic index: { [name: string]: StorageStrategy<any> } = {};\n\treadonly registration$: Subject<string> = new Subject();\n\n\tconstructor(@Optional() @Inject(STORAGE_STRATEGIES) protected strategies: StorageStrategy<any>[]) {\n\t\tif (!strategies) strategies = [];\n\t\tthis.strategies = strategies.reverse()\n\t\t\t.map((strategy: StorageStrategy<any>, index, arr) => strategy.name)\n\t\t\t.map((name: string, index, arr) => arr.indexOf(name) === index ? index : null)\n\t\t\t.filter((index: number) => index !== null)\n\t\t\t.map((index: number) => strategies[index]);\n\t}\n\n\tstatic get(name: string): StorageStrategy<any> {\n\t\tif (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n\t\tlet strategy: StorageStrategy<any> = this.index[name];\n\t\tif (!strategy.isAvailable) {\n\t\t\tstrategy = this.index[StorageStrategies.InMemory];\n\t\t}\n\t\treturn strategy;\n\t}\n\n\tstatic set(name: string, strategy): void {\n\t\tthis.index[name] = strategy;\n\t}\n\n\tstatic clear(name?: string): void {\n\t\tif (name !== undefined) delete this.index[name];\n\t\telse this.index = {};\n\t}\n\n\tstatic isStrategyRegistered(name: string): boolean {\n\t\treturn name in this.index;\n\t}\n\n\tstatic hasRegistredStrategies(): boolean {\n\t\treturn Object.keys(this.index).length > 0;\n\t}\n\n\tpublic getStrategy(name: string): StorageStrategy<any> {\n\t\treturn StrategyIndex.get(name);\n\t}\n\n\tpublic indexStrategies() {\n\t\tthis.strategies.forEach((strategy: StorageStrategy<any>) => this.register(strategy.name, strategy));\n\t}\n\n\tpublic indexStrategy(name: string, overrideIfExists: boolean = false): StorageStrategy<any> {\n\t\tif (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n\t\tconst strategy: StorageStrategy<any> = this.strategies.find((strategy: StorageStrategy<any>) => strategy.name === name);\n\t\tif (!strategy) throw new Error(InvalidStrategyError);\n\t\tthis.register(name, strategy, overrideIfExists);\n\t\treturn strategy;\n\t}\n\n\tpublic register(name: string, strategy: StorageStrategy<any>, overrideIfExists: boolean = false) {\n\t\tif (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n\t\t\tStrategyIndex.set(name, strategy);\n\t\t\tthis.registration$.next(name);\n\t\t}\n\t}\n\n}\n","import {FactoryProvider} from '@angular/core';\nimport {SyncStorage} from '../core/templates/syncStorage';\nimport {StrategyIndex} from './strategyIndex';\nimport {StorageStrategy} from '../core/interfaces/storageStrategy';\nimport {StorageStrategies} from '../constants/strategy';\n\nexport class LocalStorageService extends SyncStorage {}\n\nexport function buildService(index: StrategyIndex) {\n\tconst strategy: StorageStrategy<any> = index.indexStrategy(StorageStrategies.Local);\n\treturn new SyncStorage(strategy);\n}\n\nexport const LocalStorageServiceProvider: FactoryProvider = {\n\tprovide: LocalStorageService,\n\tuseFactory: buildService,\n\tdeps: [StrategyIndex]\n};\n","import {FactoryProvider} from '@angular/core';\nimport {SyncStorage} from '../core/templates/syncStorage';\nimport {StrategyIndex} from './strategyIndex';\nimport {StorageStrategy} from '../core/interfaces/storageStrategy';\nimport {StorageStrategies} from '../constants/strategy';\n\nexport class SessionStorageService extends SyncStorage {}\n\nexport function buildService(index: StrategyIndex) {\n\tconst strategy: StorageStrategy<any> = index.indexStrategy(StorageStrategies.Session);\n\treturn new SyncStorage(strategy);\n}\n\nexport const SessionStorageServiceProvider: FactoryProvider = {\n\tprovide: SessionStorageService,\n\tuseFactory: buildService,\n\tdeps: [StrategyIndex]\n};\n","import {StrategyIndex} from '../services/strategyIndex';\nimport {StorageStrategies} from '../constants/strategy';\nimport {StorageKeyManager} from './storageKeyManager';\nimport {noop} from './noop';\n\nexport class DecoratorBuilder {\n\t\n\tstatic buildSyncStrategyDecorator(strategyName: string | StorageStrategies, prototype, propName: string, key?: string, defaultValue: any = null) {\n\t\tconst rawKey: string = key || propName;\n\t\tlet storageKey: string;\n\t\t\n\t\tObject.defineProperty(prototype, propName, {\n\t\t\tget: function() {\n\t\t\t\tlet value: any;\n\t\t\t\tStrategyIndex.get(strategyName).get(getKey()).subscribe((result) => value = result);\n\t\t\t\treturn value === undefined ? defaultValue : value;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tStrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n\t\t\t}\n\t\t});\n\t\t\n\t\tfunction getKey() {\n\t\t\tif (storageKey !== undefined) return storageKey;\n\t\t\treturn storageKey = StorageKeyManager.normalize(rawKey);\n\t\t}\n\t}\n}\n","import {StorageStrategies} from './constants/strategy';\nimport {DecoratorBuilder} from './helpers/decoratorBuilder';\n\nexport function LocalStorage(key?: string, defaultValue?: any) {\n\treturn function(prototype, propName) {\n\t\tDecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n\t};\n}\n\nexport function SessionStorage(key?: string, defaultValue?: any) {\n\treturn function(prototype, propName) {\n\t\tDecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n\t};\n}\n","import {LocalStorageServiceProvider} from './localStorage';\nimport {Provider} from '@angular/core';\nimport {SessionStorageServiceProvider} from './sessionStorage';\n\nexport const Services: Provider[] = [\n\tLocalStorageServiceProvider,\n\tSessionStorageServiceProvider\n];\n","import {APP_INITIALIZER, Inject, InjectionToken, ModuleWithProviders, NgModule, Optional} from '@angular/core';\nimport {LocalStorageProvider, SessionStorageProvider} from './core/nativeStorage';\nimport {Services} from './services/index';\nimport {Strategies} from './strategies/index';\nimport {StrategyIndex} from './services/strategyIndex';\nimport {NgxWebstorageConfiguration} from './config';\nimport {StorageKeyManager} from './helpers/storageKeyManager';\n\nexport const LIB_CONFIG: InjectionToken<NgxWebstorageConfiguration> = new InjectionToken<NgxWebstorageConfiguration>('ngx_webstorage_config');\n\nexport function appInit(index: StrategyIndex) {\n\tindex.indexStrategies();\n\treturn () => StrategyIndex.index;\n}\n\n@NgModule({})\nexport class NgxWebstorageModule {\n\n\tconstructor(index: StrategyIndex, @Optional() @Inject(LIB_CONFIG) config: NgxWebstorageConfiguration) {\n\t\tif (config) StorageKeyManager.consumeConfiguration(config);\n\t\telse console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n\t}\n\n\tstatic forRoot(config: NgxWebstorageConfiguration = {}): ModuleWithProviders<NgxWebstorageModule> {\n\t\treturn {\n\t\t\tngModule: NgxWebstorageModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: LIB_CONFIG,\n\t\t\t\t\tuseValue: config,\n\t\t\t\t},\n\t\t\t\tLocalStorageProvider,\n\t\t\t\tSessionStorageProvider,\n\t\t\t\t...Services,\n\t\t\t\t...Strategies,\n\t\t\t\t{\n\t\t\t\t\tprovide: APP_INITIALIZER,\n\t\t\t\t\tuseFactory: appInit,\n\t\t\t\t\tdeps: [StrategyIndex],\n\t\t\t\t\tmulti: true\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n\n}\n","/*\n * Public API Surface of ngx-webstorage\n */\n\nexport * from './lib/constants/strategy';\n\nexport * from './lib/helpers/compat';\n\nexport * from './lib/core/templates/syncStorage';\nexport * from './lib/core/templates/asyncStorage';\nexport * from './lib/core/strategyCache';\nexport {LOCAL_STORAGE, SESSION_STORAGE} from './lib/core/nativeStorage';\n\nexport {STORAGE_STRATEGIES} from './lib/strategies/index';\nexport * from './lib/strategies/localStorage';\nexport * from './lib/strategies/sessionStorage';\nexport * from './lib/strategies/inMemory';\nexport * from './stubs/storageStrategy.stub';\nexport * from './stubs/storage.stub';\n\nexport * from './lib/services/strategyIndex';\nexport {LocalStorageService} from './lib/services/localStorage';\nexport {SessionStorageService} from './lib/services/sessionStorage';\n\nexport * from './lib/core/interfaces/storageStrategy';\nexport * from './lib/decorators';\nexport * from './lib/module';\n\n\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {NgxWebstorageConfiguration as Éµm} from './lib/config';\nexport {WebStorage as Éµk} from './lib/core/interfaces/webStorage';\nexport {LocalStorageProvider as Éµb,SessionStorageProvider as Éµd,getLocalStorage as Éµa,getSessionStorage as Éµc} from './lib/core/nativeStorage';\nexport {Services as Éµn} from './lib/services/index';\nexport {LocalStorageServiceProvider as Éµg,buildService as Éµf} from './lib/services/localStorage';\nexport {SessionStorageServiceProvider as Éµi,buildService as Éµh} from './lib/services/sessionStorage';\nexport {STORAGE_STRATEGIES as Éµl} from './lib/strategies';\nexport {BaseSyncStorageStrategy as Éµj} from './lib/strategies/baseSyncStorage';\nexport {Strategies as Éµe} from './lib/strategies/index';"]},"metadata":{},"sourceType":"module"}