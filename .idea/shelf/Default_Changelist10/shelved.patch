Index: src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\nimport {UserService} from \"../../../services/user.service\";\nimport {MerchantService} from \"../../../services/merchant.service\";\nimport {MessageService} from \"../../../shared/services/message.service\";\nimport {NgxSpinnerService} from \"ngx-spinner\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from \"moment\";\nimport {DatePipe} from \"@angular/common\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Merchant} from \"../../../models/merchant\";\nimport {DcbCollectionHistorySummaryResponse} from \"../../../models/response/dcb-collection-history-summary/dcb.collection.history.summary.response\";\nimport {DcbCollectionHistorySummaryBaseResponse} from \"../../../models/response/dcb-collection-history-summary/dcb.collection.history.summary.base.response\";\nimport {DcbCollectionHistorySummary} from \"../../../models/request/dcb.collection.history.summary\";\nimport Swal from \"sweetalert2\";\nimport {Error} from \"../../../models/response/error\";\nimport {MerchantId} from \"../../../models/request/merchant.id\";\n\n@Component({\n  selector: 'app-dcb-collection-summary',\n  templateUrl: './dcb-collection-summary.component.html',\n  styleUrls: ['./dcb-collection-summary.component.scss']\n})\nexport class DcbCollectionSummaryComponent implements OnInit {\n  dcbCollectionHistorySummaryResponse: DcbCollectionHistorySummaryResponse;\n  currentDate: Date = new Date();\n  current: any;\n  past: any;\n  isOne: boolean = false;\n  l1: string;\n  l2: string;\n  l3: UserMerchant;\n  isUserMerchantChild: boolean = false;\n  startDate: any;\n  endDate: any;\n  isNoDataToDisplay: boolean = false;\n  page = 1;\n  showTable: boolean = true;\n  collectionSize: number;\n  pageSize: number;\n  isPermission: boolean = false;\n  dcbCollectionHistory: DcbCollectionHistorySummary;\n  dcbCollections: DcbCollectionHistorySummaryBaseResponse[];\n  numberOfPage:number;\n  error:Error;\n  localizedMessage:string;\n  message: string;\n\n\n  constructor(private userService: UserService, private cdr: ChangeDetectorRef,\n              private merchantService: MerchantService,\n              private messageService: MessageService,\n              private spinner: NgxSpinnerService,\n              public translate: TranslateService) {\n\n  }\n\n  ngOnInit(): void {\n    this.isOne = true;\n    this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\n    this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    const merchantIds = [];\n    merchantIds.push({\n      merchantId: merchant ? merchant.merchantId : null\n    });\n    this.onDcbCollectionHistorySummary(merchantIds, 1, this.past, this.current)\n\n  }\n\n  closeFix(event, datePicker) {\n    if (event.target.offsetParent == null)\n      datePicker.close();\n    else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\n      datePicker.close();\n  }\n\n  dateDiff(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    var timeDiff = Math.abs(end.getTime() - start.getTime());\n    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return diffDays;\n  }\n  dateDiffIsBig(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    if (start.getTime() > end.getTime()) {\n      return true\n    } else {\n      return false\n    }\n\n  }\n\n  dateObjToDate(vDate) {\n    const datepipe: DatePipe = new DatePipe('tr-EN')\n    var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\n    let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\n    return sDate;\n  }\n  convertIdList (merchantList : Merchant[]) {\n    let merchantIdList : MerchantId[] = [];\n    for (let i = 0 ; i < merchantList.length ; i++){\n      let merchantId = new MerchantId(merchantList[i].merchantId);\n      merchantIdList.push(merchantId);\n    }\n    return merchantIdList;\n  }\n\n\n  onDcbCollectionHistorySummary(merchantId: MerchantId[], activePage: number, startDate: string, endDate: string) {\n    this.userService\n    .dcbCollectionHistorySummary(new DcbCollectionHistorySummary(merchantId,startDate, endDate,activePage))\n    .subscribe(\n      (res) => {\n        if (res != null && res.collections != null) {\n          this.isPermission = true;\n          this.isUserMerchantChild = true;\n          this.dcbCollectionHistorySummaryResponse = res;\n          this.dcbCollections = this.dcbCollectionHistorySummaryResponse.collections;\n\n          if (this.dcbCollections == null) {\n            this.isPermission = false;\n          }\n          if (this.dcbCollections.length < 1) {\n            this.showTable = false;\n            this.isNoDataToDisplay = true;\n          }\n          if (this.dcbCollections.length >= 1) {\n            this.showTable = true;\n            this.isNoDataToDisplay = false;\n          }\n          this.cdr.detectChanges();\n          this.numberOfPage = this.dcbCollectionHistorySummaryResponse.numberOfPage;\n          this.collectionSize = res.totalCount;\n          this.pageSize = res.pageSize;\n        } else {\n          this.isPermission = false;\n          this.isUserMerchantChild = true;\n          this.showTable = false;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n            this.message = 'error.access.denied.message';\n            this.cdr.detectChanges();\n          } else if (err.status === 500) {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          } else {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          }\n        }\n      }\n    );\n  }\n\n  isHistoryValidation(startDate, endDate) {\n    if (!this.selectedMerchant) {\n      this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (startDate == null || endDate == null) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiffIsBig(startDate, endDate)) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiff(startDate, endDate) > 7) {\n      this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n      return true;\n    }\n\n\n  }\n  downloadFile(data: Blob) {\n    var link = document.createElement('a');\n    link.href = window.URL.createObjectURL(data);\n    var fileName = \"Export.xlsx\";\n    link.download = fileName;\n    link.click();\n  }\n\n  onDcbCollectionExport(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n    this.dcbCollectionHistory = new DcbCollectionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      selectedPage)\n    this.spinner.show(\"spinner1\");\n    this.userService\n    .dcbCollectionHistorySummaryExport(this.dcbCollectionHistory).subscribe(\n      (response) => {\n        this.spinner.hide(\"spinner1\");\n        this.downloadFile(response);\n      },\n      async (err) => {\n        var result = JSON.parse(await err.error.text());\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: result.localizedMessage\n        })\n      });\n  }\n\n\n  onDcbCollectionHistorySummaryLast(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n\n    this.page = selectedPage ?? 1;\n\n    this.dcbCollectionHistory = new DcbCollectionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.page,\n    )\n\n    this.userService\n    .dcbCollectionHistorySummary(this.dcbCollectionHistory).subscribe(\n      (res) => {\n        if(res != null && res.collections != null) {\n          this.dcbCollectionHistorySummaryResponse = res;\n          this.dcbCollections = this.dcbCollectionHistorySummaryResponse.collections;\n\n          if (this.dcbCollections == null) {\n            this.isPermission = false;\n          }\n          if (this.dcbCollections.length < 1) {\n            this.showTable = false;\n            this.isNoDataToDisplay = true;\n          }\n          if (this.dcbCollections.length >= 1) {\n            this.showTable = true;\n            this.isNoDataToDisplay = false;\n          }\n          this.cdr.detectChanges();\n          this.numberOfPage = this.dcbCollectionHistorySummaryResponse.numberOfPage;\n          this.collectionSize = res.totalCount;\n          this.pageSize = res.pageSize;\n        }\n      },\n      async(err) => {\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: err.error.localizedMessage\n        })\n        this.showTable = false;\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n            this.message = 'error.access.denied.message';\n            this.cdr.detectChanges();\n          } else if (err.status === 500) {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          } else {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          }\n        }\n      });\n  }\n\n  loadPage(page: number) {\n    this.onDcbCollectionHistorySummaryLast(this.startDate, this.endDate, page)\n  }\n\n  firmError = false;\n  isFirmModalOpen = false;\n\n  openFirmModal(open: boolean): void {\n    if (open) {\n      this.merchantFilters = null;\n      this.selectedMasterMerchant = null;\n      this.ll1Merchants = null;\n      this.selectedLl1Merchant = null;\n      this.ll2Merchants = null;\n      this.selectedLl2Merchant = null;\n      this.ll3Merchants = null;\n      this.selectedLl3Merchant = null;\n      this.getMerchantFilter();\n    } else {\n      this.selectedMerchant = [];\n      if ((this.merchantFilters == null || this.merchantFilters.length < 1)\n        && this.selectedMasterMerchant) {\n        this.selectedMerchant.push(this.selectedMasterMerchant);\n      }\n\n      if (this.merchantFilters && this.merchantFilters.length > 0) {\n        if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\n          this.selectedMerchant.push(this.merchantFilters[0]);\n        }\n        if (this.selectedMasterMerchant) {\n          this.selectedMerchant.push(this.selectedMasterMerchant);\n        }\n      }\n\n      if (this.ll1Merchants && this.ll1Merchants.length > 0) {\n        if (this.selectedLl1Merchant) {\n          this.selectedMerchant.push(this.selectedLl1Merchant);\n        }\n      }\n\n      if (this.ll2Merchants && this.ll2Merchants.length > 0) {\n        if (this.selectedLl2Merchant) {\n          this.selectedMerchant.push(this.selectedLl2Merchant);\n        }\n      }\n\n      if (this.ll3Merchants && this.ll3Merchants.length > 0) {\n        if (this.selectedLl3Merchant) {\n          this.selectedMerchant.push(this.selectedLl3Merchant);\n        }\n      }\n      this.selectedMerchants = this.selectedMerchant.reverse()\n      this.lastSelectedMerchant = this.selectedMerchants[0]\n      if (!this.selectedMerchant) {\n        this.firmError = true;\n        this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n        return;\n      }\n      else {\n        this.messageService.remove();\n      }\n    }\n    this.isFirmModalOpen = open;\n  }\n\n  selectedMerchant: Merchant[];\n  merchantFilters: Merchant[];\n  selectedMasterMerchant: Merchant;\n  ll1Merchants: Merchant[];\n  selectedLl1Merchant: Merchant;\n  ll2Merchants: Merchant[];\n  selectedLl2Merchant: Merchant;\n  ll3Merchants: Merchant[];\n  selectedLl3Merchant: Merchant;\n  selectedMerchants: Merchant[];\n  lastSelectedMerchant: Merchant;\n\n  getMerchantFilter() {\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    if (merchant) {\n      this.merchantFilters = [];\n      this.merchantFilters.push(merchant);\n    }\n    /*this.merchantService\n    .merchantFilter()\n    .subscribe(\n      (res) => {\n        if (res.body && res.body.length > 0) {\n          this.merchantFilters = res.body;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );*/\n  }\n\n  onSelectedMasterMerchantChange() {\n    this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\n  }\n\n  getOnL1MerchantChange() {\n    this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\n  }\n\n  getOnL2MerchantChange() {\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\n  }\n\n  getOnL3MerchantChange() {\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\n  }\n\n  getChildMerchants(merchantId, level) {\n    this.merchantService\n    .childMerchantList(merchantId)\n    .subscribe(\n      (res) => {\n        this[level + 'Merchants'] = res.body;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );\n  }\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts b/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts
--- a/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts	(revision e2be0d8ba65c1894be94ea74460c580d6a71e5cc)
+++ b/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts	(date 1642411959604)
@@ -111,30 +111,14 @@
 
   onDcbCollectionHistorySummary(merchantId: MerchantId[], activePage: number, startDate: string, endDate: string) {
     this.userService
-    .dcbCollectionHistorySummary(new DcbCollectionHistorySummary(merchantId,startDate, endDate,activePage))
+    .dcbCollectionHistorySummary(new DcbCollectionHistorySummary(merchantId, startDate, endDate, activePage))
     .subscribe(
       (res) => {
         if (res != null && res.collections != null) {
           this.isPermission = true;
           this.isUserMerchantChild = true;
-          this.dcbCollectionHistorySummaryResponse = res;
-          this.dcbCollections = this.dcbCollectionHistorySummaryResponse.collections;
-
-          if (this.dcbCollections == null) {
-            this.isPermission = false;
-          }
-          if (this.dcbCollections.length < 1) {
-            this.showTable = false;
-            this.isNoDataToDisplay = true;
-          }
-          if (this.dcbCollections.length >= 1) {
-            this.showTable = true;
-            this.isNoDataToDisplay = false;
-          }
+          this.showTable = false;
           this.cdr.detectChanges();
-          this.numberOfPage = this.dcbCollectionHistorySummaryResponse.numberOfPage;
-          this.collectionSize = res.totalCount;
-          this.pageSize = res.pageSize;
         } else {
           this.isPermission = false;
           this.isUserMerchantChild = true;
Index: src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, QueryList, ViewChild, ViewChildren, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport * as moment from \"moment\";\r\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\r\nimport {Merchant} from \"../../../models/merchant\";\r\nimport {MerchantService} from \"../../../services/merchant.service\";\r\nimport {MessageService} from \"../../../shared/services/message.service\";\r\nimport {NgxSpinnerService} from \"ngx-spinner\";\r\nimport {DatePipe} from '@angular/common';\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport {DcbCollectionHistory} from \"../../../models/request/dcb.collection.history\";\r\nimport {DcbCollectionHistoryResponse} from \"../../../models/response/user-dcb-collection-history/dcb.collection.history.response\";\r\nimport {DcbCollectionHistoryOrderResponse} from \"../../../models/response/user-dcb-collection-history/dcb.collection.history.order.response\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Error} from \"../../../models/response/error\";\r\nimport {MerchantId} from \"../../../models/request/merchant.id\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-dcb-collection',\r\n    templateUrl: './dcb-collection.component.html',\r\n    styleUrls: ['./dcb-collection.component.scss']\r\n})\r\nexport class DcbCollectionComponent implements OnInit {\r\n    orderNo: string;\r\n    selectedFundingSourceType: string;\r\n    selectedOrderType: string;\r\n    dcbCollectionHistoryResponse: DcbCollectionHistoryResponse;\r\n    currentDate: Date = new Date();\r\n    current: any;\r\n    past: any;\r\n    isOpen: boolean = false;\r\n    detailOrderNo: number;\r\n    detailOrderDate: string;\r\n    detailOrderType: string;\r\n    orderType: string;\r\n    bankResponseCodeDesc: string;\r\n    isOne: boolean = false;\r\n    l1: string;\r\n    l2: string;\r\n    l3: UserMerchant;\r\n    isUserMerchantChild: boolean = false;\r\n    startDate: any;\r\n    endDate: any;\r\n    isNoDataToDisplay: boolean = false;\r\n    pfFilter: number;\r\n    page = 1;\r\n    showTable: boolean = true;\r\n    collectionSize: number;\r\n    isPermission: boolean = false;\r\n    dcbCollectionHistory: DcbCollectionHistory;\r\n    dcbOrders:DcbCollectionHistoryOrderResponse[];\r\n    detailDcbMerchantName:string;\r\n    detailDcbSubMerchantName:string;\r\n    detailDcbServiceName:string;\r\n    detailMerchantPaymentDate: string;\r\n    detailTransactionAmount:number;\r\n    detailCommissionAmount:number;\r\n    detailCommissionRate:number;\r\n    detailTransactionId:string;\r\n    detailFundingSourceType:string;\r\n    detailPaymentType:string;\r\n    detailPaymentStatus:string;\r\n    detailParam1:string;\r\n    detailParam2:string;\r\n    detailParam3:string;\r\n    numberOfPage:number;\r\n    pageSize: number;\r\n    error:Error;\r\n    localizedMessage:string;\r\n    message: string;\r\n\r\n\r\n    constructor(private userService: UserService, private cdr: ChangeDetectorRef,\r\n        private merchantService: MerchantService,\r\n        private messageService: MessageService,\r\n        private spinner: NgxSpinnerService,\r\n                public translate: TranslateService) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isOne = true;\r\n        this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\r\n        this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      const merchantIds = [];\r\n      merchantIds.push({\r\n        merchantId: merchant ? merchant.merchantId : null\r\n      });\r\n        this.onDcbCollectionHistory(merchantIds,  this.past, this.current, null, null, null,1)\r\n    }\r\n\r\n    closeFix(event, datePicker) {\r\n        if (event.target.offsetParent == null)\r\n            datePicker.close();\r\n        else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\r\n            datePicker.close();\r\n    }\r\n\r\n    dateDiff(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        var timeDiff = Math.abs(end.getTime() - start.getTime());\r\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n        return diffDays;\r\n    }\r\n    dateDiffIsBig(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        if (start.getTime() > end.getTime()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    dateObjToDate(vDate) {\r\n        const datepipe: DatePipe = new DatePipe('tr-EN')\r\n        var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\r\n        let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\r\n        return sDate;\r\n    }\r\n\r\n    convertIdList (merchantList : Merchant[]) {\r\n      let merchantIdList : MerchantId[] = [];\r\n      for (let i = 0 ; i < merchantList.length ; i++){\r\n        let merchantId = new MerchantId(merchantList[i].merchantId);\r\n        merchantIdList.push(merchantId);\r\n        }\r\n      return merchantIdList;\r\n    }\r\n\r\n\r\n  fundingSourceType = [\r\n        {id: 1, name: 'Mobil Ödeme', orginalName: 'MOBIL ODEME'},\r\n        {id: 2, name: 'Hediye Para', orginalName: 'HEDIYE PARA'},\r\n  ];\r\n\r\n    orderTypes = [\r\n        {id: 1, name: 'Satış', orginalName: 'SATIS'},\r\n        {id: 2, name: 'İade', orginalName: 'IADE'},\r\n    ];\r\n\r\n  onDcbCollectionHistory(merchantId: MerchantId[], startDate: string, endDate: string, orderId: string, fundingSourceType:string, orderType: string, activePage:number) {\r\n        this.userService\r\n            .dcbCollectionHistory(new DcbCollectionHistory(merchantId, startDate, endDate, orderId, fundingSourceType,orderType,activePage))\r\n            .subscribe(\r\n                (res) => {\r\n                  if (res != null && res.orders != null) {\r\n                    this.dcbCollectionHistoryResponse = res;\r\n                    this.dcbOrders = this.dcbCollectionHistoryResponse.orders;\r\n                    this.isPermission = true;\r\n                    this.isUserMerchantChild = true;\r\n\r\n                    if (this.dcbOrders == null) {\r\n                      this.isPermission = false;\r\n                    }\r\n                    if (this.dcbOrders.length < 1) {\r\n                      this.showTable = false;\r\n                      this.isNoDataToDisplay = true;\r\n                    }\r\n                    if (this.dcbOrders.length >= 1) {\r\n                      this.showTable = true;\r\n                      this.isNoDataToDisplay = false;\r\n                    }\r\n                    this.cdr.detectChanges();\r\n                    this.numberOfPage = this.dcbCollectionHistoryResponse.numberOfPage;\r\n                    this.collectionSize = res.totalCount;\r\n                    this.pageSize = res.pageSize;\r\n                  } else {\r\n                    this.isPermission = false;\r\n                    this.isUserMerchantChild = true;\r\n                    this.showTable = false;\r\n                    this.cdr.detectChanges();\r\n                  }\r\n                },\r\n                (err) => {\r\n                  if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 403) {\r\n                      this.isPermission = false;\r\n                      this.message = 'error.access.denied.message';\r\n                      this.cdr.detectChanges();\r\n                    } else if (err.status === 500) {\r\n                      this.isPermission = false;\r\n                      this.message = err.error.localizedMessage;\r\n                      this.cdr.detectChanges();\r\n                    } else {\r\n                      this.isPermission = false;\r\n                      this.message = err.error.localizedMessage;\r\n                      this.cdr.detectChanges();\r\n                    }\r\n                  }\r\n                });\r\n  }\r\n\r\n    isHistoryValidation(startDate, endDate, selectedPage: number) {\r\n        if (!this.selectedMerchant) {\r\n            this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (startDate == null || endDate == null) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiffIsBig(startDate, endDate)) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiff(startDate, endDate) > 7) {\r\n            this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n            return true;\r\n        }\r\n\r\n\r\n    }\r\n    downloadFile(data: Blob) {\r\n        var link = document.createElement('a');\r\n        link.href = window.URL.createObjectURL(data);\r\n        var fileName = \"Export.xlsx\";\r\n        link.download = fileName;\r\n        link.click();\r\n    }\r\n\r\n    onDcbCollectionExport(startDate, endDate, selectedPage: number) {\r\n        if (!this.isHistoryValidation(startDate, endDate, selectedPage)) {\r\n            return\r\n        }\r\n        this.dcbCollectionHistory = new DcbCollectionHistory(\r\n          this.convertIdList(this.selectedMerchant),\r\n          this.dateObjToDate(startDate),\r\n          this.dateObjToDate(endDate),\r\n          this.orderNo,\r\n          this.selectedFundingSourceType,\r\n          this.selectedOrderType,\r\n          selectedPage)\r\n        this.spinner.show(\"spinner1\");\r\n        this.userService\r\n            .dcbCollectionHistoryExport(this.dcbCollectionHistory).subscribe(\r\n                (response) => {\r\n                    this.spinner.hide(\"spinner1\");\r\n                    this.downloadFile(response);\r\n                },\r\n          async (err) => {\r\n            var result = JSON.parse(await err.error.text());\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'İşleminiz yapılamadı! ',\r\n              confirmButtonText: 'Tamam',\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: result.localizedMessage\r\n            })\r\n            if (err instanceof HttpErrorResponse) {\r\n              if (err.status === 403) {\r\n                this.isPermission = false;\r\n                this.message = 'error.access.denied.message';\r\n                this.cdr.detectChanges();\r\n              } else if (err.status === 500) {\r\n                this.isPermission = false;\r\n                this.message = err.error.localizedMessage;\r\n                this.cdr.detectChanges();\r\n              } else {\r\n                this.isPermission = false;\r\n                this.message = err.error.localizedMessage;\r\n                this.cdr.detectChanges();\r\n              }\r\n            }\r\n          });\r\n    }\r\n\r\n\r\n    onDcbCollectionHistoryLast(startDate, endDate, selectedPage: number) {\r\n        if (!this.isHistoryValidation(startDate, endDate, selectedPage)) {\r\n            return\r\n        }\r\n\r\n        this.page = selectedPage ?? 1;\r\n\r\n        this.dcbCollectionHistory = new DcbCollectionHistory(\r\n            this.convertIdList(this.selectedMerchant),\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderNo,\r\n            this.selectedFundingSourceType,\r\n          this.selectedOrderType,\r\n          this.page,\r\n        )\r\n\r\n        this.userService\r\n            .dcbCollectionHistory(this.dcbCollectionHistory).subscribe(\r\n                (res) => {\r\n                  if(res != null && res.orders != null) {\r\n                    this.dcbCollectionHistoryResponse = res;\r\n                    console.log(this.dcbCollectionHistoryResponse)\r\n                    this.dcbOrders = this.dcbCollectionHistoryResponse.orders;\r\n\r\n                    if (this.dcbOrders == null) {\r\n                      this.isPermission = false;\r\n                    }\r\n                    if (this.dcbOrders.length < 1) {\r\n                      this.showTable = false;\r\n                      this.isNoDataToDisplay = true;\r\n                    }\r\n                    if (this.dcbOrders.length >= 1) {\r\n                      this.showTable = true;\r\n                      this.isNoDataToDisplay = false;\r\n                    }\r\n                    this.cdr.detectChanges();\r\n                    this.numberOfPage = this.dcbCollectionHistoryResponse.numberOfPage;\r\n                    this.collectionSize = res.totalCount;\r\n                    this.pageSize = res.pageSize;\r\n                  }\r\n                },\r\n          async (err) => {\r\n                  Swal.fire({\r\n              icon: 'error',\r\n              title: 'İşleminiz yapılamadı! ',\r\n              confirmButtonText: 'Tamam',\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: err.error.localizedMessage\r\n            })\r\n             this.showTable = false;\r\n            if (err instanceof HttpErrorResponse) {\r\n              if (err.status === 403) {\r\n                this.isPermission = false;\r\n                this.message = 'error.access.denied.message';\r\n                this.cdr.detectChanges();\r\n              } else if (err.status === 500) {\r\n                this.isPermission = false;\r\n                this.message = err.error.localizedMessage;\r\n                this.cdr.detectChanges();\r\n              } else {\r\n                this.isPermission = false;\r\n                this.message = err.error.localizedMessage;\r\n                this.cdr.detectChanges();\r\n              }\r\n            }\r\n                });\r\n    }\r\n\r\n\r\n    loadPage(page: number) {\r\n        this.onDcbCollectionHistoryLast(this.startDate, this.endDate, page)\r\n    }\r\n\r\n\r\n    openTransactionDetailModal(open: boolean): void {\r\n        this.isOpen = open;\r\n    }\r\n\r\n    transactionDetail(detail: DcbCollectionHistoryOrderResponse) {\r\n        this.detailDcbMerchantName = detail.dcbMerchantName\r\n        this.detailDcbSubMerchantName = detail.dcbSubMerchantName\r\n        this.detailDcbServiceName = detail.dcbServiceName\r\n        this.detailOrderNo = detail.orderId;\r\n        this.detailTransactionId = detail.transactionId\r\n        if (detail.orderType == \"SATIS\") {\r\n        this.detailOrderType = this.translate.instant('dcb.sale')\r\n        }\r\n       if (detail.orderType == 'IADE') {\r\n        this.detailOrderType = this.translate.instant('dcb.refund')\r\n       }\r\n\r\n       if(detail.fundingSourceType =='MOBIL ODEME'){\r\n         this.detailFundingSourceType = this.translate.instant('dcb.mobile.payment')\r\n       }\r\n\r\n      if(detail.fundingSourceType =='HEDIYE PARA'){\r\n        this.detailFundingSourceType = this.translate.instant('dcb.gift.money')\r\n      }\r\n      this.detailPaymentType = detail.paymentType\r\n      this.detailPaymentStatus = detail.paymentStatus\r\n      this.detailTransactionAmount = detail.transactionAmount\r\n      this.detailCommissionRate = detail.commissionRate\r\n      this.detailCommissionAmount = detail.commissionAmount\r\n\r\n      this.detailOrderDate = detail.orderDate\r\n      this.detailMerchantPaymentDate = detail.merchantPaymentDate\r\n      this.detailParam1 = detail.param1;\r\n      this.detailParam2 = detail.param2;\r\n      this.detailParam3 = detail.param3;\r\n\r\n    }\r\n    firmError = false;\r\n    isFirmModalOpen = false;\r\n\r\n    openFirmModal(open: boolean): void {\r\n        if (open) {\r\n            this.merchantFilters = null;\r\n            this.selectedMasterMerchant = null;\r\n            this.ll1Merchants = null;\r\n            this.selectedLl1Merchant = null;\r\n            this.ll2Merchants = null;\r\n            this.selectedLl2Merchant = null;\r\n            this.ll3Merchants = null;\r\n            this.selectedLl3Merchant = null;\r\n            this.getMerchantFilter();\r\n        } else {\r\n            this.selectedMerchant = [];\r\n            if ((this.merchantFilters == null || this.merchantFilters.length < 1)\r\n                && this.selectedMasterMerchant) {\r\n                this.selectedMerchant.push(this.selectedMasterMerchant);\r\n            }\r\n\r\n            if (this.merchantFilters && this.merchantFilters.length > 0) {\r\n                if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\r\n                    this.selectedMerchant.push(this.merchantFilters[0]);\r\n                }\r\n                if (this.selectedMasterMerchant) {\r\n                    this.selectedMerchant.push(this.selectedMasterMerchant);\r\n                }\r\n            }\r\n            if (this.ll1Merchants && this.ll1Merchants.length > 0) {\r\n                if (this.selectedLl1Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl1Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll2Merchants && this.ll2Merchants.length > 0) {\r\n                if (this.selectedLl2Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl2Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll3Merchants && this.ll3Merchants.length > 0) {\r\n                 if (this.selectedLl3Merchant) {\r\n                   this.selectedMerchant.push(this.selectedLl3Merchant);\r\n\r\n            }\r\n          }\r\n            this.selectedMerchants = this.selectedMerchant.reverse()\r\n            this.lastSelectedMerchant = this.selectedMerchants[0]\r\n            if (!this.selectedMerchant) {\r\n                this.firmError = true;\r\n                this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n                return;\r\n            }\r\n            else {\r\n                this.messageService.remove();\r\n            }\r\n        }\r\n        this.isFirmModalOpen = open;\r\n    }\r\n\r\n    selectedMerchant: Merchant[];\r\n    merchantFilters: Merchant[];\r\n    selectedMasterMerchant: Merchant;\r\n    ll1Merchants: Merchant[];\r\n    selectedLl1Merchant: Merchant;\r\n    ll2Merchants: Merchant[];\r\n    selectedLl2Merchant: Merchant;\r\n    ll3Merchants: Merchant[];\r\n    selectedLl3Merchant: Merchant;\r\n    selectedMerchants: Merchant[];\r\n    lastSelectedMerchant: Merchant;\r\n\r\n    getMerchantFilter() {\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      if (merchant) {\r\n        this.merchantFilters = [];\r\n        this.merchantFilters.push(merchant);\r\n      }\r\n      /*  this.merchantService\r\n            .merchantFilter()\r\n            .subscribe(\r\n                (res) => {\r\n                    if (res.body && res.body.length > 0) {\r\n                        this.merchantFilters = res.body;\r\n                        this.cdr.detectChanges();\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );*/\r\n    }\r\n\r\n    onSelectedMasterMerchantChange() {\r\n        this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\r\n    }\r\n\r\n    getOnL1MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\r\n    }\r\n\r\n    getOnL2MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\r\n    }\r\n\r\n    getOnL3MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\r\n   }\r\n\r\n    getChildMerchants(merchantId, level) {\r\n        this.merchantService\r\n            .childMerchantList(merchantId)\r\n            .subscribe(\r\n                (res) => {\r\n                    this[level + 'Merchants'] = res.body;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts b/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts
--- a/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts	(revision e2be0d8ba65c1894be94ea74460c580d6a71e5cc)
+++ b/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts	(date 1642411959608)
@@ -144,32 +144,16 @@
         {id: 2, name: 'İade', orginalName: 'IADE'},
     ];
 
-  onDcbCollectionHistory(merchantId: MerchantId[], startDate: string, endDate: string, orderId: string, fundingSourceType:string, orderType: string, activePage:number) {
+  onDcbCollectionHistory(merchantId: MerchantId[], startDate: string, endDate: string, orderId: string, fundingSourceType: string, orderType: string, activePage: number) {
         this.userService
-            .dcbCollectionHistory(new DcbCollectionHistory(merchantId, startDate, endDate, orderId, fundingSourceType,orderType,activePage))
+            .dcbCollectionHistory(new DcbCollectionHistory(merchantId, startDate, endDate, orderId, fundingSourceType, orderType, activePage))
             .subscribe(
                 (res) => {
                   if (res != null && res.orders != null) {
-                    this.dcbCollectionHistoryResponse = res;
-                    this.dcbOrders = this.dcbCollectionHistoryResponse.orders;
                     this.isPermission = true;
                     this.isUserMerchantChild = true;
-
-                    if (this.dcbOrders == null) {
-                      this.isPermission = false;
-                    }
-                    if (this.dcbOrders.length < 1) {
-                      this.showTable = false;
-                      this.isNoDataToDisplay = true;
-                    }
-                    if (this.dcbOrders.length >= 1) {
-                      this.showTable = true;
-                      this.isNoDataToDisplay = false;
-                    }
+                    this.showTable = false;
                     this.cdr.detectChanges();
-                    this.numberOfPage = this.dcbCollectionHistoryResponse.numberOfPage;
-                    this.collectionSize = res.totalCount;
-                    this.pageSize = res.pageSize;
                   } else {
                     this.isPermission = false;
                     this.isUserMerchantChild = true;
Index: src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\nimport {UserService} from \"../../../services/user.service\";\nimport {MerchantService} from \"../../../services/merchant.service\";\nimport {MessageService} from \"../../../shared/services/message.service\";\nimport {NgxSpinnerService} from \"ngx-spinner\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from \"moment\";\nimport {DatePipe} from \"@angular/common\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Merchant} from \"../../../models/merchant\";\nimport {DcbTransactionHistorySummaryResponse} from \"../../../models/response/dcb-transaction-history-summary/dcb.transaction.history.summary.response\";\nimport {DcbTransactionHistorySummaryBaseResponse} from \"../../../models/response/dcb-transaction-history-summary/dcb.transaction.history.summary.base.response\";\nimport {DcbTransactionHistorySummary} from \"../../../models/request/dcb.transaction.history.summary\";\nimport Swal from \"sweetalert2\";\nimport {Error} from \"../../../models/response/error\";\nimport {MerchantId} from \"../../../models/request/merchant.id\";\n\n@Component({\n  selector: 'app-dcb-transaction-summary',\n  templateUrl: './dcb-transaction-summary.component.html',\n  styleUrls: ['./dcb-transaction-summary.component.scss']\n})\nexport class DcbTransactionSummaryComponent implements OnInit {\n  orderNo: string;\n  selectedOrderType: string;\n  dcbTransactionHistorySummaryResponse: DcbTransactionHistorySummaryResponse;\n  currentDate: Date = new Date();\n  current: any;\n  past: any;\n  isOne: boolean = false;\n  l1: string;\n  l2: string;\n  l3: UserMerchant;\n  isUserMerchantChild: boolean = false;\n  startDate: any;\n  endDate: any;\n  isNoDataToDisplay: boolean = false;\n  pfFilter: number[] = [];\n  page = 1;\n  showTable: boolean = true;\n  isPermission: boolean = false;\n  dcbTransactionHistory: DcbTransactionHistorySummary;\n  dcbTransactions:DcbTransactionHistorySummaryBaseResponse[];\n  numberOfPage:number;\n  collectionSize: number;\n  pageSize: number;\n  error:Error;\n  localizedMessage:string;\n  message: string;\n\n\n  constructor(private userService: UserService, private cdr: ChangeDetectorRef,\n              private merchantService: MerchantService,\n              private messageService: MessageService,\n              private spinner: NgxSpinnerService,\n              public translate: TranslateService) {\n\n  }\n\n  ngOnInit(): void {\n    this.isOne = true;\n    this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\n    this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    const merchantIds = [];\n    merchantIds.push({\n      merchantId: merchant ? merchant.merchantId : null\n    });\n      this.onDcbTransactionHistorySummary(merchantIds, 1, this.past, this.current, this.selectedOrderType)\n\n  }\n\n  closeFix(event, datePicker) {\n    if (event.target.offsetParent == null)\n      datePicker.close();\n    else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\n      datePicker.close();\n  }\n\n  dateDiff(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    var timeDiff = Math.abs(end.getTime() - start.getTime());\n    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return diffDays;\n  }\n  dateDiffIsBig(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    if (start.getTime() > end.getTime()) {\n      return true\n    } else {\n      return false\n    }\n\n  }\n\n  dateObjToDate(vDate) {\n    const datepipe: DatePipe = new DatePipe('tr-EN')\n    var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\n    let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\n    return sDate;\n  }\n\n  convertIdList (merchantList : Merchant[]) {\n    let merchantIdList : MerchantId[] = [];\n    for (let i = 0 ; i < merchantList.length ; i++){\n      let merchantId = new MerchantId(merchantList[i].merchantId);\n      merchantIdList.push(merchantId);\n    }\n    return merchantIdList;\n  }\n\n    orderTypesItem = [\n        {id: 1, name: 'Satış', orginalName: 'SATIS'},\n        {id: 2, name: 'İade', orginalName: 'IADE'}\n\n    ];\n\n  onDcbTransactionHistorySummary(merchantId: MerchantId[], activePage: number, startDate: string, endDate: string, orderType: string) {\n    this.userService\n    .dcbTransactionHistorySummary(new DcbTransactionHistorySummary(merchantId,startDate, endDate,orderType,activePage))\n    .subscribe(\n      (res) => {\n       /* this.isPermission = true;\n        this.isUserMerchantChild = true;\n        this.showTable = false;\n        this.cdr.detectChanges();*/\n        if (res != null && res.orders != null) {\n          this.isPermission = true;\n          this.isUserMerchantChild = true;\n          this.dcbTransactionHistorySummaryResponse = res;\n          this.dcbTransactions = this.dcbTransactionHistorySummaryResponse.orders;\n\n          if (this.dcbTransactions == null) {\n            this.isPermission = false;\n          }\n          if (this.dcbTransactions.length < 1) {\n            this.showTable = false;\n            this.isNoDataToDisplay = true;\n          }\n          if (this.dcbTransactions.length >= 1) {\n            this.showTable = true;\n            this.isNoDataToDisplay = false;\n          }\n          this.cdr.detectChanges();\n          this.numberOfPage = this.dcbTransactionHistorySummaryResponse.numberOfPage;\n          this.collectionSize = res.totalCount;\n          this.pageSize = res.pageSize;\n        } else {\n          this.isPermission = false;\n          this.isUserMerchantChild = true;\n          this.showTable = false;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n            this.message = 'error.access.denied.message';\n            this.cdr.detectChanges();\n          } else if (err.status === 500) {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          } else {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          }\n        }\n      }\n    );\n  }\n\n  isHistoryValidation(startDate, endDate) {\n    if (!this.selectedMerchant) {\n      this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (startDate == null || endDate == null) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiffIsBig(startDate, endDate)) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiff(startDate, endDate) > 7) {\n      this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n      return true;\n    }\n\n\n  }\n  downloadFile(data: Blob) {\n    var link = document.createElement('a');\n    link.href = window.URL.createObjectURL(data);\n    var fileName = \"Export.xlsx\";\n    link.download = fileName;\n    link.click();\n  }\n\n  onDcbTransactionExport(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n    this.dcbTransactionHistory = new DcbTransactionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.selectedOrderType,\n      selectedPage)\n    this.spinner.show(\"spinner1\");\n    this.userService\n    .dcbTransactionHistorySummaryExport(this.dcbTransactionHistory).subscribe(\n      (response) => {\n        this.spinner.hide(\"spinner1\");\n        this.downloadFile(response);\n      },\n      async (err) => {\n        var result = JSON.parse(await err.error.text());\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: result.localizedMessage\n        })\n      });\n  }\n\n\n  onDcbTransactionHistorySummaryLast(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n\n    this.page = selectedPage ?? 1;\n\n    this.dcbTransactionHistory = new DcbTransactionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.selectedOrderType,\n      this.page,\n    )\n\n    this.userService\n    .dcbTransactionHistorySummary(this.dcbTransactionHistory).subscribe(\n      (res) => {\n        if(res != null && res.orders != null) {\n          this.dcbTransactionHistorySummaryResponse = res;\n          this.dcbTransactions = this.dcbTransactionHistorySummaryResponse.orders;\n\n          if (this.dcbTransactions == null) {\n            this.isPermission = false;\n          }\n          if (this.dcbTransactions.length < 1) {\n            this.showTable = false;\n            this.isNoDataToDisplay = true;\n          }\n          if (this.dcbTransactions.length >= 1) {\n            this.showTable = true;\n            this.isNoDataToDisplay = false;\n          }\n          this.cdr.detectChanges();\n          this.numberOfPage = this.dcbTransactionHistorySummaryResponse.numberOfPage;\n          this.collectionSize = res.totalCount;\n          this.pageSize = res.pageSize;\n        }\n      },\n      (err) => {\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: err.error.localizedMessage\n        })\n        this.showTable = false;\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n            this.message = 'error.access.denied.message';\n            this.cdr.detectChanges();\n          } else if (err.status === 500) {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          } else {\n            this.isPermission = false;\n            this.message = err.error.localizedMessage;\n            this.cdr.detectChanges();\n          }\n        }\n      }\n    );\n  }\n\n  loadPage(page: number) {\n    this.onDcbTransactionHistorySummaryLast(this.startDate, this.endDate, page)\n  }\n\n  firmError = false;\n  isFirmModalOpen = false;\n\n  openFirmModal(open: boolean): void {\n    if (open) {\n      this.merchantFilters = null;\n      this.selectedMasterMerchant = null;\n      this.ll1Merchants = null;\n      this.selectedLl1Merchant = null;\n      this.ll2Merchants = null;\n      this.selectedLl2Merchant = null;\n      this.ll3Merchants = null;\n      this.selectedLl3Merchant = null;\n      this.getMerchantFilter();\n    } else {\n      this.selectedMerchant = [];\n      if ((this.merchantFilters == null || this.merchantFilters.length < 1)\n        && this.selectedMasterMerchant) {\n        this.selectedMerchant.push(this.selectedMasterMerchant);\n      }\n\n      if (this.merchantFilters && this.merchantFilters.length > 0) {\n        if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\n          this.selectedMerchant.push(this.merchantFilters[0]);\n        }\n        if (this.selectedMasterMerchant) {\n          this.selectedMerchant.push(this.selectedMasterMerchant);\n        }\n      }\n\n      if (this.ll1Merchants && this.ll1Merchants.length > 0) {\n        if (this.selectedLl1Merchant) {\n          this.selectedMerchant.push(this.selectedLl1Merchant);\n        }\n      }\n\n      if (this.ll2Merchants && this.ll2Merchants.length > 0) {\n        if (this.selectedLl2Merchant) {\n          this.selectedMerchant.push(this.selectedLl2Merchant);\n        }\n      }\n      if (this.ll3Merchants && this.ll3Merchants.length > 0) {\n        if (this.selectedLl3Merchant) {\n          this.selectedMerchant.push(this.selectedLl3Merchant);\n        }\n      }\n      this.selectedMerchants = this.selectedMerchant.reverse()\n      this.lastSelectedMerchant = this.selectedMerchants[0]\n      if (!this.selectedMerchant) {\n        this.firmError = true;\n        this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n        return;\n      }\n      else {\n        this.messageService.remove();\n      }\n    }\n    this.isFirmModalOpen = open;\n  }\n\n  selectedMerchant: Merchant[];\n  merchantFilters: Merchant[];\n  selectedMasterMerchant: Merchant;\n  ll1Merchants: Merchant[];\n  selectedLl1Merchant: Merchant;\n  ll2Merchants: Merchant[];\n  selectedLl2Merchant: Merchant;\n  ll3Merchants: Merchant[];\n  selectedLl3Merchant: Merchant;\n  selectedMerchants: Merchant[];\n  lastSelectedMerchant: Merchant;\n\n  getMerchantFilter() {\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    if (merchant) {\n      this.merchantFilters = [];\n      this.merchantFilters.push(merchant);\n    }\n    /*this.merchantService\n    .merchantFilter()\n    .subscribe(\n      (res) => {\n        if (res.body && res.body.length > 0) {\n          this.merchantFilters = res.body;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );*/\n  }\n\n  onSelectedMasterMerchantChange() {\n    this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\n  }\n\n  getOnL1MerchantChange() {\n    this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\n  }\n  getOnL2MerchantChange() {\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\n  }\n\n  getOnL3MerchantChange() {\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\n  }\n\n  getChildMerchants(merchantId, level) {\n    this.merchantService\n    .childMerchantList(merchantId)\n    .subscribe(\n      (res) => {\n        this[level + 'Merchants'] = res.body;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );\n  }\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts b/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts
--- a/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts	(revision e2be0d8ba65c1894be94ea74460c580d6a71e5cc)
+++ b/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts	(date 1642410872616)
@@ -123,31 +123,11 @@
     .dcbTransactionHistorySummary(new DcbTransactionHistorySummary(merchantId,startDate, endDate,orderType,activePage))
     .subscribe(
       (res) => {
-       /* this.isPermission = true;
-        this.isUserMerchantChild = true;
-        this.showTable = false;
-        this.cdr.detectChanges();*/
         if (res != null && res.orders != null) {
           this.isPermission = true;
           this.isUserMerchantChild = true;
-          this.dcbTransactionHistorySummaryResponse = res;
-          this.dcbTransactions = this.dcbTransactionHistorySummaryResponse.orders;
-
-          if (this.dcbTransactions == null) {
-            this.isPermission = false;
-          }
-          if (this.dcbTransactions.length < 1) {
-            this.showTable = false;
-            this.isNoDataToDisplay = true;
-          }
-          if (this.dcbTransactions.length >= 1) {
-            this.showTable = true;
-            this.isNoDataToDisplay = false;
-          }
+          this.showTable = false;
           this.cdr.detectChanges();
-          this.numberOfPage = this.dcbTransactionHistorySummaryResponse.numberOfPage;
-          this.collectionSize = res.totalCount;
-          this.pageSize = res.pageSize;
         } else {
           this.isPermission = false;
           this.isUserMerchantChild = true;
Index: src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, QueryList, ViewChild, ViewChildren, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {DcbTransactionHistory} from \"../../../models/request/dcb.transaction.history\";\r\nimport {DcbTransactionHistoryResponse} from \"../../../models/response/user-dcb-transaction-history/dcb.transaction.history.response\";\r\nimport {DcbTransactionHistoryOrderResponse} from \"../../../models/response/user-dcb-transaction-history/dcb.transaction.history.order.response\";\r\nimport * as moment from \"moment\";\r\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\r\nimport {Merchant} from \"../../../models/merchant\";\r\nimport {MerchantService} from \"../../../services/merchant.service\";\r\nimport {MessageService} from \"../../../shared/services/message.service\";\r\nimport {NgxSpinnerService} from \"ngx-spinner\";\r\nimport {DatePipe} from '@angular/common';\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Error} from \"../../../models/response/error\";\r\nimport {MerchantId} from \"../../../models/request/merchant.id\";\r\n@Component({\r\n    selector: 'app-dcb-transaction',\r\n    templateUrl: './dcb-transaction.component.html',\r\n    styleUrls: ['./dcb-transaction.component.scss']\r\n})\r\nexport class DcbTransactionComponent implements OnInit {\r\n    orderNo: string;\r\n    selectedFundingSourceType: string;\r\n    selectedOrderType: string;\r\n    selectedPaymentStatus: string;\r\n    dcbTransactionHistoryResponse: DcbTransactionHistoryResponse;\r\n    currentDate: Date = new Date();\r\n    current: any;\r\n    past: any;\r\n    isOpen: boolean = false;\r\n    detailOrderNo: string;\r\n    detailOrderDate: string;\r\n    detailOrderType: string;\r\n    isOne: boolean = false;\r\n    l1: string;\r\n    l2: string;\r\n    l3: UserMerchant;\r\n    isUserMerchantChild: boolean = false;\r\n    startDate: any;\r\n    endDate: any;\r\n    isNoDataToDisplay: boolean = false;\r\n    pfFilter: number[] = [];\r\n    page = 1;\r\n    showTable: boolean = true;\r\n    collectionSize: number;\r\n    pageSize: number;\r\n    isPermission: boolean = false;\r\n    dcbTransactionHistory: DcbTransactionHistory;\r\n    dcbMerchantName: string;\r\n    dcbServiceId: number;\r\n    dcbServiceName: string;\r\n    orderId: number;\r\n    transactionAmount: number;\r\n    commissionAmount: number;\r\n    commissionRate: string;\r\n    fundingSourceType: string;\r\n    paymentType: string;\r\n    orderType: string;\r\n    paymentStatus: string;\r\n    merchantPaymentDate: string;\r\n    numberOfPage: number;\r\n    totalCount: number;\r\n    dcbOrders:DcbTransactionHistoryOrderResponse[];\r\n    detailDcbMerchantName:string;\r\n    detailDcbSubMerchantName:string;\r\n    detailDcbServiceName:string;\r\n    detailTransactionId:string;\r\n    detailFundingSourceType:string;\r\n    detailPaymentType:string;\r\n    detailPaymentStatus:string;\r\n    detailParam1:string;\r\n    detailParam2:string;\r\n    detailParam3:string;\r\n    detailTransactionAmount:number;\r\n    detailCommissionAmount:number;\r\n    detailCommissionRate:number;\r\n    detailMerchantPaymentDate: string;\r\n    error:Error;\r\n    localizedMessage:string;\r\n    message: string;\r\n\r\n    constructor(private userService: UserService, private cdr: ChangeDetectorRef,\r\n        private merchantService: MerchantService,\r\n        private messageService: MessageService,\r\n        private spinner: NgxSpinnerService,\r\n                public translate: TranslateService) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isOne = true;\r\n        this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\r\n        this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      const merchantIds = [];\r\n      merchantIds.push({\r\n        merchantId: merchant ? merchant.merchantId : null\r\n      });\r\n        this.onDcbPermission(merchantIds, this.past, this.current, null, null, null, null, 1);\r\n\r\n    }\r\n\r\n    closeFix(event, datePicker) {\r\n        if (event.target.offsetParent == null)\r\n            datePicker.close();\r\n        else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\r\n            datePicker.close();\r\n    }\r\n\r\n    dateDiff(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        var timeDiff = Math.abs(end.getTime() - start.getTime());\r\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n        return diffDays;\r\n    }\r\n    dateDiffIsBig(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        if (start.getTime() > end.getTime()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n\r\n    }\r\n    dateObjToDate(vDate) {\r\n        const datepipe: DatePipe = new DatePipe('tr-EN')\r\n        var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\r\n        let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\r\n        return sDate;\r\n    }\r\n    convertIdList (merchantList : Merchant[]) {\r\n        let merchantIdList : MerchantId[] = [];\r\n        for (let i = 0 ; i < merchantList.length ; i++){\r\n        let merchantId = new MerchantId(merchantList[i].merchantId);\r\n        merchantIdList.push(merchantId);\r\n    }\r\n    return merchantIdList;\r\n  }\r\n    fundingSourceTypeItem = [\r\n        {id: 1, name: 'Mobil Ödeme', orginalName: 'MOBIL ODEME'},\r\n        {id: 2, name: 'Hediye Para', orginalName: 'HEDIYE PARA'}\r\n\r\n    ];\r\n    orderTypesItem = [\r\n        {id: 1, name: 'Satış', orginalName: 'SATIS'},\r\n        {id: 2, name: 'İade', orginalName: 'IADE'}\r\n\r\n    ];\r\n\r\n    paymentStatusItem = [\r\n        {id: 1, name: 'Ödendi', orginalName: 'ODENDI'},\r\n        {id: 2, name: 'Ödenmedi', orginalName: 'ODENMEDI'}\r\n    ];\r\n\r\n    onDcbPermission(merchantId: MerchantId[], startDate: string, endDate: string, orderId: number, fundingSourceType: string, orderType: string, paymentStatus: string, activePage: number) {\r\n        this.userService\r\n            .dcbTransactionHistory(new DcbTransactionHistory(merchantId, startDate, endDate, orderId, fundingSourceType, orderType, paymentStatus, activePage))\r\n            .subscribe(\r\n                (res) => {\r\n                /*    this.isPermission = true;\r\n                    this.isUserMerchantChild = true;\r\n                    this.showTable = false;\r\n                    this.cdr.detectChanges();*/\r\n                  if (res != null && res.orders != null) {\r\n                    this.isPermission = true;\r\n                    this.dcbTransactionHistoryResponse = res;\r\n                    this.dcbOrders = this.dcbTransactionHistoryResponse.orders;\r\n                    if (this.dcbOrders == null) {\r\n                      this.isPermission = false;\r\n                    }\r\n                    if (this.dcbOrders.length < 1) {\r\n                      this.showTable = false;\r\n                      this.isNoDataToDisplay = true;\r\n                    }\r\n                    if (this.dcbOrders.length >= 1) {\r\n                      this.showTable = true;\r\n                      this.isNoDataToDisplay = false;\r\n                    }\r\n                    this.cdr.detectChanges();\r\n                    this.numberOfPage = this.dcbTransactionHistoryResponse.numberOfPage;\r\n                    this.collectionSize = res.totalCount;\r\n                    this.pageSize = res.pageSize;\r\n                  } else {\r\n                    this.isPermission = false;\r\n                    this.isUserMerchantChild = true;\r\n                    this.showTable = false;\r\n                    this.cdr.detectChanges();\r\n                  }\r\n                },\r\n                (err) => {\r\n                  if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 403) {\r\n                      this.isPermission = false;\r\n                      this.message = 'error.access.denied.message';\r\n                      this.cdr.detectChanges();\r\n                    } else if (err.status === 500) {\r\n                      this.isPermission = false;\r\n                      this.message = err.error.localizedMessage;\r\n                      this.cdr.detectChanges();\r\n                    } else {\r\n                      this.isPermission = false;\r\n                      this.message = err.error.localizedMessage;\r\n                      this.cdr.detectChanges();\r\n                    }\r\n                  }\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    isValidation(startDate, endDate) {\r\n        if (!this.selectedMerchant) {\r\n            this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (startDate == null || endDate == null) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiffIsBig(startDate, endDate)) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiff(startDate, endDate) > 7) {\r\n            this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n            return true;\r\n        }\r\n\r\n\r\n    }\r\n    downloadFile(data: Blob) {\r\n        var link = document.createElement('a');\r\n        link.href = window.URL.createObjectURL(data);\r\n        var fileName = \"Export.xlsx\";\r\n        link.download = fileName;\r\n        link.click();\r\n    }\r\n\r\n    onDcbTransactionExport(startDate, endDate, selectedPage: number) {\r\n        if (!this.isValidation(startDate, endDate)) {\r\n            return\r\n        }\r\n        this.dcbTransactionHistory = new DcbTransactionHistory(\r\n            this.convertIdList(this.selectedMerchant),\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderId,\r\n            this.selectedFundingSourceType,\r\n            this.selectedOrderType,\r\n            this.selectedPaymentStatus,\r\n            selectedPage)\r\n\r\n        this.spinner.show(\"spinner1\");\r\n        this.userService\r\n            .dcbTransactionHistoryExport(this.dcbTransactionHistory).subscribe(\r\n                (response) => {\r\n                    this.spinner.hide(\"spinner1\");\r\n                    this.downloadFile(response);\r\n                },\r\n          async (err) => {\r\n            var result = JSON.parse(await err.error.text());\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'İşleminiz yapılamadı! ',\r\n              confirmButtonText: 'Tamam',\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: result.localizedMessage\r\n            })\r\n          });\r\n    }\r\n\r\n\r\n    onDcbTransactionList(startDate, endDate, selectedPage: number) {\r\n        if (!this.isValidation(startDate, endDate)) {\r\n            return\r\n        }\r\n\r\n        this.page = selectedPage ?? 1;\r\n\r\n        this.dcbTransactionHistory = new DcbTransactionHistory(\r\n            this.convertIdList(this.selectedMerchant),\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderId,\r\n            this.selectedFundingSourceType,\r\n            this.selectedOrderType,\r\n            this.selectedPaymentStatus,\r\n            this.page)\r\n\r\n        this.userService\r\n            .dcbTransactionHistory(this.dcbTransactionHistory).subscribe(\r\n                (res) => {\r\n                    if(res != null && res.orders != null) {\r\n                      this.dcbTransactionHistoryResponse = res;\r\n                      this.dcbOrders = this.dcbTransactionHistoryResponse.orders;\r\n                      if (this.dcbOrders == null) {\r\n                        this.isPermission = false;\r\n                      }\r\n                      if (this.dcbOrders.length < 1) {\r\n                        this.showTable = false;\r\n                        this.isNoDataToDisplay = true;\r\n                      }\r\n                      if (this.dcbOrders.length >= 1) {\r\n                        this.showTable = true;\r\n                        this.isNoDataToDisplay = false;\r\n                      }\r\n                      this.cdr.detectChanges();\r\n                      this.numberOfPage = this.dcbTransactionHistoryResponse.numberOfPage;\r\n                      this.collectionSize = res.totalCount;\r\n                      this.pageSize = res.pageSize;\r\n                    }\r\n                },\r\n           async(err) => {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'İşleminiz yapılamadı! ',\r\n                    confirmButtonText: 'Tamam',\r\n                    buttonsStyling: false,\r\n                    customClass: {\r\n                      confirmButton: 'btn btn-dark'\r\n                    },\r\n                    text: err.error.localizedMessage\r\n                  })\r\n                 this.showTable = false;\r\n             if (err instanceof HttpErrorResponse) {\r\n               if (err.status === 403) {\r\n                 this.isPermission = false;\r\n                 this.message = 'error.access.denied.message';\r\n                 this.cdr.detectChanges();\r\n               } else if (err.status === 500) {\r\n                 this.isPermission = false;\r\n                 this.message = err.error.localizedMessage;\r\n                 this.cdr.detectChanges();\r\n               } else {\r\n                 this.isPermission = false;\r\n                 this.message = err.error.localizedMessage;\r\n                 this.cdr.detectChanges();\r\n               }\r\n             }\r\n                });\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        this.onDcbTransactionList(this.startDate, this.endDate, page)\r\n    }\r\n\r\n  transactionDetail(detail: DcbTransactionHistoryOrderResponse) {\r\n      this.detailDcbMerchantName = detail.dcbMerchantName\r\n      this.detailDcbSubMerchantName = detail.dcbSubMerchantName\r\n      this.detailDcbServiceName = detail.dcbServiceName\r\n      this.detailOrderNo = detail.orderId;\r\n      this.detailTransactionId = detail.transactionId\r\n    if (detail.orderType == \"SATIS\") {\r\n      this.detailOrderType = this.translate.instant('dcb.sale')\r\n    }\r\n    if (detail.orderType == 'IADE') {\r\n      this.detailOrderType = this.translate.instant('dcb.refund')\r\n    }\r\n\r\n    if(detail.fundingSourceType =='MOBIL ODEME'){\r\n      this.detailFundingSourceType = this.translate.instant('dcb.mobile.payment')\r\n    }\r\n\r\n    if(detail.fundingSourceType =='HEDIYE PARA'){\r\n      this.detailFundingSourceType = this.translate.instant('dcb.gift.money')\r\n    }\r\n    this.detailPaymentType = detail.paymentType\r\n    this.detailPaymentStatus = detail.paymentStatus\r\n    this.detailTransactionAmount = detail.transactionAmount\r\n    this.detailCommissionRate = detail.commissionRate\r\n    this.detailCommissionAmount = detail.commissionAmount\r\n\r\n    this.detailOrderDate = detail.orderDate\r\n    this.detailMerchantPaymentDate = detail.merchantPaymentDate\r\n    this.detailParam1 = detail.param1;\r\n    this.detailParam2 = detail.param2;\r\n    this.detailParam3 = detail.param3;\r\n\r\n  }\r\n\r\n  openTransactionDetailModal(open: boolean): void {\r\n        this.isOpen = open;\r\n    }\r\n    //\r\n    //    transactionDetail(detail: DcbTransactionHistoryResponse) {\r\n    //\r\n    //\r\n    //    }\r\n    firmError = false;\r\n    isFirmModalOpen = false;\r\n\r\n    openFirmModal(open: boolean): void {\r\n        if (open) {\r\n            this.merchantFilters = null;\r\n            this.selectedMasterMerchant = null;\r\n            this.ll1Merchants = null;\r\n            this.selectedLl1Merchant = null;\r\n            this.ll2Merchants = null;\r\n            this.selectedLl2Merchant = null;\r\n            this.ll3Merchants = null;\r\n            this.selectedLl3Merchant = null;\r\n            this.getMerchantFilter();\r\n        } else {\r\n          this.selectedMerchant = [];\r\n            if ((this.merchantFilters == null || this.merchantFilters.length < 1)\r\n                && this.selectedMasterMerchant) {\r\n              this.selectedMerchant.push(this.selectedMasterMerchant);\r\n            }\r\n\r\n            if (this.merchantFilters && this.merchantFilters.length > 0) {\r\n                if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\r\n                  this.selectedMerchant.push(this.merchantFilters[0]);\r\n                }\r\n                if (this.selectedMasterMerchant) {\r\n                  this.selectedMerchant.push(this.selectedMasterMerchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll1Merchants && this.ll1Merchants.length > 0) {\r\n                if (this.selectedLl1Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl1Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll2Merchants && this.ll2Merchants.length > 0) {\r\n                if (this.selectedLl2Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl2Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll3Merchants && this.ll3Merchants.length > 0) {\r\n              if (this.selectedLl3Merchant) {\r\n                this.selectedMerchant.push(this.selectedLl3Merchant);\r\n            }\r\n          }\r\n          this.selectedMerchants = this.selectedMerchant.reverse()\r\n          this.lastSelectedMerchant = this.selectedMerchants[0]\r\n            if (!this.selectedMerchant) {\r\n                this.firmError = true;\r\n                this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n                return;\r\n            }\r\n            else {\r\n                this.messageService.remove();\r\n            }\r\n        }\r\n        this.isFirmModalOpen = open;\r\n    }\r\n\r\n    selectedMerchant: Merchant[];\r\n    merchantFilters: Merchant[];\r\n    selectedMasterMerchant: Merchant;\r\n    ll1Merchants: Merchant[];\r\n    selectedLl1Merchant: Merchant;\r\n    ll2Merchants: Merchant[];\r\n    selectedLl2Merchant: Merchant;\r\n    ll3Merchants: Merchant[];\r\n    selectedLl3Merchant: Merchant;\r\n    selectedMerchants: Merchant[];\r\n    lastSelectedMerchant: Merchant;\r\n\r\n    getMerchantFilter() {\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      if (merchant) {\r\n        this.merchantFilters = [];\r\n        this.merchantFilters.push(merchant);\r\n      }\r\n    }\r\n\r\n    onSelectedMasterMerchantChange() {\r\n        this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\r\n    }\r\n\r\n    getOnL1MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\r\n    }\r\n\r\n    getOnL2MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\r\n   }\r\n\r\n    getOnL3MerchantChange() {\r\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\r\n  }\r\n\r\n    getChildMerchants(merchantId, level) {\r\n        this.merchantService\r\n            .childMerchantList(merchantId)\r\n            .subscribe(\r\n                (res) => {\r\n                    this[level + 'Merchants'] = res.body;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts b/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts
--- a/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts	(revision e2be0d8ba65c1894be94ea74460c580d6a71e5cc)
+++ b/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts	(date 1642410716701)
@@ -161,29 +161,11 @@
             .dcbTransactionHistory(new DcbTransactionHistory(merchantId, startDate, endDate, orderId, fundingSourceType, orderType, paymentStatus, activePage))
             .subscribe(
                 (res) => {
-                /*    this.isPermission = true;
-                    this.isUserMerchantChild = true;
-                    this.showTable = false;
-                    this.cdr.detectChanges();*/
                   if (res != null && res.orders != null) {
                     this.isPermission = true;
-                    this.dcbTransactionHistoryResponse = res;
-                    this.dcbOrders = this.dcbTransactionHistoryResponse.orders;
-                    if (this.dcbOrders == null) {
-                      this.isPermission = false;
-                    }
-                    if (this.dcbOrders.length < 1) {
-                      this.showTable = false;
-                      this.isNoDataToDisplay = true;
-                    }
-                    if (this.dcbOrders.length >= 1) {
-                      this.showTable = true;
-                      this.isNoDataToDisplay = false;
-                    }
+                    this.isUserMerchantChild = true;
+                    this.showTable = false;
                     this.cdr.detectChanges();
-                    this.numberOfPage = this.dcbTransactionHistoryResponse.numberOfPage;
-                    this.collectionSize = res.totalCount;
-                    this.pageSize = res.pageSize;
                   } else {
                     this.isPermission = false;
                     this.isUserMerchantChild = true;
