Index: src/app/pages/content-pages/change-password/change-password-page.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { AuthService } from 'app/shared/auth/auth.service';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { TranslateService } from \"@ngx-translate/core\";\nimport { PasswordService } from \"../../../services/password.service\";\nimport { MessageService } from \"../../../shared/services/message.service\";\n\n\n@Component({\n  selector: 'app-change-password-page',\n  templateUrl: './change-password-page.component.html',\n  styleUrls: ['./change-password-page.component.scss']\n})\nexport class ChangePasswordPageComponent {\n\n  form = new FormGroup({\n    newPassword: new FormControl(null, [Validators.required]),\n    newPasswordRetype: new FormControl(null, [Validators.required]),\n  });\n\n  formSubmitted = false;\n  alert: any;\n  spinnerText: string;\n\n  token: string;\n  isResetProcess: boolean;\n\n  constructor(private router: Router,\n              private authService: AuthService,\n              private spinner: NgxSpinnerService,\n              public translate: TranslateService,\n              private passwordService: PasswordService,\n              private route: ActivatedRoute,\n              private messageService: MessageService) {\n    this.initAlert(false, null);\n\n    this.route.data.subscribe(routeData => {\n      if (routeData.type === 'expired') {\n        this.isResetProcess = false;\n        this.form.valueChanges.subscribe((asd) => this.checkFieldsEquality(asd, this.form), null);\n      } else if (routeData.type === 'reset') {\n        this.isResetProcess = true;\n        this.form.valueChanges.subscribe((asd) => this.checkFieldsEquality(asd, this.form), null);\n        this.route.queryParams\n          .subscribe(params => {\n              this.token = params['token'];\n              this.verifyCode();\n            }\n          );\n      } else {\n        this.router.navigate(['']);\n      }\n    });\n  }\n\n  get lf() {\n    return this.form.controls;\n  }\n\n  verifyCode() {\n    this.initAlert(false, null);\n    this.showSpinner('change-password.spinner.loading');\n\n    this.passwordService.verifyCode(this.token)\n      .subscribe(\n        (response) => {\n          this.resetSpinner();\n\n          if (['invalid', 'confirmed', 'expired'].includes(response.body?.status)) {\n            this.initAlert(true, 'change-password.message.' + response.body.status);\n          }\n        },\n        (err) => {\n          this.messageService.addHttpError({\n            httpErrorResponse: err,\n            defaultMessage: 'change-password.message.error'\n          });\n          this.resetSpinner();\n          // if (err.status === 404 || err.status === 500)\n          this.initAlert(true, \"change-password.message.server-error\");\n        }\n      );\n  }\n\n  checkFieldsEquality(formControls, form: FormGroup) {\n    const keys = Object.keys(formControls);\n\n    if (formControls[keys[0]] !== formControls[keys[1]]) {\n      this.setControlError(form.controls[keys[0]], true);\n      this.setControlError(form.controls[keys[1]], true);\n    } else {\n      this.setControlError(form.controls[keys[0]], null);\n      this.setControlError(form.controls[keys[1]], null);\n    }\n  }\n\n  setControlError(control, error) {\n    if (error) {\n      let errors = control.errors ? control.errors : {};\n      errors['equal'] = true;\n      control.setErrors(errors);\n    } else if (control.errors) {\n      delete control.errors['equal'];\n      if (Object.keys(control.errors).length === 0) {\n        control.setErrors(null);\n      }\n    }\n  }\n\n  onSubmit() {\n    this.initAlert(false, null);\n    this.formSubmitted = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.showSpinner('change-password.spinner.changing');\n\n    (this.isResetProcess ?\n      this.passwordService.updateByReset(this.token, this.form.value.newPassword) :\n      this.authService.changeExpiredPass(this.form.value.newPassword))\n      .subscribe(\n        (res) => {\n          this.resetSpinner();\n          this.initAlert(true, \"change-password.message.success\");\n\n          if (!this.isResetProcess) {\n            this.router.navigate(['/pages/terminus']);\n          }\n        },\n        (err) => {\n          this.messageService.addHttpError({\n            httpErrorResponse: err,\n            defaultMessage: 'change-password.message.error'\n          });\n          this.resetSpinner();\n        }\n      );\n  }\n\n\n  showSpinner(text: string): void {\n    this.spinnerText = text;\n    this.spinner.show(undefined,\n      {\n        type: 'ball-triangle-path',\n        size: 'medium',\n        bdColor: 'rgba(0, 0, 0, 0.8)',\n        color: '#fff',\n        fullScreen: true\n      });\n  }\n\n  resetSpinner(): void {\n    this.spinnerText = null;\n    this.spinner.hide();\n  }\n\n  initAlert(active: boolean, message: string): void {\n    this.alert = {active, message: message ? message : null};\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/content-pages/change-password/change-password-page.component.ts b/src/app/pages/content-pages/change-password/change-password-page.component.ts
--- a/src/app/pages/content-pages/change-password/change-password-page.component.ts	
+++ b/src/app/pages/content-pages/change-password/change-password-page.component.ts	
@@ -128,7 +128,7 @@
           this.initAlert(true, "change-password.message.success");
 
           if (!this.isResetProcess) {
-            this.router.navigate(['/pages/terminus']);
+            this.router.navigate(['/pages/merchant']);
           }
         },
         (err) => {
