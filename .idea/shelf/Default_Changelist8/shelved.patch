Index: src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\nimport {UserService} from \"../../../services/user.service\";\nimport {MerchantService} from \"../../../services/merchant.service\";\nimport {MessageService} from \"../../../shared/services/message.service\";\nimport {NgxSpinnerService} from \"ngx-spinner\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from \"moment\";\nimport {DatePipe} from \"@angular/common\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Merchant} from \"../../../models/merchant\";\nimport {DcbTransactionHistorySummaryResponse} from \"../../../models/response/dcb-transaction-history-summary/dcb.transaction.history.summary.response\";\nimport {DcbTransactionHistorySummaryBaseResponse} from \"../../../models/response/dcb-transaction-history-summary/dcb.transaction.history.summary.base.response\";\nimport {DcbTransactionHistorySummary} from \"../../../models/request/dcb.transaction.history.summary\";\nimport Swal from \"sweetalert2\";\nimport {Error} from \"../../../models/response/error\";\nimport {MerchantId} from \"../../../models/request/merchant.id\";\n\n@Component({\n  selector: 'app-dcb-transaction-summary',\n  templateUrl: './dcb-transaction-summary.component.html',\n  styleUrls: ['./dcb-transaction-summary.component.scss']\n})\nexport class DcbTransactionSummaryComponent implements OnInit {\n  orderNo: string;\n  selectedOrderType: string;\n  dcbTransactionHistorySummaryResponse: DcbTransactionHistorySummaryResponse;\n  currentDate: Date = new Date();\n  current: any;\n  past: any;\n  isOne: boolean = false;\n  l1: string;\n  l2: string;\n  l3: UserMerchant;\n  isUserMerchantChild: boolean = false;\n  startDate: any;\n  endDate: any;\n  isNoDataToDisplay: boolean = false;\n  pfFilter: number[] = [];\n  page = 1;\n  showTable: boolean = true;\n  isPermission: boolean = false;\n  dcbTransactionHistory: DcbTransactionHistorySummary;\n  dcbTransactions:DcbTransactionHistorySummaryBaseResponse[];\n  numberOfPage:number;\n  collectionSize: number;\n  pageSize: number;\n  error:Error;\n  localizedMessage:string;\n\n\n  constructor(private userService: UserService, private cdr: ChangeDetectorRef,\n              private merchantService: MerchantService,\n              private messageService: MessageService,\n              private spinner: NgxSpinnerService,\n              public translate: TranslateService) {\n\n  }\n\n  ngOnInit(): void {\n    this.isOne = true;\n    this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\n    this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\n      this.onDcbTransactionHistorySummary(null, 1, this.past, this.current, this.selectedOrderType)\n\n  }\n\n  closeFix(event, datePicker) {\n    if (event.target.offsetParent == null)\n      datePicker.close();\n    else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\n      datePicker.close();\n  }\n\n  dateDiff(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    var timeDiff = Math.abs(end.getTime() - start.getTime());\n    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return diffDays;\n  }\n  dateDiffIsBig(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    if (start.getTime() > end.getTime()) {\n      return true\n    } else {\n      return false\n    }\n\n  }\n\n  dateObjToDate(vDate) {\n    const datepipe: DatePipe = new DatePipe('tr-EN')\n    var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\n    let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\n    return sDate;\n  }\n\n  convertIdList (merchantList : Merchant[]) {\n    let merchantIdList : MerchantId[] = [];\n    for (let i = 0 ; i < merchantList.length ; i++){\n      let merchantId = new MerchantId(merchantList[i].merchantId);\n      merchantIdList.push(merchantId);\n    }\n    return merchantIdList;\n  }\n\n    orderTypesItem = [\n        {id: 1, name: 'Satış', orginalName: 'SATIS'},\n        {id: 2, name: 'İade', orginalName: 'IADE'}\n\n    ];\n\n  onDcbTransactionHistorySummary(merchantId: MerchantId[], activePage: number, startDate: string, endDate: string, orderType: string) {\n    this.userService\n    .dcbTransactionHistorySummary(new DcbTransactionHistorySummary(merchantId,startDate, endDate,orderType,activePage))\n    .subscribe(\n      (res) => {\n        this.isPermission = true;\n        this.isUserMerchantChild = true;\n        this.showTable = false;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n          }\n          else if (err.status === 500) {\n            this.isPermission = true;\n            this.isUserMerchantChild = true;\n            this.showTable = false;\n            this.cdr.detectChanges();\n          }\n          this.cdr.detectChanges();\n        }\n      }\n    );\n  }\n\n  isHistoryValidation(startDate, endDate) {\n    if (!this.selectedMerchant) {\n      this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (startDate == null || endDate == null) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiffIsBig(startDate, endDate)) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiff(startDate, endDate) > 7) {\n      this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n      return true;\n    }\n\n\n  }\n  downloadFile(data: Blob) {\n    var link = document.createElement('a');\n    link.href = window.URL.createObjectURL(data);\n    var fileName = \"Export.xlsx\";\n    link.download = fileName;\n    link.click();\n  }\n\n  onDcbTransactionExport(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n    this.dcbTransactionHistory = new DcbTransactionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.selectedOrderType,\n      selectedPage)\n    this.spinner.show(\"spinner1\");\n    this.userService\n    .dcbTransactionHistorySummaryExport(this.dcbTransactionHistory).subscribe(\n      (response) => {\n        this.spinner.hide(\"spinner1\");\n        this.downloadFile(response);\n      },\n      async (err) => {\n        var result = JSON.parse(await err.error.text());\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: result.localizedMessage\n        })\n      });\n  }\n\n\n  onDcbTransactionHistorySummaryLast(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n\n    this.page = selectedPage ?? 1;\n\n    this.dcbTransactionHistory = new DcbTransactionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.selectedOrderType,\n      this.page,\n    )\n\n    this.userService\n    .dcbTransactionHistorySummary(this.dcbTransactionHistory).subscribe(\n      (res) => {\n        if(res != null && res.orders != null) {\n          this.dcbTransactionHistorySummaryResponse = res;\n          this.dcbTransactions = this.dcbTransactionHistorySummaryResponse.orders;\n\n          if (this.dcbTransactions == null) {\n            this.isPermission = false;\n          }\n          if (this.dcbTransactions.length < 1) {\n            this.showTable = false;\n            this.isNoDataToDisplay = true;\n          }\n          if (this.dcbTransactions.length >= 1) {\n            this.showTable = true;\n            this.isNoDataToDisplay = false;\n          }\n          this.cdr.detectChanges();\n          this.numberOfPage = this.dcbTransactionHistorySummaryResponse.numberOfPage;\n          this.collectionSize = res.totalCount;\n          this.pageSize = res.pageSize;\n        }\n      },\n      (err) => {\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: err.error.localizedMessage\n        })\n        this.showTable = false;\n      }\n    );\n  }\n\n  loadPage(page: number) {\n    this.onDcbTransactionHistorySummaryLast(this.startDate, this.endDate, page)\n  }\n\n  firmError = false;\n  isFirmModalOpen = false;\n\n  openFirmModal(open: boolean): void {\n    if (open) {\n      this.merchantFilters = null;\n      this.selectedMasterMerchant = null;\n      this.ll1Merchants = null;\n      this.selectedLl1Merchant = null;\n      this.ll2Merchants = null;\n      this.selectedLl2Merchant = null;\n      this.ll3Merchants = null;\n      this.selectedLl3Merchant = null;\n      this.getMerchantFilter();\n    } else {\n      this.selectedMerchant = [];\n      if ((this.merchantFilters == null || this.merchantFilters.length < 1)\n        && this.selectedMasterMerchant) {\n        this.selectedMerchant.push(this.selectedMasterMerchant);\n      }\n\n      if (this.merchantFilters && this.merchantFilters.length > 0) {\n        if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\n          this.selectedMerchant.push(this.merchantFilters[0]);\n        }\n        if (this.selectedMasterMerchant) {\n          this.selectedMerchant.push(this.selectedMasterMerchant);\n        }\n      }\n\n      if (this.ll1Merchants && this.ll1Merchants.length > 0) {\n        if (this.selectedLl1Merchant) {\n          this.selectedMerchant.push(this.selectedLl1Merchant);\n        }\n      }\n\n      if (this.ll2Merchants && this.ll2Merchants.length > 0) {\n        if (this.selectedLl2Merchant) {\n          this.selectedMerchant.push(this.selectedLl2Merchant);\n        }\n      }\n      if (this.ll3Merchants && this.ll3Merchants.length > 0) {\n        if (this.selectedLl3Merchant) {\n          this.selectedMerchant.push(this.selectedLl3Merchant);\n        }\n      }\n      this.selectedMerchants = this.selectedMerchant.reverse()\n      this.lastSelectedMerchant = this.selectedMerchants[0]\n      if (!this.selectedMerchant) {\n        this.firmError = true;\n        this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n        return;\n      }\n      else {\n        this.messageService.remove();\n      }\n    }\n    this.isFirmModalOpen = open;\n  }\n\n  selectedMerchant: Merchant[];\n  merchantFilters: Merchant[];\n  selectedMasterMerchant: Merchant;\n  ll1Merchants: Merchant[];\n  selectedLl1Merchant: Merchant;\n  ll2Merchants: Merchant[];\n  selectedLl2Merchant: Merchant;\n  ll3Merchants: Merchant[];\n  selectedLl3Merchant: Merchant;\n  selectedMerchants: Merchant[];\n  lastSelectedMerchant: Merchant;\n\n  getMerchantFilter() {\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    if (merchant) {\n      this.merchantFilters = [];\n      this.merchantFilters.push(merchant);\n    }\n    /*this.merchantService\n    .merchantFilter()\n    .subscribe(\n      (res) => {\n        if (res.body && res.body.length > 0) {\n          this.merchantFilters = res.body;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );*/\n  }\n\n  onSelectedMasterMerchantChange() {\n    this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\n  }\n\n  getOnL1MerchantChange() {\n    this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\n  }\n  getOnL2MerchantChange() {\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\n  }\n\n  getOnL3MerchantChange() {\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\n  }\n\n  getChildMerchants(merchantId, level) {\n    this.merchantService\n    .childMerchantList(merchantId)\n    .subscribe(\n      (res) => {\n        this[level + 'Merchants'] = res.body;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );\n  }\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts b/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts
--- a/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/dcb-transaction-summary/dcb-transaction-summary.component.ts	(date 1640608224303)
@@ -61,7 +61,12 @@
     this.isOne = true;
     this.past = moment(this.currentDate).subtract(1, 'day').format("YYYY-MM-DD");
     this.current = moment(this.currentDate).format("YYYY-MM-DD");
-      this.onDcbTransactionHistorySummary(null, 1, this.past, this.current, this.selectedOrderType)
+    const merchant = JSON.parse(localStorage.getItem('merchantName'));
+    const merchantIds = [];
+    merchantIds.push({
+      merchantId: merchant ? merchant.merchantId : null
+    });
+      this.onDcbTransactionHistorySummary(merchantIds, 1, this.past, this.current, this.selectedOrderType)
 
   }
 
Index: src/app/pages/full-pages/pf-history/pf-history.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, QueryList, ViewChild, ViewChildren, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {PfTransactionsHistory} from \"../../../models/request/pf.transactions.history\";\r\nimport {PfTransactionsHistoryBaseResponse} from \"../../../models/response/user-pf-transactions-history/pf.transactions.history.base.response\";\r\nimport {PfTransactionReverse} from \"../../../models/request/pf.transactions.reverse\";\r\nimport {PfTransactionRefund} from \"../../../models/request/pf.transactions.refund\";\r\nimport * as moment from \"moment\";\r\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\r\nimport {Merchant} from \"../../../models/merchant\";\r\nimport {MerchantService} from \"../../../services/merchant.service\";\r\nimport {MessageService} from \"../../../shared/services/message.service\";\r\nimport {NgxSpinnerService} from \"ngx-spinner\";\r\nimport {DatePipe} from '@angular/common';\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport Swal from 'sweetalert2';\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport {AppConfig} from '../../../shared/app-config/app-config'\r\nimport {PfTransactionsHistoryResponse} from \"../../../models/response/user-pf-transactions-history/pf.transactions.history.response\";\r\n@Component({\r\n    selector: 'app-pf-history',\r\n    templateUrl: './pf-history.component.html',\r\n    styleUrls: ['./pf-history.component.scss']\r\n})\r\nexport class PfHistoryComponent implements OnInit {\r\n    rows = [];\r\n    orderNo: string;\r\n    selectedCardType: string;\r\n    selectedOrderType: string;\r\n    installmentType: string;\r\n    selectedOrderStatus: string;\r\n    pfResponses: PfTransactionsHistoryResponse;\r\n    currentDate: Date = new Date();\r\n    current: any;\r\n    past: any;\r\n    isOpen: boolean = false;\r\n    isRefRevOpen: boolean = false;\r\n    detailOrderNo: string;\r\n    detailOrderDate: string;\r\n    detailOrderTime: string;\r\n    orderDate: string;\r\n    modalInstallmentType: string;\r\n    detailOrderAmount: number;\r\n    orderAmount: number;\r\n    detailCurrency: string;\r\n    detailNetOrderAmount: number;\r\n    netOrderAmount: number;\r\n    detailOrderType: string;\r\n    orderType: string;\r\n    detailOrderStatus: string;\r\n    orderStatus: string;\r\n    detailInstallmentCount: string;\r\n    detailUserName: string;\r\n    installmentCount: string;\r\n    detailBankResponseCode: string;\r\n    bankResponseCode: string;\r\n    detailBankResponseCodeDesc: string;\r\n    detailAcquirerBankDesc: string;\r\n    detailPaymentMethodType: string;\r\n    detailIssuerBankCodeDesc: string;\r\n    bankResponseCodeDesc: string;\r\n    file_name: string = \"pf_transactions_list\";\r\n    isOne: boolean = false;\r\n    l1: string;\r\n    l2: string;\r\n    l3: UserMerchant;\r\n    isUserMerchantChild: boolean = false;\r\n    startDate: any;\r\n    endDate: any;\r\n    isNoDataToDisplay: boolean = false;\r\n    pfFilter: number;\r\n    page = 1;\r\n    showTable: boolean = true;\r\n    collectionSize: number;\r\n    isPermission: boolean = false;\r\n    detailReferenceNumber: number;\r\n    pfTransHistory: PfTransactionsHistory;\r\n    refundAmount: number;\r\n    numberOfPage: number;\r\n    totalCount: number;\r\n\r\n    constructor(private userService: UserService, private cdr: ChangeDetectorRef,\r\n        private merchantService: MerchantService,\r\n        private messageService: MessageService,\r\n        private spinner: NgxSpinnerService,\r\n        private appConfig:AppConfig,\r\n        public translate: TranslateService) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isOne = true;\r\n        this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\r\n        this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\r\n        this.onPfHistory(null, 1, this.past, this.current, null, null, null, null, null)\r\n\r\n    }\r\n\r\n    closeFix(event, datePicker) {\r\n        if (event.target.offsetParent == null)\r\n            datePicker.close();\r\n        else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\r\n            datePicker.close();\r\n    }\r\n\r\n    dateDiff(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        var timeDiff = Math.abs(end.getTime() - start.getTime());\r\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n        return diffDays;\r\n    }\r\n    dateDiffIsBig(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        if (start.getTime() > end.getTime()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    dateObjToDate(vDate) {\r\n        const datepipe: DatePipe = new DatePipe('tr-EN')\r\n        var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\r\n        let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\r\n        return sDate;\r\n    }\r\n    orderTypes = [\r\n        {id: 1, name: this.translate.instant('pf.refund'), orginalName: 'REFUND'},\r\n        {id: 2, name: this.translate.instant('pf.preauth.reverse'), orginalName: 'PREAUTH_REVERSE'},\r\n        {id: 3, name: this.translate.instant('pf.reverse'), orginalName: 'REVERSE'},\r\n        {id: 4, name: this.translate.instant('pf.preauth'), orginalName: 'PREAUTH'},\r\n        {id: 5, name: this.translate.instant('pf.sale'), orginalName: 'SALE'},\r\n        {id: 6, name: this.translate.instant('pf.postauth'), orginalName: 'POSTAUTH'},\r\n        {id: 7, name: this.translate.instant('pf.postauth.reverse'), orginalName: 'POSTAUTH_REVERSE'},\r\n    ];\r\n\r\n    orderStatuss = [\r\n        {id: 1, name: this.translate.instant('pf.success'), orginalName: 'SUCCESS'},\r\n        {id: 2, name: this.translate.instant('pf.fail'), orginalName: 'FAIL'},\r\n        {id: 3, name: this.translate.instant('pf.processing'), orginalName: 'UNKNOWN'},\r\n    ];\r\n\r\n  installmentStatus = [\r\n   // {id: 1, name: this.translate.instant('pf.all.installment'), orginalName: 'ALL'},\r\n    {id: 1, name: this.translate.instant('pf.with.installment'), orginalName: 'WITH_INSTALLMENT'},\r\n    {id: 2, name: this.translate.instant('pf.non.installment'), orginalName: 'NON_INSTALLMENT'},\r\n  ];\r\n\r\n    onPfHistory(merchantId: string, activePage: number, startDate: string, endDate: string, orderId: string, orderType: string, orderStatus: string, isFirstCall: boolean, installmentType: string) {\r\n        this.userService\r\n            .pfTransactionsHistory(new PfTransactionsHistory(merchantId, activePage, startDate, endDate, orderId, orderType, orderStatus, isFirstCall, installmentType))\r\n            .subscribe(\r\n                (res) => {\r\n                    this.isPermission = true;\r\n                    this.isUserMerchantChild = true;\r\n                    this.showTable = false;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                    this.isNoDataToDisplay = true;\r\n                    if (err instanceof HttpErrorResponse) {\r\n                        if (err.status === 403) {\r\n                            this.isPermission = false;\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    isHistoryValidation(startDate, endDate, selectedPage: number, selectedMerchant: Merchant) {\r\n        if (!this.selectedMerchant) {\r\n            this.messageService.addError(this.translate.instant('pf.choose.merchant'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (startDate == null || endDate == null) {\r\n            this.messageService.addError(this.translate.instant('pf.startDate.and.EndDate.must'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiffIsBig(startDate, endDate)) {\r\n            this.messageService.addError(this.translate.instant('pf.startDate.cannot.greater.than.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiff(startDate, endDate) > 31) {\r\n            this.messageService.addError(this.translate.instant('pf.difference.between.startDate.and.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n            return true;\r\n        }\r\n\r\n\r\n    }\r\n    downloadFile(data: Blob) {\r\n        var link = document.createElement('a');\r\n        link.href = window.URL.createObjectURL(data);\r\n        var fileName = \"Export.xlsx\";\r\n        link.download = fileName;\r\n        link.click();\r\n    }\r\n\r\n    onPfHistoryExport(startDate, endDate, selectedPage: number, selectedMerchant: Merchant) {\r\n        if (!this.isHistoryValidation(startDate, endDate, selectedPage, selectedMerchant)) {\r\n            return\r\n        }\r\n        this.pfTransHistory = new PfTransactionsHistory(\r\n            this.selectedMerchant.merchantId,\r\n            selectedPage,\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderNo, this.selectedOrderType,\r\n            this.selectedOrderStatus,\r\n            false, this.installmentType)\r\n        this.spinner.show(\"spinner1\");\r\n        this.userService\r\n            .pfTransactionsHistoryExport(this.pfTransHistory).subscribe(\r\n                (response) => {\r\n                    this.spinner.hide(\"spinner1\");\r\n                    this.downloadFile(response);\r\n                },\r\n          async (err) => {\r\n\t\t\tvar result = JSON.parse(await err.error.text());\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title:this.translate.instant('pf.transaction.not.completed'),\r\n              confirmButtonText: this.translate.instant('pf.ok'),\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: result.localizedMessage\r\n            })\r\n          }\r\n          );\r\n    }\r\n\r\n\r\n    onPfHistoryLast(startDate, endDate, selectedPage: number, selectedMerchant: Merchant) {\r\n        if (!this.isHistoryValidation(startDate, endDate, selectedPage, selectedMerchant)) {\r\n            return\r\n        }\r\n\r\n        this.page = selectedPage ?? 1;\r\n\r\n        this.pfTransHistory = new PfTransactionsHistory(\r\n            this.selectedMerchant.merchantId,\r\n            this.page,\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderNo,\r\n            this.selectedOrderType,\r\n            this.selectedOrderStatus,\r\n            false,\r\n            this.installmentType)\r\n\r\n        this.userService\r\n            .pfTransactionsHistory(this.pfTransHistory).subscribe(\r\n                (res) => {\r\n                    this.pfResponses = res;\r\n                    if (this.pfResponses == null) {\r\n                        this.isPermission = false;\r\n                    }\r\n                    if (this.pfResponses.historyTransactions.length < 1) {\r\n                        this.showTable = false;\r\n                        this.isNoDataToDisplay = true;\r\n                    }\r\n                    if (this.pfResponses.historyTransactions.length >= 1) {\r\n                        this.showTable = true;\r\n                        this.isNoDataToDisplay = false;\r\n                    }\r\n                    this.cdr.detectChanges();\r\n                    this.numberOfPage = this.pfResponses.numberOfPage;\r\n                    this.collectionSize = res.totalCount;\r\n                  },\r\n                (err) => {\r\n                    this.isNoDataToDisplay = true;\r\n                    this.showTable = false;\r\n                }\r\n            );\r\n    }\r\n\r\n    loadPage(page: number, selectedMerchant: Merchant) {\r\n        this.onPfHistoryLast(this.startDate, this.endDate, page, selectedMerchant)\r\n    }\r\n    pfSwallMessage() {\r\n        Swal.fire({\r\n            icon: 'warning',\r\n            title:this.translate.instant('pf.warning'),\r\n            confirmButtonText:  this.translate.instant('pf.ok'),\r\n            buttonsStyling: false,\r\n            customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n            },\r\n            text:this.translate.instant('pf.access.denied'),\r\n        })\r\n    }\r\n    reverseTransaction(detail: PfTransactionsHistoryBaseResponse) {\r\n        if (!this.appConfig.isApiAllowed(this.userService.pfTransactionReverseUrl)) {\r\n            this.pfSwallMessage();\r\n            return\r\n        }\r\n        this.detailOrderNo = detail.orderId;\r\n        this.detailOrderDate = detail.orderDate;\r\n        this.detailOrderTime = detail.orderTime;\r\n        this.detailNetOrderAmount = detail.netOrderAmount;\r\n        this.detailCurrency = detail.currency;\r\n        Swal.fire({\r\n            cancelButtonText: this.translate.instant('pf.give.up'),\r\n            confirmButtonText: this.translate.instant('pf.approved'),\r\n            buttonsStyling:false,\r\n            customClass: {\r\n                confirmButton:'btn btn-dark mr-sm-2',\r\n                cancelButton:'btn btn-secondary mr-sm-2',\r\n            },\r\n            reverseButtons:true,\r\n            showCancelButton:true,\r\n            width: 600,\r\n            html:\r\n                '<div class=\"modal-header\" style=\"padding:1rem 0;\">' +\r\n                '<h4 class=\"modal-title\">'+this.translate.instant('pf.transaction.reverse.popup.header')+'</h4>' +\r\n                '</div><br><p class=\"text-justify\">'+this.translate.instant('pf.transaction.reverse.popup.detail')+'</p><br>' +\r\n                '<div class=\"container\">' +\r\n                '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 1rem;\">'+this.translate.instant('pf.lower.order.number')+': </p> <p class=\"col-right\">' + this.detailOrderNo + '</p></div>' +\r\n                '<div class=\"row\"> <p class=\"text-justify\"style=\"margin-right: 51px;\">'+this.translate.instant('pf.order.date')+': </p> <p class=\"col-right\">' + this.detailOrderDate + ' ' + this.detailOrderTime + '</p></div>' +\r\n                '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 4rem;\">'+this.translate.instant('pf.transaction.amount')+': </p> <p class=\"col-right\">' + this.detailNetOrderAmount.toLocaleString('tr-TR', {minimumFractionDigits: 2}) + ' ' + this.detailCurrency + '</p></div>' +\r\n                '</div>',\r\n            preConfirm: () => {\r\n                this.userService.pfTransactionReverse(\r\n                    new PfTransactionReverse(this.selectedMerchant.merchantId,\r\n                        detail.productMerchantCode,\r\n                        detail.msisdn,\r\n                        String(detail.referenceNumber),\r\n                        detail.orderAmount,\r\n                        detail.netOrderAmount,\r\n                        detail.netOrderAmount,\r\n                        detail.currency)).subscribe(\r\n                            (res) => {\r\n                                if (res.status == 200) {\r\n                                    this.onPfHistoryLast(this.startDate, this.endDate, 1, null);\r\n                                    Swal.fire({\r\n                                        icon: 'success',\r\n                                        title: this.translate.instant('pf.transaction.completed'),\r\n                                        confirmButtonText:  this.translate.instant('pf.ok'),\r\n                                        buttonsStyling: false,\r\n                                        customClass: {\r\n                                            confirmButton: 'btn btn-dark'\r\n                                        },\r\n                                        text: res.body.responseDescription,\r\n                                    })\r\n                                }\r\n\r\n                                if (res.status === 403 || res.status === 401) {\r\n                                        this.pfSwallMessage();\r\n                                }\r\n\r\n                            },\r\n                            (err) => {\r\n                                if (err instanceof HttpErrorResponse) {\r\n                                    if (err.status === 403 || err.status === 401) {\r\n                                        this.pfSwallMessage();\r\n                                    } else {\r\n                                        Swal.fire({\r\n                                            icon: 'error',\r\n                                            title:this.translate.instant('pf.transaction.not.completed'),\r\n                                            confirmButtonText: this.translate.instant('pf.ok'),\r\n                                            buttonsStyling: false,\r\n                                            customClass: {\r\n                                                confirmButton: 'btn btn-dark'\r\n                                            },\r\n                                            text: err.error.localizedMessage\r\n                                        })\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        );\r\n            },\r\n        })\r\n    }\r\n\r\n\r\n    refundTransaction(detail: PfTransactionsHistoryBaseResponse) {\r\n        if (!this.appConfig.isApiAllowed(this.userService.pfTransactionRefundUrl)) {\r\n            this.pfSwallMessage();\r\n            return\r\n        }\r\n        this.detailOrderNo = detail.orderId;\r\n        this.detailOrderDate = detail.orderDate;\r\n        this.detailOrderTime = detail.orderTime;\r\n        this.detailNetOrderAmount = detail.netOrderAmount;\r\n        this.detailCurrency = detail.currency;\r\n        Swal.fire({\r\n            cancelButtonText:this.translate.instant('pf.give.up'),\r\n            confirmButtonText:this.translate.instant('pf.continue'),\r\n            buttonsStyling: false,\r\n            customClass: {\r\n                confirmButton: 'btn btn-dark mr-sm-2',\r\n                cancelButton: 'btn btn-secondary mr-sm-2',\r\n            },\r\n            reverseButtons: true,\r\n            showCancelButton: true,\r\n            width: 600,\r\n            html:\r\n                '<div class=\"modal-header\" style=\"padding:1rem 0;\">' +\r\n                '<h4 class=\"modal-title\">'+this.translate.instant('pf.transaction.refund.popup.header')+'</h4>' +\r\n                '</div><br><p class=\"text-justify\">'+this.translate.instant('pf.transaction.refund.popup.detail1')+'</p><br>' +\r\n                '<div class=\"container\">' +\r\n                '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 1rem;\">'+this.translate.instant('pf.lower.order.number')+': </p> <p class=\"col-right\">' + this.detailOrderNo + '</p></div>' +\r\n                '<div class=\"row\"> <p class=\"text-justify\"style=\"margin-right: 51px;\">'+this.translate.instant('pf.order.date')+': </p> <p class=\"col-right\">' + this.detailOrderDate + ' ' + this.detailOrderTime + '</p></div>' +\r\n                '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 4rem;\">'+this.translate.instant('pf.transaction.amount')+': </p> <p class=\"col-right\">' + this.detailNetOrderAmount.toLocaleString('tr-TR', {minimumFractionDigits: 2}) + ' ' + this.detailCurrency + '</p></div>' +\r\n                '<div class=\"row\"><p class=\"text-justify\">'+this.translate.instant('pf.refund.amount')+': </p><input type=\"text\" id=\"refund\" class=\"form-control\" style=\"width: 30%;height: calc(12px + 0.75rem + 3px);margin-left: 70px\" placeholder=\"0,00 TL\"></div>' +\r\n                '</div>',\r\n            preConfirm: () => {\r\n                const refund = Swal.getPopup().querySelector('#refund') as HTMLInputElement;\r\n                this.refundAmount = parseFloat(refund.value.replace(',', '.'));\r\n                if (refund.value == \"\") {\r\n                    Swal.showValidationMessage(this.translate.instant('pf.not.refund.amount'))\r\n                    return\r\n                }\r\n                if (this.refundAmount > this.detailNetOrderAmount) {\r\n                    Swal.showValidationMessage(this.translate.instant('pf.cannot.greater.than.transaction.net.amount'))\r\n                    return\r\n                } else {\r\n                    Swal.fire({\r\n                        cancelButtonText: this.translate.instant('pf.give.up'),\r\n                        confirmButtonText: this.translate.instant('pf.continue'),\r\n                        buttonsStyling: false,\r\n                        customClass: {\r\n                            confirmButton: 'btn btn-dark mr-sm-2',\r\n                            cancelButton: 'btn btn-secondary mr-sm-2',\r\n                        },\r\n                        reverseButtons: true,\r\n                        showCancelButton: true,\r\n                        width: 600,\r\n                        html:\r\n                            '<div class=\"modal-header\" style=\"padding:1rem 0;\">' +\r\n                            '<h4 class=\"modal-title\">'+this.translate.instant('pf.transaction.refund.popup.header')+'</h4>' +\r\n                            '</div><br><p class=\"text-justify\">'+this.translate.instant('pf.transaction.refund.popup.detail2')+'</p><br>' +\r\n                            '<div class=\"container\">' +\r\n                            '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 1rem;\">'+this.translate.instant('pf.lower.order.number')+': </p> <p class=\"col-right\">' + this.detailOrderNo + '</p></div>' +\r\n                            '<div class=\"row\"> <p class=\"text-justify\"style=\"margin-right: 51px;\">'+this.translate.instant('pf.order.date')+':</p> <p class=\"col-right\">' + this.detailOrderDate + ' ' + this.detailOrderTime + '</p></div>' +\r\n                            '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 58px;\">'+this.translate.instant('pf.transaction.amount')+':</p> <p class=\"col-right\">' + this.detailNetOrderAmount.toLocaleString('tr-TR', {minimumFractionDigits: 2}) + ' ' + this.detailCurrency + '</p></div>' +\r\n                            '<div class=\"row\"><p class=\"text-justify\" style=\"margin-right: 68px;\">'+this.translate.instant('pf.refund.amount')+':  </p> <p class=\"col-right\">' + this.refundAmount.toLocaleString('tr-TR', {minimumFractionDigits: 2}) + ' ' + this.detailCurrency + '</p></div>' +\r\n\r\n                            '</div>',\r\n                        preConfirm: () => {\r\n                            this.userService.pfTransactionRefund(\r\n                                new PfTransactionRefund(this.selectedMerchant.merchantId,\r\n                                    detail.productMerchantCode,\r\n                                    detail.msisdn,\r\n                                    String(detail.referenceNumber),\r\n                                    detail.orderAmount,\r\n                                    detail.netOrderAmount,\r\n                                    this.refundAmount,\r\n                                    detail.currency)).subscribe(\r\n                                        (res) => {\r\n                                            if (res.status == 200) {\r\n                                                this.onPfHistoryLast(this.startDate, this.endDate, 1, null);\r\n                                                Swal.fire({\r\n                                                    icon: 'success',\r\n                                                    title: this.translate.instant('pf.transaction.completed'),\r\n                                                    confirmButtonText:  this.translate.instant('pf.ok'),\r\n                                                    buttonsStyling: false,\r\n                                                    customClass: {\r\n                                                        confirmButton: 'btn btn-dark'\r\n                                                    },\r\n                                                    text: res.body.responseDescription,\r\n                                                })\r\n                                            }\r\n\r\n                                            if (res.status === 403 || res.status === 401) {\r\n                                                   this.pfSwallMessage();\r\n                                            }\r\n                                        },\r\n                                        (err) => {\r\n                                            if (err instanceof HttpErrorResponse) {\r\n                                                if (err.status === 403 || err.status === 401) {\r\n                                                        this.pfSwallMessage();\r\n                                                } else {\r\n                                                    Swal.fire({\r\n                                                        icon: 'error',\r\n                                                        title:this.translate.instant('pf.transaction.not.completed'),\r\n                                                        confirmButtonText:  this.translate.instant('pf.ok'),\r\n                                                        buttonsStyling: false,\r\n                                                        customClass: {\r\n                                                            confirmButton: 'btn btn-dark'\r\n                                                        },\r\n                                                        text: err.error.localizedMessage\r\n                                                    })\r\n                                                }\r\n\r\n                                            }\r\n                                        }\r\n                                    );\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    openTransactionDetailModal(open: boolean): void {\r\n        this.isOpen = open;\r\n    }\r\n\r\n    transactionDetail(detail: PfTransactionsHistoryBaseResponse) {\r\n        this.detailOrderNo = detail.orderId;\r\n        this.detailOrderDate = detail.orderDate;\r\n        this.detailOrderTime = detail.orderTime;\r\n        this.detailOrderAmount = detail.orderAmount;\r\n        this.detailNetOrderAmount = detail.netOrderAmount;\r\n\r\n        if (detail.orderType == \"SALE\") {\r\n            this.detailOrderType = this.translate.instant('pf.sale')\r\n        }\r\n        if (detail.orderType == 'REVERSE') {\r\n            this.detailOrderType = this.translate.instant('pf.reverse')\r\n        }\r\n        if (detail.orderType == 'REFUND') {\r\n            this.detailOrderType = this.translate.instant('pf.refund')\r\n        }\r\n        if (detail.orderType == 'PREAUTH') {\r\n            this.detailOrderType =  this.translate.instant('pf.preauth')\r\n        }\r\n        if (detail.orderType == 'PREAUTH_REVERSE') {\r\n            this.detailOrderType =this.translate.instant('pf.preauth.reverse')\r\n        }\r\n        if (detail.orderType == 'POSTAUTH') {\r\n            this.detailOrderType = this.translate.instant('pf.postauth')\r\n        }\r\n        if (detail.orderType == 'POSTAUTH_REVERSE') {\r\n            this.detailOrderType = this.translate.instant('pf.postauth.reverse')\r\n        }\r\n        if (detail.orderStatus == \"SUCCESS\") {\r\n            this.detailOrderStatus = this.translate.instant('pf.success');\r\n        }\r\n        if (detail.orderStatus == 'FAIL') {\r\n            this.detailOrderStatus = this.translate.instant('pf.fail');\r\n        }\r\n        if (detail.orderStatus == 'UNKNOWN') {\r\n            this.detailOrderStatus = this.translate.instant('pf.processing');\r\n        }\r\n        if (detail.installmentType === 'NON_INSTALLMENT') {\r\n          this.modalInstallmentType = this.translate.instant('pf.non.installment');\r\n        }\r\n        if (detail.installmentType === 'WITH_INSTALLMENT') {\r\n          this.modalInstallmentType = this.translate.instant('pf.with.installment');\r\n        }\r\n        this.detailInstallmentCount = detail.installmentCount;\r\n        this.bankResponseCode = detail.bankResponseCode;\r\n        this.bankResponseCodeDesc = detail.bankResponseCodeDesc;\r\n        this.detailCurrency = detail.currency;\r\n        this.detailReferenceNumber = detail.referenceNumber;\r\n        this.detailAcquirerBankDesc = detail.acquirerBankDesc;\r\n        this.detailPaymentMethodType = detail.paymentMethodType;\r\n        this.detailIssuerBankCodeDesc = detail.issuerBankCodeDesc;\r\n    }\r\n    firmError = false;\r\n    isFirmModalOpen = false;\r\n\r\n    openFirmModal(open: boolean): void {\r\n        if (open) {\r\n            this.merchantFilters = null;\r\n            this.selectedMasterMerchant = null;\r\n            this.ll1Merchants = null;\r\n            this.selectedLl1Merchant = null;\r\n            this.ll2Merchants = null;\r\n            this.selectedLl2Merchant = null;\r\n            this.ll3Merchants = null;\r\n            this.selectedLl3Merchant = null;\r\n            this.getMerchantFilter();\r\n        } else {\r\n\r\n            if ((this.merchantFilters == null || this.merchantFilters.length < 1)\r\n                && this.selectedMasterMerchant) {\r\n                this.selectedMerchant = this.selectedMasterMerchant;\r\n            }\r\n\r\n            if (this.merchantFilters && this.merchantFilters.length > 0) {\r\n                if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\r\n                    this.selectedMerchant = this.merchantFilters[0];\r\n                }\r\n                if (this.selectedMasterMerchant) {\r\n                    this.selectedMerchant = this.selectedMasterMerchant;\r\n                }\r\n            }\r\n\r\n            if (this.ll1Merchants && this.ll1Merchants.length > 0) {\r\n                if (this.selectedLl1Merchant) {\r\n                    this.selectedMerchant = this.selectedLl1Merchant;\r\n                }\r\n            }\r\n\r\n            if (this.ll2Merchants && this.ll2Merchants.length > 0) {\r\n                if (this.selectedLl2Merchant) {\r\n                    this.selectedMerchant = this.selectedLl2Merchant;\r\n                }\r\n            }\r\n          if (this.ll3Merchants && this.ll3Merchants.length > 0) {\r\n            if (this.selectedLl3Merchant) {\r\n              this.selectedMerchant = this.selectedLl3Merchant;\r\n            }\r\n          }\r\n\r\n            if (!this.selectedMerchant) {\r\n                this.firmError = true;\r\n                this.messageService.addError(this.translate.instant('pf.choose.merchant'));\r\n                return;\r\n            }\r\n            else {\r\n                this.messageService.remove();\r\n            }\r\n        }\r\n        this.isFirmModalOpen = open;\r\n    }\r\n\r\n    selectedMerchant: Merchant;\r\n    merchantFilters: Merchant[];\r\n    selectedMasterMerchant: Merchant;\r\n    ll1Merchants: Merchant[];\r\n    selectedLl1Merchant: Merchant;\r\n    ll2Merchants: Merchant[];\r\n    selectedLl2Merchant: Merchant;\r\n    ll3Merchants: Merchant[];\r\n    selectedLl3Merchant: Merchant;\r\n\r\n    getMerchantFilter() {\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      if (merchant) {\r\n        this.merchantFilters = [];\r\n        this.merchantFilters.push(merchant);\r\n      }\r\n      /*  this.merchantService\r\n            .merchantFilter()\r\n            .subscribe(\r\n                (res) => {\r\n                    if (res.body && res.body.length > 0) {\r\n                        this.merchantFilters = res.body;\r\n                        this.cdr.detectChanges();\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );*/\r\n    }\r\n\r\n    onSelectedMasterMerchantChange() {\r\n        this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\r\n    }\r\n\r\n    getOnL1MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\r\n    }\r\n\r\n    getOnL2MerchantChange() {\r\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\r\n  }\r\n    getOnL3MerchantChange() {\r\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\r\n  }\r\n\r\n    getChildMerchants(merchantId, level) {\r\n        this.merchantService\r\n            .childMerchantList(merchantId)\r\n            .subscribe(\r\n                (res) => {\r\n                    this[level + 'Merchants'] = res.body;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/pf-history/pf-history.component.ts b/src/app/pages/full-pages/pf-history/pf-history.component.ts
--- a/src/app/pages/full-pages/pf-history/pf-history.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/pf-history/pf-history.component.ts	(date 1640606433078)
@@ -91,7 +91,9 @@
         this.isOne = true;
         this.past = moment(this.currentDate).subtract(1, 'day').format("YYYY-MM-DD");
         this.current = moment(this.currentDate).format("YYYY-MM-DD");
-        this.onPfHistory(null, 1, this.past, this.current, null, null, null, null, null)
+        const merchant = JSON.parse(localStorage.getItem('merchantName'));
+        const merchantId = merchant ? merchant.merchantId : null;
+        this.onPfHistory(merchantId, 1, this.past, this.current, null, null, null, null, null)
 
     }
 
Index: src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\nimport {UserService} from \"../../../services/user.service\";\nimport {MerchantService} from \"../../../services/merchant.service\";\nimport {MessageService} from \"../../../shared/services/message.service\";\nimport {NgxSpinnerService} from \"ngx-spinner\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport * as moment from \"moment\";\nimport {DatePipe} from \"@angular/common\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Merchant} from \"../../../models/merchant\";\nimport {DcbCollectionHistorySummaryResponse} from \"../../../models/response/dcb-collection-history-summary/dcb.collection.history.summary.response\";\nimport {DcbCollectionHistorySummaryBaseResponse} from \"../../../models/response/dcb-collection-history-summary/dcb.collection.history.summary.base.response\";\nimport {DcbCollectionHistorySummary} from \"../../../models/request/dcb.collection.history.summary\";\nimport Swal from \"sweetalert2\";\nimport {Error} from \"../../../models/response/error\";\nimport {MerchantId} from \"../../../models/request/merchant.id\";\n\n@Component({\n  selector: 'app-dcb-collection-summary',\n  templateUrl: './dcb-collection-summary.component.html',\n  styleUrls: ['./dcb-collection-summary.component.scss']\n})\nexport class DcbCollectionSummaryComponent implements OnInit {\n  dcbCollectionHistorySummaryResponse: DcbCollectionHistorySummaryResponse;\n  currentDate: Date = new Date();\n  current: any;\n  past: any;\n  isOne: boolean = false;\n  l1: string;\n  l2: string;\n  l3: UserMerchant;\n  isUserMerchantChild: boolean = false;\n  startDate: any;\n  endDate: any;\n  isNoDataToDisplay: boolean = false;\n  page = 1;\n  showTable: boolean = true;\n  collectionSize: number;\n  pageSize: number;\n  isPermission: boolean = false;\n  dcbCollectionHistory: DcbCollectionHistorySummary;\n  dcbCollections: DcbCollectionHistorySummaryBaseResponse[];\n  numberOfPage:number;\n  error:Error;\n  localizedMessage:string;\n\n\n  constructor(private userService: UserService, private cdr: ChangeDetectorRef,\n              private merchantService: MerchantService,\n              private messageService: MessageService,\n              private spinner: NgxSpinnerService,\n              public translate: TranslateService) {\n\n  }\n\n  ngOnInit(): void {\n    this.isOne = true;\n    this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\n    this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\n    this.onDcbCollectionHistorySummary(null, 1, this.past, this.current)\n\n  }\n\n  closeFix(event, datePicker) {\n    if (event.target.offsetParent == null)\n      datePicker.close();\n    else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\n      datePicker.close();\n  }\n\n  dateDiff(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    var timeDiff = Math.abs(end.getTime() - start.getTime());\n    var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return diffDays;\n  }\n  dateDiffIsBig(startDate, endDate) {\n    var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    if (start.getTime() > end.getTime()) {\n      return true\n    } else {\n      return false\n    }\n\n  }\n\n  dateObjToDate(vDate) {\n    const datepipe: DatePipe = new DatePipe('tr-EN')\n    var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\n    let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\n    return sDate;\n  }\n  convertIdList (merchantList : Merchant[]) {\n    let merchantIdList : MerchantId[] = [];\n    for (let i = 0 ; i < merchantList.length ; i++){\n      let merchantId = new MerchantId(merchantList[i].merchantId);\n      merchantIdList.push(merchantId);\n    }\n    return merchantIdList;\n  }\n\n\n  onDcbCollectionHistorySummary(merchantId: MerchantId[], activePage: number, startDate: string, endDate: string) {\n    this.userService\n    .dcbCollectionHistorySummary(new DcbCollectionHistorySummary(merchantId,startDate, endDate,activePage))\n    .subscribe(\n      (res) => {\n        this.isPermission = true;\n        this.isUserMerchantChild = true;\n        this.showTable = false;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n          }\n          else if (err.status === 500) {\n            this.isPermission = true;\n            this.isUserMerchantChild = true;\n            this.showTable = false;\n            this.cdr.detectChanges();\n          }\n          this.cdr.detectChanges();\n        }\n      }\n    );\n  }\n\n  isHistoryValidation(startDate, endDate) {\n    if (!this.selectedMerchant) {\n      this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (startDate == null || endDate == null) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiffIsBig(startDate, endDate)) {\n      this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiff(startDate, endDate) > 7) {\n      this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n      return true;\n    }\n\n\n  }\n  downloadFile(data: Blob) {\n    var link = document.createElement('a');\n    link.href = window.URL.createObjectURL(data);\n    var fileName = \"Export.xlsx\";\n    link.download = fileName;\n    link.click();\n  }\n\n  onDcbCollectionExport(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n    this.dcbCollectionHistory = new DcbCollectionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      selectedPage)\n    this.spinner.show(\"spinner1\");\n    this.userService\n    .dcbCollectionHistorySummaryExport(this.dcbCollectionHistory).subscribe(\n      (response) => {\n        this.spinner.hide(\"spinner1\");\n        this.downloadFile(response);\n      },\n      async (err) => {\n        var result = JSON.parse(await err.error.text());\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: result.localizedMessage\n        })\n      });\n  }\n\n\n  onDcbCollectionHistorySummaryLast(startDate, endDate, selectedPage: number) {\n    if (!this.isHistoryValidation(startDate, endDate)) {\n      return\n    }\n\n    this.page = selectedPage ?? 1;\n\n    this.dcbCollectionHistory = new DcbCollectionHistorySummary(\n      this.convertIdList(this.selectedMerchant),\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.page,\n    )\n\n    this.userService\n    .dcbCollectionHistorySummary(this.dcbCollectionHistory).subscribe(\n      (res) => {\n        if(res != null && res.collections != null) {\n          this.dcbCollectionHistorySummaryResponse = res;\n          this.dcbCollections = this.dcbCollectionHistorySummaryResponse.collections;\n\n          if (this.dcbCollections == null) {\n            this.isPermission = false;\n          }\n          if (this.dcbCollections.length < 1) {\n            this.showTable = false;\n            this.isNoDataToDisplay = true;\n          }\n          if (this.dcbCollections.length >= 1) {\n            this.showTable = true;\n            this.isNoDataToDisplay = false;\n          }\n          this.cdr.detectChanges();\n          this.numberOfPage = this.dcbCollectionHistorySummaryResponse.numberOfPage;\n          this.collectionSize = res.totalCount;\n          this.pageSize = res.pageSize;\n        }\n      },\n      async(err) => {\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: err.error.localizedMessage\n        })\n        this.showTable = false;\n      });\n  }\n\n  loadPage(page: number) {\n    this.onDcbCollectionHistorySummaryLast(this.startDate, this.endDate, page)\n  }\n\n  firmError = false;\n  isFirmModalOpen = false;\n\n  openFirmModal(open: boolean): void {\n    if (open) {\n      this.merchantFilters = null;\n      this.selectedMasterMerchant = null;\n      this.ll1Merchants = null;\n      this.selectedLl1Merchant = null;\n      this.ll2Merchants = null;\n      this.selectedLl2Merchant = null;\n      this.ll3Merchants = null;\n      this.selectedLl3Merchant = null;\n      this.getMerchantFilter();\n    } else {\n      this.selectedMerchant = [];\n      if ((this.merchantFilters == null || this.merchantFilters.length < 1)\n        && this.selectedMasterMerchant) {\n        this.selectedMerchant.push(this.selectedMasterMerchant);\n      }\n\n      if (this.merchantFilters && this.merchantFilters.length > 0) {\n        if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\n          this.selectedMerchant.push(this.merchantFilters[0]);\n        }\n        if (this.selectedMasterMerchant) {\n          this.selectedMerchant.push(this.selectedMasterMerchant);\n        }\n      }\n\n      if (this.ll1Merchants && this.ll1Merchants.length > 0) {\n        if (this.selectedLl1Merchant) {\n          this.selectedMerchant.push(this.selectedLl1Merchant);\n        }\n      }\n\n      if (this.ll2Merchants && this.ll2Merchants.length > 0) {\n        if (this.selectedLl2Merchant) {\n          this.selectedMerchant.push(this.selectedLl2Merchant);\n        }\n      }\n\n      if (this.ll3Merchants && this.ll3Merchants.length > 0) {\n        if (this.selectedLl3Merchant) {\n          this.selectedMerchant.push(this.selectedLl3Merchant);\n        }\n      }\n      this.selectedMerchants = this.selectedMerchant.reverse()\n      this.lastSelectedMerchant = this.selectedMerchants[0]\n      if (!this.selectedMerchant) {\n        this.firmError = true;\n        this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\n        return;\n      }\n      else {\n        this.messageService.remove();\n      }\n    }\n    this.isFirmModalOpen = open;\n  }\n\n  selectedMerchant: Merchant[];\n  merchantFilters: Merchant[];\n  selectedMasterMerchant: Merchant;\n  ll1Merchants: Merchant[];\n  selectedLl1Merchant: Merchant;\n  ll2Merchants: Merchant[];\n  selectedLl2Merchant: Merchant;\n  ll3Merchants: Merchant[];\n  selectedLl3Merchant: Merchant;\n  selectedMerchants: Merchant[];\n  lastSelectedMerchant: Merchant;\n\n  getMerchantFilter() {\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    if (merchant) {\n      this.merchantFilters = [];\n      this.merchantFilters.push(merchant);\n    }\n    /*this.merchantService\n    .merchantFilter()\n    .subscribe(\n      (res) => {\n        if (res.body && res.body.length > 0) {\n          this.merchantFilters = res.body;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );*/\n  }\n\n  onSelectedMasterMerchantChange() {\n    this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\n  }\n\n  getOnL1MerchantChange() {\n    this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\n  }\n\n  getOnL2MerchantChange() {\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\n  }\n\n  getOnL3MerchantChange() {\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\n  }\n\n  getChildMerchants(merchantId, level) {\n    this.merchantService\n    .childMerchantList(merchantId)\n    .subscribe(\n      (res) => {\n        this[level + 'Merchants'] = res.body;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );\n  }\n}\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts b/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts
--- a/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/dcb-collection-summary/dcb-collection-summary.component.ts	(date 1640608444290)
@@ -58,7 +58,12 @@
     this.isOne = true;
     this.past = moment(this.currentDate).subtract(1, 'day').format("YYYY-MM-DD");
     this.current = moment(this.currentDate).format("YYYY-MM-DD");
-    this.onDcbCollectionHistorySummary(null, 1, this.past, this.current)
+    const merchant = JSON.parse(localStorage.getItem('merchantName'));
+    const merchantIds = [];
+    merchantIds.push({
+      merchantId: merchant ? merchant.merchantId : null
+    });
+    this.onDcbCollectionHistorySummary(merchantIds, 1, this.past, this.current)
 
   }
 
Index: src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, QueryList, ViewChild, ViewChildren, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport * as moment from \"moment\";\r\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\r\nimport {Merchant} from \"../../../models/merchant\";\r\nimport {MerchantService} from \"../../../services/merchant.service\";\r\nimport {MessageService} from \"../../../shared/services/message.service\";\r\nimport {NgxSpinnerService} from \"ngx-spinner\";\r\nimport {DatePipe} from '@angular/common';\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport {DcbCollectionHistory} from \"../../../models/request/dcb.collection.history\";\r\nimport {DcbCollectionHistoryResponse} from \"../../../models/response/user-dcb-collection-history/dcb.collection.history.response\";\r\nimport {DcbCollectionHistoryOrderResponse} from \"../../../models/response/user-dcb-collection-history/dcb.collection.history.order.response\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Error} from \"../../../models/response/error\";\r\nimport {MerchantId} from \"../../../models/request/merchant.id\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-dcb-collection',\r\n    templateUrl: './dcb-collection.component.html',\r\n    styleUrls: ['./dcb-collection.component.scss']\r\n})\r\nexport class DcbCollectionComponent implements OnInit {\r\n    orderNo: string;\r\n    selectedFundingSourceType: string;\r\n    selectedOrderType: string;\r\n    dcbCollectionHistoryResponse: DcbCollectionHistoryResponse;\r\n    currentDate: Date = new Date();\r\n    current: any;\r\n    past: any;\r\n    isOpen: boolean = false;\r\n    detailOrderNo: number;\r\n    detailOrderDate: string;\r\n    detailOrderType: string;\r\n    orderType: string;\r\n    bankResponseCodeDesc: string;\r\n    isOne: boolean = false;\r\n    l1: string;\r\n    l2: string;\r\n    l3: UserMerchant;\r\n    isUserMerchantChild: boolean = false;\r\n    startDate: any;\r\n    endDate: any;\r\n    isNoDataToDisplay: boolean = false;\r\n    pfFilter: number;\r\n    page = 1;\r\n    showTable: boolean = true;\r\n    collectionSize: number;\r\n    isPermission: boolean = false;\r\n    dcbCollectionHistory: DcbCollectionHistory;\r\n    dcbOrders:DcbCollectionHistoryOrderResponse[];\r\n    detailDcbMerchantName:string;\r\n    detailDcbSubMerchantName:string;\r\n    detailDcbServiceName:string;\r\n    detailMerchantPaymentDate: string;\r\n    detailTransactionAmount:number;\r\n    detailCommissionAmount:number;\r\n    detailCommissionRate:number;\r\n    detailTransactionId:string;\r\n    detailFundingSourceType:string;\r\n    detailPaymentType:string;\r\n    detailPaymentStatus:string;\r\n    detailParam1:string;\r\n    detailParam2:string;\r\n    detailParam3:string;\r\n    numberOfPage:number;\r\n    pageSize: number;\r\n    error:Error;\r\n    localizedMessage:string;\r\n\r\n\r\n    constructor(private userService: UserService, private cdr: ChangeDetectorRef,\r\n        private merchantService: MerchantService,\r\n        private messageService: MessageService,\r\n        private spinner: NgxSpinnerService,\r\n                public translate: TranslateService) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isOne = true;\r\n        this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\r\n        this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\r\n        this.onDcbCollectionHistory(null,  this.past, this.current, null, null, null,1)\r\n    }\r\n\r\n    closeFix(event, datePicker) {\r\n        if (event.target.offsetParent == null)\r\n            datePicker.close();\r\n        else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\r\n            datePicker.close();\r\n    }\r\n\r\n    dateDiff(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        var timeDiff = Math.abs(end.getTime() - start.getTime());\r\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n        return diffDays;\r\n    }\r\n    dateDiffIsBig(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        if (start.getTime() > end.getTime()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    dateObjToDate(vDate) {\r\n        const datepipe: DatePipe = new DatePipe('tr-EN')\r\n        var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\r\n        let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\r\n        return sDate;\r\n    }\r\n\r\n    convertIdList (merchantList : Merchant[]) {\r\n      let merchantIdList : MerchantId[] = [];\r\n      for (let i = 0 ; i < merchantList.length ; i++){\r\n        let merchantId = new MerchantId(merchantList[i].merchantId);\r\n        merchantIdList.push(merchantId);\r\n        }\r\n      return merchantIdList;\r\n    }\r\n\r\n\r\n  fundingSourceType = [\r\n        {id: 1, name: 'Mobil Ödeme', orginalName: 'MOBIL ODEME'},\r\n        {id: 2, name: 'Hediye Para', orginalName: 'HEDIYE PARA'},\r\n  ];\r\n\r\n    orderTypes = [\r\n        {id: 1, name: 'Satış', orginalName: 'SATIS'},\r\n        {id: 2, name: 'İade', orginalName: 'IADE'},\r\n    ];\r\n\r\n  onDcbCollectionHistory(merchantId: MerchantId[], startDate: string, endDate: string, orderId: string, fundingSourceType:string, orderType: string, activePage:number) {\r\n        this.userService\r\n            .dcbCollectionHistory(new DcbCollectionHistory(merchantId, startDate, endDate, orderId, fundingSourceType,orderType,activePage))\r\n            .subscribe(\r\n                (res) => {\r\n                    this.isPermission = true;\r\n                    this.isUserMerchantChild = true;\r\n                    this.showTable = false;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                  if (err instanceof HttpErrorResponse) {\r\n                        if (err.status === 403) {\r\n                          this.isPermission = false;\r\n                        }\r\n                     else if (err.status === 500) {\r\n                          this.isPermission = true;\r\n                          this.isUserMerchantChild = true;\r\n                          this.showTable = false;\r\n                          this.cdr.detectChanges();\r\n                      }\r\n                      this.cdr.detectChanges();\r\n                    }\r\n                });\r\n  }\r\n\r\n    isHistoryValidation(startDate, endDate, selectedPage: number) {\r\n        if (!this.selectedMerchant) {\r\n            this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (startDate == null || endDate == null) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiffIsBig(startDate, endDate)) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiff(startDate, endDate) > 7) {\r\n            this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n            return true;\r\n        }\r\n\r\n\r\n    }\r\n    downloadFile(data: Blob) {\r\n        var link = document.createElement('a');\r\n        link.href = window.URL.createObjectURL(data);\r\n        var fileName = \"Export.xlsx\";\r\n        link.download = fileName;\r\n        link.click();\r\n    }\r\n\r\n    onDcbCollectionExport(startDate, endDate, selectedPage: number) {\r\n        if (!this.isHistoryValidation(startDate, endDate, selectedPage)) {\r\n            return\r\n        }\r\n        this.dcbCollectionHistory = new DcbCollectionHistory(\r\n          this.convertIdList(this.selectedMerchant),\r\n          this.dateObjToDate(startDate),\r\n          this.dateObjToDate(endDate),\r\n          this.orderNo,\r\n          this.selectedFundingSourceType,\r\n          this.selectedOrderType,\r\n          selectedPage)\r\n        this.spinner.show(\"spinner1\");\r\n        this.userService\r\n            .dcbCollectionHistoryExport(this.dcbCollectionHistory).subscribe(\r\n                (response) => {\r\n                    this.spinner.hide(\"spinner1\");\r\n                    this.downloadFile(response);\r\n                },\r\n          async (err) => {\r\n            var result = JSON.parse(await err.error.text());\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'İşleminiz yapılamadı! ',\r\n              confirmButtonText: 'Tamam',\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: result.localizedMessage\r\n            })\r\n          });\r\n    }\r\n\r\n\r\n    onDcbCollectionHistoryLast(startDate, endDate, selectedPage: number) {\r\n        if (!this.isHistoryValidation(startDate, endDate, selectedPage)) {\r\n            return\r\n        }\r\n\r\n        this.page = selectedPage ?? 1;\r\n\r\n        this.dcbCollectionHistory = new DcbCollectionHistory(\r\n            this.convertIdList(this.selectedMerchant),\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderNo,\r\n            this.selectedFundingSourceType,\r\n          this.selectedOrderType,\r\n          this.page,\r\n        )\r\n\r\n        this.userService\r\n            .dcbCollectionHistory(this.dcbCollectionHistory).subscribe(\r\n                (res) => {\r\n                  if(res != null && res.orders != null) {\r\n                    this.dcbCollectionHistoryResponse = res;\r\n                    console.log(this.dcbCollectionHistoryResponse)\r\n                    this.dcbOrders = this.dcbCollectionHistoryResponse.orders;\r\n\r\n                    if (this.dcbOrders == null) {\r\n                      this.isPermission = false;\r\n                    }\r\n                    if (this.dcbOrders.length < 1) {\r\n                      this.showTable = false;\r\n                      this.isNoDataToDisplay = true;\r\n                    }\r\n                    if (this.dcbOrders.length >= 1) {\r\n                      this.showTable = true;\r\n                      this.isNoDataToDisplay = false;\r\n                    }\r\n                    this.cdr.detectChanges();\r\n                    this.numberOfPage = this.dcbCollectionHistoryResponse.numberOfPage;\r\n                    this.collectionSize = res.totalCount;\r\n                    this.pageSize = res.pageSize;\r\n                  }\r\n                },\r\n          async (err) => {\r\n                  Swal.fire({\r\n              icon: 'error',\r\n              title: 'İşleminiz yapılamadı! ',\r\n              confirmButtonText: 'Tamam',\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: err.error.localizedMessage\r\n            })\r\n             this.showTable = false;\r\n                });\r\n    }\r\n\r\n\r\n    loadPage(page: number) {\r\n        this.onDcbCollectionHistoryLast(this.startDate, this.endDate, page)\r\n    }\r\n\r\n\r\n    openTransactionDetailModal(open: boolean): void {\r\n        this.isOpen = open;\r\n    }\r\n\r\n    transactionDetail(detail: DcbCollectionHistoryOrderResponse) {\r\n        this.detailDcbMerchantName = detail.dcbMerchantName\r\n        this.detailDcbSubMerchantName = detail.dcbSubMerchantName\r\n        this.detailDcbServiceName = detail.dcbServiceName\r\n        this.detailOrderNo = detail.orderId;\r\n        this.detailTransactionId = detail.transactionId\r\n        if (detail.orderType == \"SATIS\") {\r\n        this.detailOrderType = this.translate.instant('dcb.sale')\r\n        }\r\n       if (detail.orderType == 'IADE') {\r\n        this.detailOrderType = this.translate.instant('dcb.refund')\r\n       }\r\n\r\n       if(detail.fundingSourceType =='MOBIL ODEME'){\r\n         this.detailFundingSourceType = this.translate.instant('dcb.mobile.payment')\r\n       }\r\n\r\n      if(detail.fundingSourceType =='HEDIYE PARA'){\r\n        this.detailFundingSourceType = this.translate.instant('dcb.gift.money')\r\n      }\r\n      this.detailPaymentType = detail.paymentType\r\n      this.detailPaymentStatus = detail.paymentStatus\r\n      this.detailTransactionAmount = detail.transactionAmount\r\n      this.detailCommissionRate = detail.commissionRate\r\n      this.detailCommissionAmount = detail.commissionAmount\r\n\r\n      this.detailOrderDate = detail.orderDate\r\n      this.detailMerchantPaymentDate = detail.merchantPaymentDate\r\n      this.detailParam1 = detail.param1;\r\n      this.detailParam2 = detail.param2;\r\n      this.detailParam3 = detail.param3;\r\n\r\n    }\r\n    firmError = false;\r\n    isFirmModalOpen = false;\r\n\r\n    openFirmModal(open: boolean): void {\r\n        if (open) {\r\n            this.merchantFilters = null;\r\n            this.selectedMasterMerchant = null;\r\n            this.ll1Merchants = null;\r\n            this.selectedLl1Merchant = null;\r\n            this.ll2Merchants = null;\r\n            this.selectedLl2Merchant = null;\r\n            this.ll3Merchants = null;\r\n            this.selectedLl3Merchant = null;\r\n            this.getMerchantFilter();\r\n        } else {\r\n            this.selectedMerchant = [];\r\n            if ((this.merchantFilters == null || this.merchantFilters.length < 1)\r\n                && this.selectedMasterMerchant) {\r\n                this.selectedMerchant.push(this.selectedMasterMerchant);\r\n            }\r\n\r\n            if (this.merchantFilters && this.merchantFilters.length > 0) {\r\n                if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\r\n                    this.selectedMerchant.push(this.merchantFilters[0]);\r\n                }\r\n                if (this.selectedMasterMerchant) {\r\n                    this.selectedMerchant.push(this.selectedMasterMerchant);\r\n                }\r\n            }\r\n            if (this.ll1Merchants && this.ll1Merchants.length > 0) {\r\n                if (this.selectedLl1Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl1Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll2Merchants && this.ll2Merchants.length > 0) {\r\n                if (this.selectedLl2Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl2Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll3Merchants && this.ll3Merchants.length > 0) {\r\n                 if (this.selectedLl3Merchant) {\r\n                   this.selectedMerchant.push(this.selectedLl3Merchant);\r\n\r\n            }\r\n          }\r\n            this.selectedMerchants = this.selectedMerchant.reverse()\r\n            this.lastSelectedMerchant = this.selectedMerchants[0]\r\n            if (!this.selectedMerchant) {\r\n                this.firmError = true;\r\n                this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n                return;\r\n            }\r\n            else {\r\n                this.messageService.remove();\r\n            }\r\n        }\r\n        this.isFirmModalOpen = open;\r\n    }\r\n\r\n    selectedMerchant: Merchant[];\r\n    merchantFilters: Merchant[];\r\n    selectedMasterMerchant: Merchant;\r\n    ll1Merchants: Merchant[];\r\n    selectedLl1Merchant: Merchant;\r\n    ll2Merchants: Merchant[];\r\n    selectedLl2Merchant: Merchant;\r\n    ll3Merchants: Merchant[];\r\n    selectedLl3Merchant: Merchant;\r\n    selectedMerchants: Merchant[];\r\n    lastSelectedMerchant: Merchant;\r\n\r\n    getMerchantFilter() {\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      if (merchant) {\r\n        this.merchantFilters = [];\r\n        this.merchantFilters.push(merchant);\r\n      }\r\n      /*  this.merchantService\r\n            .merchantFilter()\r\n            .subscribe(\r\n                (res) => {\r\n                    if (res.body && res.body.length > 0) {\r\n                        this.merchantFilters = res.body;\r\n                        this.cdr.detectChanges();\r\n                    }\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );*/\r\n    }\r\n\r\n    onSelectedMasterMerchantChange() {\r\n        this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\r\n    }\r\n\r\n    getOnL1MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\r\n    }\r\n\r\n    getOnL2MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\r\n    }\r\n\r\n    getOnL3MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\r\n   }\r\n\r\n    getChildMerchants(merchantId, level) {\r\n        this.merchantService\r\n            .childMerchantList(merchantId)\r\n            .subscribe(\r\n                (res) => {\r\n                    this[level + 'Merchants'] = res.body;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts b/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts
--- a/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/dcb-collection/dcb-collection.component.ts	(date 1640608376877)
@@ -83,7 +83,12 @@
         this.isOne = true;
         this.past = moment(this.currentDate).subtract(1, 'day').format("YYYY-MM-DD");
         this.current = moment(this.currentDate).format("YYYY-MM-DD");
-        this.onDcbCollectionHistory(null,  this.past, this.current, null, null, null,1)
+      const merchant = JSON.parse(localStorage.getItem('merchantName'));
+      const merchantIds = [];
+      merchantIds.push({
+        merchantId: merchant ? merchant.merchantId : null
+      });
+        this.onDcbCollectionHistory(merchantIds,  this.past, this.current, null, null, null,1)
     }
 
     closeFix(event, datePicker) {
Index: src/app/pages/full-pages/dcb-home/dcb-home.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component} from '@angular/core';\nimport {UserService} from \"../../../services/user.service\";\nimport * as moment from 'moment';\nimport {DatePipe} from '@angular/common';\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {\n  ApexAxisChartSeries,\n  ApexChart,\n  ApexDataLabels,\n  ApexFill,\n  ApexGrid,\n  ApexLegend,\n  ApexMarkers,\n  ApexNonAxisChartSeries,\n  ApexPlotOptions,\n  ApexResponsive,\n  ApexStroke,\n  ApexTheme,\n  ApexTitleSubtitle,\n  ApexTooltip,\n  ApexXAxis,\n  ApexYAxis\n} from \"ng-apexcharts\";\nimport * as Chartist from 'chartist';\nimport {ChartEvent, ChartType} from \"ng-chartist\";\nimport {AccountService} from \"../../../shared/auth/account.service\";\nimport {MerchantService} from \"../../../services/merchant.service\";\nimport {Merchant} from \"../../../models/merchant\";\nimport {MessageService} from \"../../../shared/services/message.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {DcbMain} from \"../../../models/response/dcb-transaction-summary/dcb.main\";\nimport {DcbTransactionsSummary} from \"../../../models/request/dcb.transactions.summary\";\nimport {Error} from \"../../../models/response/error\";\nimport Swal from \"sweetalert2\";\nimport {MerchantId} from \"../../../models/request/merchant.id\";\n\nexport interface Chart {\n  type: ChartType;\n  data: Chartist.IChartistData;\n  options?: any;\n  responsiveOptions?: any;\n  events?: ChartEvent;\n}\n\n\nexport type ChartOptions = {\n  series: ApexAxisChartSeries | ApexNonAxisChartSeries;\n  colors: string[],\n  chart: ApexChart;\n  xaxis: ApexXAxis;\n  yaxis: ApexYAxis | ApexYAxis[],\n  title: ApexTitleSubtitle;\n  dataLabels: ApexDataLabels,\n  stroke: ApexStroke,\n  grid: ApexGrid,\n  legend?: ApexLegend,\n  tooltip?: ApexTooltip,\n  plotOptions?: ApexPlotOptions,\n  labels?: string[],\n  fill: ApexFill,\n  markers?: ApexMarkers,\n  theme: ApexTheme,\n  responsive: ApexResponsive[]\n};\n\nvar $info = \"#2F8BE6\",\n  $info_light = \"#ACE0FC\"\nvar themeColors = [$info, $info_light];\n\n@Component({\n  selector: 'app-dcb-home',\n  templateUrl: './dcb-home.component.html',\n  styleUrls: ['./dcb-home.component.scss']\n})\nexport class DcbHomeComponent {\n\n  pfTransactions: DcbMain\n\n  successTotalCount = 0;\n  successTotalAmount = 0;\n  reverseTotalCount = 0;\n  reverseTotalAmount = 0;\n\n  successSaleByCount: number[] = [];\n  successSaleByDate: string [] = [];\n  successSaleByAmount: number[] = [];\n  reverseSaleCount: number[] = [];\n  reverseSaleCountByDate: string [] = [];\n  failSaleCountLast: number[] = [];\n  failSaleCountByDateLast: string [] = [];\n  successSaleByAmountDate: string [] = [];\n  reverseSaleAmount: number[] = [];\n  reverseCountByDate: string [] = [];\n  reverseCountLast: number[] = [];\n  reverseCountByDateLast: string [] = [];\n  isOpen: boolean = false;\n  currentDate: Date = new Date();\n  merchantId: string;\n  current: any;\n  past: any;\n  startD: Date;\n  endD: Date;\n  submitted: boolean = false;\n  isPermission: boolean = false;\n  maxDate: any;\n  DcbTransSummary: DcbTransactionsSummary;\n  chartData = false;\n  isSuccessSaleCountNoData: boolean = false;\n  isSuccessSaleAmountNoData: boolean = false;\n  isFailSaleCountNoData: boolean = false;\n  isReverseRefundSaleCountNoData: boolean = false;\n//********************************\n  columnChartOptions: Partial<ChartOptions>;\n  columnChartOptions2: Partial<ChartOptions>;\n  columnChartOptions3: Partial<ChartOptions>;\n  columnChartOptions4: Partial<ChartOptions>;\n  error:Error;\n  localizedMessage:string;\n\n\n\n  constructor(private userService: UserService,\n              private cdr: ChangeDetectorRef,\n              private accountService: AccountService,\n              private merchantService: MerchantService,\n              private messageService: MessageService,\n              public translate: TranslateService\n  ) {\n    this.columnChartOptions = {\n      chart: {\n        height: 350,\n        type: 'bar',\n        toolbar: {\n          show: false\n        },\n        animations: {\n          enabled: false\n        }\n      },\n      colors: themeColors,\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: '25%',\n        },\n      },\n      grid: {\n        borderColor: \"#BDBDBD44\"\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      series: [{\n        name: this.translate.instant('home-page.count'),\n        data: this.successSaleByCount\n      }],\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: this.successSaleByDate,\n        axisBorder: {\n          color: \"#BDBDBD44\"\n        }\n      },\n      yaxis: {\n        forceNiceScale: true,\n        decimalsInFloat: 0\n      },\n      tooltip: {\n        y: {\n          formatter: function (val) {\n            return val + \"\"\n          }\n        }\n      }\n    },\n      this.columnChartOptions2 = {\n        chart: {\n          height: 350,\n          type: 'bar',\n          toolbar: {\n            show: false\n          },\n          animations: {\n            enabled: false\n          }\n        },\n        colors: themeColors,\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '25%',\n          },\n        },\n        grid: {\n          borderColor: \"#BDBDBD44\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        series: [{\n          name: this.translate.instant('home-page.total.amount'),\n          data: this.successSaleByAmount\n        }],\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: this.successSaleByAmountDate,\n          axisBorder: {\n            color: \"#BDBDBD44\"\n          }\n        },\n        yaxis: {\n          forceNiceScale: true,\n          decimalsInFloat: 2\n        },\n        tooltip: {\n          y: {\n            formatter: function formatMyMoney(price) {\n              let currency_symbol = \"₺\"\n              let formattedOutput = new Intl.NumberFormat('tr-TR', {\n                style: 'currency',\n                currency: 'TRY',\n                minimumFractionDigits: 2,\n              });\n              return formattedOutput.format(price).replace(currency_symbol, '')\n            }\n          }\n        }\n      },\n      this.columnChartOptions3 = {\n        chart: {\n          height: 350,\n          type: 'bar',\n          toolbar: {\n            show: false\n          },\n          animations: {\n            enabled: false\n          }\n        },\n        colors: themeColors,\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '25%',\n          },\n        },\n        grid: {\n          borderColor: \"#BDBDBD44\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        series: [{\n          name: this.translate.instant('home-page.count'),\n          data: this.reverseSaleCount\n        }],\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: this.reverseSaleCountByDate,\n          axisBorder: {\n            color: \"#BDBDBD44\"\n          }\n        },\n        yaxis: {\n          forceNiceScale: true,\n          decimalsInFloat: 0\n        },\n        tooltip: {\n          y: {\n            formatter: function (val) {\n              return val + \"\"\n            }\n          }\n        }\n      },\n      this.columnChartOptions4 = {\n        chart: {\n          height: 350,\n          type: 'bar',\n          toolbar: {\n            show: false\n          },\n          animations: {\n            enabled: false\n          }\n        },\n        colors: themeColors,\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '25%',\n          },\n        },\n        grid: {\n          borderColor: \"#BDBDBD44\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        series: [{\n          name: this.translate.instant('home-page.total.amount'),\n          data: this.reverseSaleAmount\n        }],\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: this.reverseCountByDate,\n          axisBorder: {\n            color: \"#BDBDBD44\"\n          }\n        },\n        yaxis: {\n          showForNullSeries: false,\n          forceNiceScale: true,\n          decimalsInFloat: 0\n        },\n        tooltip: {\n          y: {\n            formatter: function formatMyMoney(price) {\n              let currency_symbol = \"₺\"\n              let formattedOutput = new Intl.NumberFormat('tr-TR', {\n                style: 'currency',\n                currency: 'TRY',\n                minimumFractionDigits: 2,\n              });\n              return formattedOutput.format(price).replace(currency_symbol, '')\n            }\n          }\n        }\n      }\n  }\n\n  ngOnInit(): void {\n    this.past = moment(this.currentDate).subtract(7, 'day').format(\"YYYY-MM-DD\");\n    this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\n    this.onUserDcbTransactionsSummaryFirst(this.past, this.current)\n\n  }\n\n  dateDiff(startDate, endDate) {\n    const start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    const end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    const timeDiff = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return diffDays;\n  }\n\n  dateDiffIsBig(startDate, endDate) {\n    const start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n    const end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n    if (start.getTime() > end.getTime()) {\n      return true\n    } else {\n      return false\n    }\n\n  }\n\n  dateObjToDate(vDate) {\n    const datepipe: DatePipe = new DatePipe('tr-EN')\n    const cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\n    const sDate = datepipe.transform(cDate, 'yyy-MM-dd');\n    return sDate;\n  }\n\n  convertIdList (merchantList : Merchant[]) {\n    let merchantIdList : MerchantId[] = [];\n    for (let i = 0 ; i < merchantList.length ; i++){\n      let merchantId = new MerchantId(merchantList[i].merchantId);\n      merchantIdList.push(merchantId);\n    }\n    return merchantIdList;\n  }\n\n  isMainValidation(startDate, endDate) {\n    if (startDate == null || endDate == null) {\n      this.messageService.addError(this.translate.instant('home-page.startDate.and.EndDate.must'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiffIsBig(startDate, endDate)) {\n      this.messageService.addError(this.translate.instant('home-page.startDate.cannot.greater.than.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n    }\n    if (this.dateDiff(startDate, endDate) > 7) {\n      this.messageService.addError(this.translate.instant('home-page.difference.between.startDate.and.endDate'));\n      return;\n    } else {\n      this.messageService.remove();\n      return true;\n    }\n\n\n  }\n\n  firmFail = false;\n\n  onUserDcbTransactionsSummary(startDate, endDate) {\n    if (!this.isMainValidation(startDate, endDate)) {\n      return\n    }\n    this.selectedMerchant = [];\n    if ((this.merchantFilters == null || this.merchantFilters.length < 1)\n      && this.selectedMasterMerchant) {\n      this.selectedMerchant.push(this.selectedMasterMerchant);\n    }\n\n    if (this.merchantFilters && this.merchantFilters.length > 0) {\n      if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\n        this.selectedMerchant.push(this.merchantFilters[0]);\n      }\n      if (this.selectedMasterMerchant) {\n        this.selectedMerchant.push(this.selectedMasterMerchant);\n      }\n    }\n\n    if (this.ll1Merchants && this.ll1Merchants.length > 0) {\n      if (this.selectedLl1Merchant) {\n        this.selectedMerchant.push(this.selectedLl1Merchant);\n      }\n    }\n\n    if (this.ll2Merchants && this.ll2Merchants.length > 0) {\n      if (this.selectedLl2Merchant) {\n        this.selectedMerchant.push(this.selectedLl2Merchant);\n      }\n    }\n\n    if (this.ll3Merchants && this.ll3Merchants.length > 0) {\n      if (this.selectedLl3Merchant) {\n        this.selectedMerchant.push(this.selectedLl3Merchant);\n      }\n    }\n\n    if (!this.selectedMerchant) {\n      this.firmFail = true;\n      this.messageService.addError(this.translate.instant('home-page.choose.company'));\n      return;\n    }\n\n    this.firmFail = false;\n    this.submitted = true;\n    this.chartData = false;\n    this.openModal(false);\n\n    this.DcbTransSummary = new DcbTransactionsSummary(\n      this.dateObjToDate(startDate),\n      this.dateObjToDate(endDate),\n      this.convertIdList(this.selectedMerchant));\n\n    this.userService.dcbTransactionsSummary(this.DcbTransSummary).subscribe(\n      (res) => {\n        if(res != null && res.body != null) {\n          this.pfTransactions = res.body;\n          this.TotalSummary()\n          this.SuccessSaleCount()\n          this.SuccessSaleAmount()\n          this.ReverseSaleCount(false)\n          this.ReverseSaleAmount(false)\n          this.chartData = true;\n          this.cdr.detectChanges();\n        }\n      },\n      async(err) => {\n        Swal.fire({\n          icon: 'error',\n          title: 'İşleminiz yapılamadı! ',\n          confirmButtonText: 'Tamam',\n          buttonsStyling: false,\n          customClass: {\n            confirmButton: 'btn btn-dark'\n          },\n          text: err.error.localizedMessage\n        })\n      });\n  }\n\n  onUserDcbTransactionsSummaryFirst(startDate, endDate) {\n    if (!this.isMainValidation(startDate, endDate)) {\n      return\n    }\n    this.chartData = false;\n\n    this.userService.dcbTransactionsSummary(new DcbTransactionsSummary(startDate, endDate, null))\n    .subscribe(\n      (res) => {\n          this.isPermission = true;\n        if(res != null && res.body != null) {\n          this.pfTransactions = res.body;\n          console.log(this.pfTransactions)\n          this.TotalSummary()\n          this.SuccessSaleCount()\n          this.SuccessSaleAmount()\n          this.ReverseSaleCount(true)\n          this.ReverseSaleAmount(true)\n          this.chartData = true;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 403) {\n            this.isPermission = false;\n          }\n          else if (err.status === 500) {\n            this.isPermission = true;\n            this.cdr.detectChanges();\n          }\n          this.cdr.detectChanges();\n        }\n      }\n    );\n  }\n\n  TotalSummary() {\n    this.successTotalCount = 0;\n    this.successTotalAmount = 0;\n    this.reverseTotalCount = 0;\n    this.reverseTotalAmount = 0;\n    if (null != this.pfTransactions.totalSummary && this.pfTransactions.totalSummary.length > 0) {\n      for (let i = 0; i < this.pfTransactions.totalSummary.length; i++) {\n        if (this.pfTransactions.totalSummary[i].type == \"SUCCESS\") {\n          this.successTotalCount = this.pfTransactions.totalSummary[i].totalCount\n          this.successTotalAmount = this.pfTransactions.totalSummary[i].totalAmount\n        } else if (this.pfTransactions.totalSummary[i].type == \"REVERSE\") {\n          this.reverseTotalCount = this.pfTransactions.totalSummary[i].totalCount\n          this.reverseTotalAmount = this.pfTransactions.totalSummary[i].totalAmount\n        }\n      }\n    }\n  }\n\n  SuccessSaleCount() {\n    this.clearArrayN(this.successSaleByCount);\n    this.clearArrayS(this.successSaleByDate);\n    if (null != this.pfTransactions.successSaleCount && this.pfTransactions.successSaleCount.length > 0) {\n      this.isSuccessSaleCountNoData = false;\n      for (let j = 0; j < this.pfTransactions.successSaleCount.length; j++) {\n        this.successSaleByCount.push(this.pfTransactions.successSaleCount[j].totalCount)\n        this.successSaleByDate.push(this.pfTransactions.successSaleCount[j].transactionDate)\n      }\n    } else {\n      this.isSuccessSaleCountNoData = true;\n    }\n  }\n\n  SuccessSaleAmount() {\n    this.clearArrayN(this.successSaleByAmount);\n    this.clearArrayS(this.successSaleByAmountDate);\n\n    if (null != this.pfTransactions.successSaleAmount && this.pfTransactions.successSaleAmount.length > 0) {\n      this.isSuccessSaleAmountNoData = false;\n      for (let i = 0; i < this.pfTransactions.successSaleAmount.length; i++) {\n        this.successSaleByAmount.push(this.pfTransactions.successSaleAmount[i].totalAmount)\n        this.successSaleByAmountDate.push(this.pfTransactions.successSaleAmount[i].transactionDate)\n      }\n\n    } else {\n      this.isSuccessSaleAmountNoData = true;\n    }\n  }\n\n  ReverseSaleCount(isFirst) {\n    this.clearArrayN(this.reverseSaleCount);\n    this.clearArrayS(this.reverseSaleCountByDate);\n    this.clearArrayN(this.failSaleCountLast);\n    this.clearArrayS(this.failSaleCountByDateLast);\n    if (null != this.pfTransactions.reverseSaleCount) {\n      this.isFailSaleCountNoData = false;\n      for (let j = 0; j < this.pfTransactions.reverseSaleCount.length; j++) {\n        this.reverseSaleCount.push(this.pfTransactions.reverseSaleCount[j].totalCount)\n        this.reverseSaleCountByDate.push(this.pfTransactions.reverseSaleCount[j].transactionDate)\n      }\n\n    }\n\n    if (null != this.pfTransactions.reverseSaleCount && this.pfTransactions.reverseSaleCount.length < 1) {\n      this.isFailSaleCountNoData = true;\n      if (isFirst) {\n        this.reverseSaleCount.push(0);\n        this.reverseSaleCountByDate.push('');\n      } else {\n        this.failSaleCountLast.push(0);\n        this.failSaleCountByDateLast.push('');\n      }\n    }\n  }\n\n  ReverseSaleAmount(isFirst) {\n    this.clearArrayN(this.reverseSaleAmount);\n    this.clearArrayS(this.reverseCountByDate);\n    this.clearArrayN(this.reverseCountLast);\n    this.clearArrayS(this.reverseCountByDateLast);\n\n    if (null != this.pfTransactions.reverseSaleAmount && this.pfTransactions.reverseSaleAmount.length > 0) {\n      this.isReverseRefundSaleCountNoData = false;\n      for (let j = 0; j < this.pfTransactions.reverseSaleAmount.length; j++) {\n        this.reverseSaleAmount.push(this.pfTransactions.reverseSaleAmount[j].totalAmount)\n        this.reverseCountByDate.push(this.pfTransactions.reverseSaleAmount[j].transactionDate)\n      }\n    }\n    if (null != this.pfTransactions.reverseSaleAmount && this.pfTransactions.reverseSaleAmount.length < 1) {\n      this.isReverseRefundSaleCountNoData = true;\n      if (isFirst) {\n        this.reverseSaleAmount.push(0)\n        this.reverseCountByDate.push('')\n      } else {\n        this.reverseCountLast.push(0);\n        this.reverseCountByDateLast.push('');\n      }\n    }\n  }\n\n  clearArrayN(arr: number[]) {\n    for (let j = 0; j < arr.length; j++) {\n      arr.pop();\n    }\n    arr.length = 0;\n  }\n\n  clearArrayS(arr: string[]) {\n    for (let j = 0; j < arr.length; j++) {\n      arr.pop();\n    }\n    arr.length = 0;\n  }\n\n  openModal(open: boolean): void {\n    if (open) {\n      this.merchantFilters = null;\n      this.selectedMasterMerchant = null;\n      this.ll1Merchants = null;\n      this.selectedLl1Merchant = null;\n      this.ll2Merchants = null;\n      this.selectedLl2Merchant = null;\n      this.ll3Merchants = null;\n      this.selectedLl3Merchant = null;\n      this.getMerchantFilter();\n    }\n    this.isOpen = open;\n  }\n\n  merchantFilters: Merchant[];\n  selectedMasterMerchant: Merchant;\n  ll1Merchants: Merchant[];\n  selectedLl1Merchant: Merchant;\n  ll2Merchants: Merchant[];\n  selectedLl2Merchant: Merchant;\n  ll3Merchants: Merchant[];\n  selectedLl3Merchant: Merchant;\n  selectedMerchant: Merchant[];\n\n  getMerchantFilter() {\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    if (merchant) {\n      this.merchantFilters = [];\n      this.merchantFilters.push(merchant);\n    }\n   /* this.merchantService\n    .merchantFilter()\n    .subscribe(\n      (res) => {\n        if (res.body && res.body.length > 0) {\n          this.merchantFilters = res.body;\n          this.cdr.detectChanges();\n        }\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );*/\n  }\n\n  onSelectedMasterMerchantChange() {\n    this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\n  }\n\n  getOnL1MerchantChange() {\n    this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\n  }\n\n  getOnL2MerchantChange() {\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\n  }\n\n  getOnL3MerchantChange() {\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\n  }\n\n  getChildMerchants(merchantId, level) {\n    this.merchantService\n    .childMerchantList(merchantId)\n    .subscribe(\n      (res) => {\n        this[level + 'Merchants'] = res.body;\n        this.cdr.detectChanges();\n      },\n      (err) => {\n        this.messageService.addHttpError({\n          httpErrorResponse: err,\n          defaultMessage: null\n        });\n      }\n    );\n  }\n\n  getModalHeight() {\n    if (!(this.merchantFilters && this.merchantFilters.length > 0)) {\n      return '400px';\n    }\n\n    if (!(this.ll1Merchants && this.ll1Merchants.length > 0)) {\n      return '520px';\n    }\n\n    if (!(this.ll2Merchants && this.ll2Merchants.length > 0)) {\n      return '600px';\n    }\n\n    return '630px';\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-home/dcb-home.component.ts b/src/app/pages/full-pages/dcb-home/dcb-home.component.ts
--- a/src/app/pages/full-pages/dcb-home/dcb-home.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/dcb-home/dcb-home.component.ts	(date 1640608224300)
@@ -510,8 +510,13 @@
       return
     }
     this.chartData = false;
+    const merchant = JSON.parse(localStorage.getItem('merchantName'));
+    const merchantIds = [];
+    merchantIds.push({
+      merchantId: merchant ? merchant.merchantId : null
+    });
 
-    this.userService.dcbTransactionsSummary(new DcbTransactionsSummary(startDate, endDate, null))
+    this.userService.dcbTransactionsSummary(new DcbTransactionsSummary(startDate, endDate, merchantIds))
     .subscribe(
       (res) => {
           this.isPermission = true;
Index: src/app/pages/full-pages/pf-home/pf-home.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component} from '@angular/core';\nimport {UserService} from \"../../../services/user.service\";\nimport {PfMain} from \"../../../models/response/user-pf-transactions-summary/pf.main\";\nimport * as moment from 'moment';\nimport {DatePipe} from '@angular/common';\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {\n  ApexAxisChartSeries,\n  ApexChart,\n  ApexDataLabels,\n  ApexFill,\n  ApexGrid,\n  ApexLegend,\n  ApexMarkers,\n  ApexNonAxisChartSeries,\n  ApexPlotOptions,\n  ApexResponsive,\n  ApexStroke,\n  ApexTheme,\n  ApexTitleSubtitle,\n  ApexTooltip,\n  ApexXAxis,\n  ApexYAxis\n} from \"ng-apexcharts\";\nimport * as Chartist from 'chartist';\nimport {ChartEvent, ChartType} from \"ng-chartist\";\nimport {PfTransactionsSummary} from \"../../../models/request/pf.transactions.summary\";\nimport {AccountService} from \"../../../shared/auth/account.service\";\nimport {MerchantService} from \"../../../services/merchant.service\";\nimport {Merchant} from \"../../../models/merchant\";\nimport {MessageService} from \"../../../shared/services/message.service\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\nexport interface Chart {\n  type: ChartType;\n  data: Chartist.IChartistData;\n  options?: any;\n  responsiveOptions?: any;\n  events?: ChartEvent;\n  // plugins?: any;\n}\n\n\nexport type ChartOptions = {\n  series: ApexAxisChartSeries | ApexNonAxisChartSeries;\n  colors: string[],\n  chart: ApexChart;\n  xaxis: ApexXAxis;\n  yaxis: ApexYAxis | ApexYAxis[],\n  title: ApexTitleSubtitle;\n  dataLabels: ApexDataLabels,\n  stroke: ApexStroke,\n  grid: ApexGrid,\n  legend?: ApexLegend,\n  tooltip?: ApexTooltip,\n  plotOptions?: ApexPlotOptions,\n  labels?: string[],\n  fill: ApexFill,\n  markers?: ApexMarkers,\n  theme: ApexTheme,\n  responsive: ApexResponsive[]\n};\n\nvar $info = \"#2F8BE6\",\n  $info_light = \"#ACE0FC\"\nvar themeColors = [$info, $info_light];\n\n@Component({\n  selector: 'app-pf-home',\n  templateUrl: './pf-home.component.html',\n  styleUrls: ['./pf-home.component.scss']\n})\nexport class PfHomeComponent {\n\n  pfTransactions: PfMain\n\n  successTotalCount = 0;\n  successTotalAmount = 0;\n  failTotalCount = 0;\n  failTotalAmount = 0;\n\n  successSaleByCount: number[] = [];\n  successSaleByDate: string [] = [];\n  successSaleByAmount: number[] = [];\n  failSaleCount: number[] = [];\n  failSaleCountByDate: string [] = [];\n  failSaleCountLast: number[] = [];\n  failSaleCountByDateLast: string [] = [];\n  successSaleByAmountDate: string [] = [];\n  reverseCount: number[] = [];\n  reverseCountByDate: string [] = [];\n  reverseCountLast: number[] = [];\n  reverseCountByDateLast: string [] = [];\n  refundCount: number[] = [];\n  refundCountByDate: string [] = [];\n  refundCountLast: number[] = [];\n  refundCountByDateLast: string [] = [];\n  isOpen: boolean = false;\n  currentDate: Date = new Date();\n  merchantId: string;\n  current: any;\n  past: any;\n  startD: Date;\n  endD: Date;\n  submitted: boolean = false;\n  isPermission: boolean = false;\n  maxDate: any;\n  PfTransSummary:PfTransactionsSummary;\n  chartData = false;\n//********************************\n  columnChartOptions: Partial<ChartOptions>;\n  columnChartOptions2: Partial<ChartOptions>;\n  columnChartOptions3: Partial<ChartOptions>;\n  columnChartOptions4: Partial<ChartOptions>;\n  columnChartOptions5: Partial<ChartOptions>;\n  isSuccessSaleCountNoData: boolean = false;\n  isSuccessSaleAmountNoData: boolean = false;\n  isFailSaleCountNoData: boolean = false;\n  isReverseRefundSaleCountNoData: boolean = false;\n  isReverseSaleCountNoData: boolean = false;\n  isRefundSaleCountNoData: boolean = false;\n\n\n  constructor(private userService: UserService,\n              private cdr: ChangeDetectorRef,\n              private accountService: AccountService,\n              private merchantService: MerchantService,\n              private messageService: MessageService,\n              public translate: TranslateService\n  ) {\n    this.columnChartOptions = {\n      chart: {\n        height: 350,\n        type: 'bar',\n        toolbar: {\n          show: false\n        },\n        animations: {\n          enabled: false\n        }\n      },\n      colors: themeColors,\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: '25%',\n        },\n      },\n      grid: {\n        borderColor: \"#BDBDBD44\"\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      series: [{\n        name: 'Adet',\n        data: this.successSaleByCount\n      }],\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: this.successSaleByDate,\n        axisBorder: {\n          color: \"#BDBDBD44\"\n        }\n      },\n\t  yaxis: {\n\t\tforceNiceScale: true,\n\t\tdecimalsInFloat: 0\n\t  },\n      tooltip: {\n        y: {\n          formatter: function (val) {\n            return val + \"\"\n          }\n        }\n      }\n    },\n      this.columnChartOptions2 = {\n        chart: {\n          height: 350,\n          type: 'bar',\n          toolbar: {\n            show: false\n          },\n          animations: {\n            enabled: false\n          }\n        },\n        colors: themeColors,\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '25%',\n          },\n        },\n        grid: {\n          borderColor: \"#BDBDBD44\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        series: [{\n          name: 'Toplam Tutar',\n          data: this.successSaleByAmount\n        }],\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: this.successSaleByAmountDate,\n          axisBorder: {\n            color: \"#BDBDBD44\"\n          }\n        },\n\t\tyaxis: {\n\t\t\tforceNiceScale: true,\n\t\t\tdecimalsInFloat: 2\n\t  \t},\n        tooltip: {\n          y: {\n            formatter: function formatMyMoney(price) {\n              let currency_symbol = \"₺\"\n              let formattedOutput = new Intl.NumberFormat('tr-TR', {\n                style: 'currency',\n                currency: 'TRY',\n                minimumFractionDigits: 2,\n              });\n              return formattedOutput.format(price).replace(currency_symbol, '')\n            }\n          }\n        }\n      },\n      this.columnChartOptions3 = {\n        chart: {\n          height: 350,\n          type: 'bar',\n          toolbar: {\n            show: false\n          },\n          animations: {\n            enabled: false\n          }\n        },\n        colors: themeColors,\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '25%',\n          },\n        },\n        grid: {\n          borderColor: \"#BDBDBD44\"\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        series: [{\n          name: 'Adet',\n          data: this.failSaleCount\n        }],\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: this.failSaleCountByDate,\n          axisBorder: {\n            color: \"#BDBDBD44\"\n          }\n        },\n\t\tyaxis: {\n\t\t\tforceNiceScale: true,\n\t\t\tdecimalsInFloat: 0\n\t  \t},\n        tooltip: {\n          y: {\n            formatter: function (val) {\n              return val + \"\"\n            }\n          }\n        }\n      },\n      this.columnChartOptions4 = {\n        chart: {\n          height: 350,\n          type: 'bar',\n          toolbar: {\n            show: false\n          },\n          animations: {\n            enabled: false\n          }\n        },\n        colors: themeColors,\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '25%',\n          },\n        },\n        grid: {\n          borderColor: '#BDBDBD44'\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        series: [{\n          name: 'Adet',\n          data: this.reverseCount\n        }],\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: this.reverseCountByDate,\n          axisBorder: {\n            color: '#BDBDBD44'\n          }\n        },\n        yaxis: {\n          showForNullSeries: false,\n          forceNiceScale: true,\n          decimalsInFloat: 0\n        },\n        tooltip: {\n          y: {\n            formatter: function (val) {\n              return val + \"\"\n            }\n          }\n        }\n      }\n    this.columnChartOptions5 = {\n      chart: {\n        height: 350,\n        type: 'bar',\n        toolbar: {\n          show: false\n        },\n        animations: {\n          enabled: false\n        }\n      },\n      colors: themeColors,\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: '25%',\n        },\n      },\n      grid: {\n        borderColor: '#BDBDBD44'\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      series: [{\n        name: 'Adet',\n        data: this.refundCount\n      }],\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: this.refundCountByDate,\n        axisBorder: {\n          color: '#BDBDBD44'\n        }\n      },\n      yaxis: {\n        showForNullSeries: false,\n        forceNiceScale: true,\n        decimalsInFloat: 0\n      },\n      tooltip: {\n        y: {\n          formatter: function (val) {\n            return val + \"\"\n          }\n        }\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.past = moment(this.currentDate).subtract(7, 'day').format(\"YYYY-MM-DD\");\n    this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\n    this.onUserPfTransactionsSummaryFirst(this.past, this.current)\n\n  }\n    dateDiff(startDate, endDate) {\n        const start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n        const end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n        const timeDiff = Math.abs(end.getTime() - start.getTime());\n        const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        return diffDays;\n    }\n    dateDiffIsBig(startDate, endDate) {\n        const start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\n        const end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\n        if (start.getTime() > end.getTime()) {\n            return true\n        } else {\n            return false\n        }\n\n    }\n\n    dateObjToDate(vDate) {\n        const datepipe: DatePipe = new DatePipe('tr-EN')\n        const cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\n        const sDate = datepipe.transform(cDate, 'yyy-MM-dd');\n        return sDate;\n    }\n\n    isMainValidation(startDate, endDate) {\n        if (startDate == null || endDate == null) {\n            this.messageService.addError(this.translate.instant('home-page.startDate.and.EndDate.must'));\n            return;\n        } else {\n            this.messageService.remove();\n        }\n        if (this.dateDiffIsBig(startDate, endDate)) {\n            this.messageService.addError(this.translate.instant('home-page.startDate.cannot.greater.than.endDate'));\n            return;\n        } else {\n            this.messageService.remove();\n        }\n      if (this.dateDiff(startDate, endDate) > 7) {\n            this.messageService.addError(this.translate.instant('home-page.difference.between.startDate.and.endDate'));\n            return;\n        } else {\n            this.messageService.remove();\n            return true;\n        }\n\n\n    }\n  firmFail = false;\n\n  onUserPfTransactionsSummary(startDate, endDate) {\n      if (!this.isMainValidation(startDate, endDate)) {\n          return\n      }\n      let selectedMerchantId = null;\n      if ((this.merchantFilters == null || this.merchantFilters.length < 1)\n          && this.selectedMasterMerchant) {\n          selectedMerchantId = this.selectedMasterMerchant.merchantId;\n      }\n\n      if (this.merchantFilters && this.merchantFilters.length > 0) {\n          if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\n              selectedMerchantId = this.merchantFilters[0].merchantId;\n          }\n          if (this.selectedMasterMerchant) {\n              selectedMerchantId = this.selectedMasterMerchant.merchantId;\n          }\n      }\n\n      if (this.ll1Merchants && this.ll1Merchants.length > 0) {\n          if (this.selectedLl1Merchant) {\n              selectedMerchantId = this.selectedLl1Merchant.merchantId;\n          }\n      }\n\n      if (this.ll2Merchants && this.ll2Merchants.length > 0) {\n          if (this.selectedLl2Merchant) {\n              selectedMerchantId = this.selectedLl2Merchant.merchantId;\n          }\n      }\n\n      if (!selectedMerchantId) {\n          this.firmFail = true;\n          this.messageService.addError(this.translate.instant('home-page.choose.company'));\n          return;\n      }\n\n      this.firmFail = false;\n      this.submitted = true;\n      this.chartData = false;\n      this.openModal(false);\n\n      this.PfTransSummary = new PfTransactionsSummary(\n          this.dateObjToDate(startDate),\n          this.dateObjToDate(endDate),\n          selectedMerchantId);\n\n      this.userService.pfTransactionsSummary(this.PfTransSummary).subscribe(\n              (res) => {\n                  this.pfTransactions = res.body;\n                  this.TotalSummary()\n                  this.SuccessSaleCount()\n                  this.SuccessSaleAmount()\n                  this.FailSaleCount(false)\n                  this.reverseSaleCount(false)\n                  this.refundSaleCount(false)\n                  this.chartData = true;\n                  this.cdr.detectChanges();\n              },\n              (err) => {\n              }\n          );\n  }\n\n  onUserPfTransactionsSummaryFirst(startDate, endDate) {\n      if (!this.isMainValidation(startDate, endDate)) {\n          return\n      }\n    this.chartData = false;\n\n    this.userService.pfTransactionsSummary(new PfTransactionsSummary(startDate, endDate, null))\n      .subscribe(\n        (res) => {\n          this.isPermission = true;\n          this.pfTransactions = res.body;\n          this.TotalSummary()\n          this.SuccessSaleCount()\n          this.SuccessSaleAmount()\n          this.FailSaleCount(true)\n          this.reverseSaleCount(true)\n          this.refundSaleCount(true)\n          this.chartData = true;\n\t\t  this.cdr.detectChanges();\n        },\n          (err) => {\n              if (err instanceof HttpErrorResponse) {\n                  if (err.status === 403) {\n                      this.isPermission = false;\n                  }\n              }\n          }\n      );\n  }\n\n  TotalSummary() {\n    if (null != this.pfTransactions.totalSummary && this.pfTransactions.totalSummary.length > 0) {\n      for (let i = 0; i < this.pfTransactions.totalSummary.length; i++) {\n        if (this.pfTransactions.totalSummary[i].type == \"SUCCESS\") {\n          this.successTotalCount = this.pfTransactions.totalSummary[i].totalCount\n          this.successTotalAmount = this.pfTransactions.totalSummary[i].totalAmount\n        } else if (this.pfTransactions.totalSummary[i].type == \"FAIL\") {\n          this.failTotalCount = this.pfTransactions.totalSummary[i].totalCount\n          this.failTotalAmount = this.pfTransactions.totalSummary[i].totalAmount\n        }\n      }\n    } else {\n      this.successTotalCount = 0;\n      this.successTotalAmount = 0;\n      this.failTotalCount = 0;\n      this.failTotalAmount = 0;\n    }\n  }\n\n  SuccessSaleCount() {\n    this.clearArrayN(this.successSaleByCount);\n    this.clearArrayS(this.successSaleByDate);\n    if (null != this.pfTransactions.successSaleCount && this.pfTransactions.successSaleCount.length > 0) {\n      this.isSuccessSaleCountNoData = false;\n        for (let j = 0; j < this.pfTransactions.successSaleCount.length; j++) {\n          this.successSaleByCount.push(this.pfTransactions.successSaleCount[j].totalCount)\n          this.successSaleByDate.push(this.pfTransactions.successSaleCount[j].transactionDate)\n        }\n    } else {\n      this.isSuccessSaleCountNoData = true;\n    }\n  }\n\n  SuccessSaleAmount() {\n    this.clearArrayN(this.successSaleByAmount);\n    this.clearArrayS(this.successSaleByAmountDate);\n    if (null != this.pfTransactions.successSaleAmount && this.pfTransactions.successSaleAmount.length > 0) {\n        this.isSuccessSaleAmountNoData = false;\n        for (let i = 0; i < this.pfTransactions.successSaleAmount.length; i++) {\n          this.successSaleByAmount.push(this.pfTransactions.successSaleAmount[i].totalAmount)\n          this.successSaleByAmountDate.push(this.pfTransactions.successSaleAmount[i].transactionDate)\n        }\n    } else {\n      this.isSuccessSaleAmountNoData = true;\n    }\n  }\n\n  FailSaleCount(isFirst) {\n    this.clearArrayN(this.failSaleCount);\n    this.clearArrayS(this.failSaleCountByDate);\n    this.clearArrayN(this.failSaleCountLast);\n    this.clearArrayS(this.failSaleCountByDateLast);\n    if (null != this.pfTransactions.failSaleCount) {\n      this.isFailSaleCountNoData = false;\n        for (let j = 0; j < this.pfTransactions.failSaleCount.length; j++) {\n          this.failSaleCount.push(this.pfTransactions.failSaleCount[j].totalCount)\n          this.failSaleCountByDate.push(this.pfTransactions.failSaleCount[j].transactionDate)\n        }\n      }\n      if (null != this.pfTransactions.failSaleCount && this.pfTransactions.failSaleCount.length < 1) {\n        this.isFailSaleCountNoData = true;\n        if (isFirst) {\n          this.failSaleCount.push(0);\n          this.failSaleCountByDate.push('');\n        } else {\n          this.failSaleCountLast.push(0);\n          this.failSaleCountByDateLast.push('');\n        }\n      }\n  }\n\n  reverseSaleCount(isFirst) {\n    this.clearArrayN(this.reverseCount);\n    this.clearArrayS(this.reverseCountByDate);\n    this.clearArrayN(this.reverseCountLast);\n    this.clearArrayS(this.reverseCountByDateLast);\n    if (null != this.pfTransactions.reverseSaleCount) {\n      this.isReverseSaleCountNoData = false;\n      for (let j = 0; j < this.pfTransactions.reverseSaleCount.length; j++) {\n        this.reverseCount.push(this.pfTransactions.reverseSaleCount[j].totalCount)\n        this.reverseCountByDate.push(this.pfTransactions.reverseSaleCount[j].transactionDate)\n      }\n    }\n    if (null != this.pfTransactions.reverseSaleCount && this.pfTransactions.reverseSaleCount.length < 1) {\n      this.isReverseSaleCountNoData = true;\n      if (isFirst) {\n        this.reverseCount.push(0)\n        this.reverseCountByDate.push('')\n      } else {\n        this.reverseCountLast.push(0);\n        this.reverseCountByDateLast.push('');\n      }\n    }\n  }\n\n  refundSaleCount(isFirst) {\n    this.clearArrayN(this.refundCount);\n    this.clearArrayS(this.refundCountByDate);\n    this.clearArrayN(this.refundCountLast);\n    this.clearArrayS(this.refundCountByDateLast);\n    if (null != this.pfTransactions.refundSaleCount) {\n      this.isRefundSaleCountNoData = false;\n      for (let j = 0; j < this.pfTransactions.refundSaleCount.length; j++) {\n        this.refundCount.push(this.pfTransactions.refundSaleCount[j].totalCount)\n        this.refundCountByDate.push(this.pfTransactions.refundSaleCount[j].transactionDate)\n      }\n    }\n    if (null != this.pfTransactions.refundSaleCount && this.pfTransactions.refundSaleCount.length < 1) {\n      this.isRefundSaleCountNoData = true;\n      if (isFirst) {\n        this.refundCount.push(0)\n        this.refundCountByDate.push('')\n      } else {\n        this.refundCountLast.push(0);\n        this.refundCountByDateLast.push('');\n      }\n    }\n  }\n\n  /*reverseRefundSaleCount(isFirst) {\n    this.clearArrayN(this.reverseCount);\n    this.clearArrayS(this.reverseCountByDate);\n\tthis.clearArrayN(this.reverseCountLast);\n\tthis.clearArrayS(this.reverseCountByDateLast);\n\n\tif(null != this.pfTransactions.reverseRefundSaleCount){\n    this.isReverseRefundSaleCountNoData = false;\n\t    for (let j = 0; j < this.pfTransactions.reverseRefundSaleCount.length; j++) {\n\t      this.reverseCount.push(this.pfTransactions.reverseRefundSaleCount[j].totalCount)\n\t      this.reverseCountByDate.push(this.pfTransactions.reverseRefundSaleCount[j].transactionDate)\n\t    }\n\t}\n    if (null != this.pfTransactions.reverseRefundSaleCount && this.pfTransactions.reverseRefundSaleCount.length < 1) {\n      this.isReverseRefundSaleCountNoData = true;\n      if (isFirst) {\n        this.reverseCount.push(0)\n        this.reverseCountByDate.push('')\n      } else {\n        this.reverseCountLast.push(0);\n        this.reverseCountByDateLast.push('');\n      }\n    }\n  }*/\n\n  clearArrayN(arr: number[]) {\n    for (let j = 0; j < arr.length; j++) {\n      arr.pop();\n    }\n   arr.length = 0;\n  }\n\n   clearArrayS(arr: string[]) {\n     for (let j = 0; j < arr.length; j++) {\n      arr.pop();\n     }\n    arr.length = 0;\n    }\n\n  openModal(open: boolean): void {\n    if (open) {\n      this.merchantFilters = null;\n      this.selectedMasterMerchant = null;\n      this.ll1Merchants = null;\n      this.selectedLl1Merchant = null;\n      this.ll2Merchants = null;\n      this.selectedLl2Merchant = null;\n      this.ll3Merchants = null;\n      this.selectedLl3Merchant = null;\n      this.getMerchantFilter();\n    }\n    this.isOpen = open;\n  }\n\n  merchantFilters: Merchant[];\n  selectedMasterMerchant: Merchant;\n  ll1Merchants: Merchant[];\n  selectedLl1Merchant: Merchant;\n  ll2Merchants: Merchant[];\n  selectedLl2Merchant: Merchant;\n  ll3Merchants: Merchant[];\n  selectedLl3Merchant: Merchant;\n\n  getMerchantFilter() {\n    const merchant = JSON.parse(localStorage.getItem('merchantName'));\n    if (merchant) {\n      this.merchantFilters = [];\n      this.merchantFilters.push(merchant);\n    }\n   /* this.merchantService\n      .merchantFilter()\n      .subscribe(\n        (res) => {\n          if (res.body && res.body.length > 0) {\n            this.merchantFilters = res.body;\n            this.cdr.detectChanges();\n          }\n        },\n        (err) => {\n          this.messageService.addHttpError({\n            httpErrorResponse: err,\n            defaultMessage: null\n          });\n        }\n      );*/\n  }\n\n  onSelectedMasterMerchantChange() {\n    this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\n  }\n\n  getOnL1MerchantChange() {\n    this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\n  }\n\n  getOnL2MerchantChange() {\n    this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\n  }\n\n  getOnL3MerchantChange() {\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\n  }\n\n  getChildMerchants(merchantId, level) {\n    this.merchantService\n      .childMerchantList(merchantId)\n      .subscribe(\n        (res) => {\n          this[level + 'Merchants'] = res.body;\n          this.cdr.detectChanges();\n        },\n        (err) => {\n          this.messageService.addHttpError({\n            httpErrorResponse: err,\n            defaultMessage: null\n          });\n        }\n      );\n  }\n\n  getModalHeight() {\n    if (!(this.merchantFilters && this.merchantFilters.length > 0)) {\n      return '400px';\n    }\n\n    if (!(this.ll1Merchants && this.ll1Merchants.length > 0)) {\n      return '520px';\n    }\n\n    if (!(this.ll2Merchants && this.ll2Merchants.length > 0)) {\n      return '600px';\n    }\n\n    return '630px';\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/pf-home/pf-home.component.ts b/src/app/pages/full-pages/pf-home/pf-home.component.ts
--- a/src/app/pages/full-pages/pf-home/pf-home.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/pf-home/pf-home.component.ts	(date 1640607330580)
@@ -533,8 +533,9 @@
           return
       }
     this.chartData = false;
-
-    this.userService.pfTransactionsSummary(new PfTransactionsSummary(startDate, endDate, null))
+    const merchant = JSON.parse(localStorage.getItem('merchantName'));
+    const merchantId = merchant ? merchant.merchantId : null;
+    this.userService.pfTransactionsSummary(new PfTransactionsSummary(startDate, endDate, merchantId))
       .subscribe(
         (res) => {
           this.isPermission = true;
Index: src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ChangeDetectorRef, Component, QueryList, ViewChild, ViewChildren, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {DcbTransactionHistory} from \"../../../models/request/dcb.transaction.history\";\r\nimport {DcbTransactionHistoryResponse} from \"../../../models/response/user-dcb-transaction-history/dcb.transaction.history.response\";\r\nimport {DcbTransactionHistoryOrderResponse} from \"../../../models/response/user-dcb-transaction-history/dcb.transaction.history.order.response\";\r\nimport * as moment from \"moment\";\r\nimport {UserMerchant} from \"../../../models/request/user.merchant\";\r\nimport {Merchant} from \"../../../models/merchant\";\r\nimport {MerchantService} from \"../../../services/merchant.service\";\r\nimport {MessageService} from \"../../../shared/services/message.service\";\r\nimport {NgxSpinnerService} from \"ngx-spinner\";\r\nimport {DatePipe} from '@angular/common';\r\nimport {HttpErrorResponse} from \"@angular/common/http\";\r\nimport {TranslateService} from \"@ngx-translate/core\";\r\nimport Swal from \"sweetalert2\";\r\nimport {Error} from \"../../../models/response/error\";\r\nimport {MerchantId} from \"../../../models/request/merchant.id\";\r\n@Component({\r\n    selector: 'app-dcb-transaction',\r\n    templateUrl: './dcb-transaction.component.html',\r\n    styleUrls: ['./dcb-transaction.component.scss']\r\n})\r\nexport class DcbTransactionComponent implements OnInit {\r\n    orderNo: string;\r\n    selectedFundingSourceType: string;\r\n    selectedOrderType: string;\r\n    selectedPaymentStatus: string;\r\n    dcbTransactionHistoryResponse: DcbTransactionHistoryResponse;\r\n    currentDate: Date = new Date();\r\n    current: any;\r\n    past: any;\r\n    isOpen: boolean = false;\r\n    detailOrderNo: string;\r\n    detailOrderDate: string;\r\n    detailOrderType: string;\r\n    isOne: boolean = false;\r\n    l1: string;\r\n    l2: string;\r\n    l3: UserMerchant;\r\n    isUserMerchantChild: boolean = false;\r\n    startDate: any;\r\n    endDate: any;\r\n    isNoDataToDisplay: boolean = false;\r\n    pfFilter: number[] = [];\r\n    page = 1;\r\n    showTable: boolean = true;\r\n    collectionSize: number;\r\n    pageSize: number;\r\n    isPermission: boolean = false;\r\n    dcbTransactionHistory: DcbTransactionHistory;\r\n    dcbMerchantName: string;\r\n    dcbServiceId: number;\r\n    dcbServiceName: string;\r\n    orderId: number;\r\n    transactionAmount: number;\r\n    commissionAmount: number;\r\n    commissionRate: string;\r\n    fundingSourceType: string;\r\n    paymentType: string;\r\n    orderType: string;\r\n    paymentStatus: string;\r\n    merchantPaymentDate: string;\r\n    numberOfPage: number;\r\n    totalCount: number;\r\n    dcbOrders:DcbTransactionHistoryOrderResponse[];\r\n    detailDcbMerchantName:string;\r\n    detailDcbSubMerchantName:string;\r\n    detailDcbServiceName:string;\r\n    detailTransactionId:string;\r\n    detailFundingSourceType:string;\r\n    detailPaymentType:string;\r\n    detailPaymentStatus:string;\r\n    detailParam1:string;\r\n    detailParam2:string;\r\n    detailParam3:string;\r\n    detailTransactionAmount:number;\r\n    detailCommissionAmount:number;\r\n    detailCommissionRate:number;\r\n    detailMerchantPaymentDate: string;\r\n    error:Error;\r\n    localizedMessage:string;\r\n\r\n    constructor(private userService: UserService, private cdr: ChangeDetectorRef,\r\n        private merchantService: MerchantService,\r\n        private messageService: MessageService,\r\n        private spinner: NgxSpinnerService,\r\n                public translate: TranslateService) {\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isOne = true;\r\n        this.past = moment(this.currentDate).subtract(1, 'day').format(\"YYYY-MM-DD\");\r\n        this.current = moment(this.currentDate).format(\"YYYY-MM-DD\");\r\n        this.onDcbPermission(null, this.past, this.current, null, null, null, null, 1);\r\n\r\n    }\r\n\r\n    closeFix(event, datePicker) {\r\n        if (event.target.offsetParent == null)\r\n            datePicker.close();\r\n        else if (event.target.offsetParent.nodeName != \"NGB-DATEPICKER\")\r\n            datePicker.close();\r\n    }\r\n\r\n    dateDiff(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        var timeDiff = Math.abs(end.getTime() - start.getTime());\r\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n        return diffDays;\r\n    }\r\n    dateDiffIsBig(startDate, endDate) {\r\n        var start = new Date(startDate.year, startDate.month - 1, startDate.day, 0, 0, 0, 0);\r\n        var end = new Date(endDate.year, endDate.month - 1, endDate.day, 0, 0, 0, 0);\r\n        if (start.getTime() > end.getTime()) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n\r\n    }\r\n    dateObjToDate(vDate) {\r\n        const datepipe: DatePipe = new DatePipe('tr-EN')\r\n        var cDate = new Date(vDate.year, vDate.month - 1, vDate.day, 0, 0, 0, 0);\r\n        let sDate = datepipe.transform(cDate, 'yyy-MM-dd');\r\n        return sDate;\r\n    }\r\n    convertIdList (merchantList : Merchant[]) {\r\n        let merchantIdList : MerchantId[] = [];\r\n        for (let i = 0 ; i < merchantList.length ; i++){\r\n        let merchantId = new MerchantId(merchantList[i].merchantId);\r\n        merchantIdList.push(merchantId);\r\n    }\r\n    return merchantIdList;\r\n  }\r\n    fundingSourceTypeItem = [\r\n        {id: 1, name: 'Mobil Ödeme', orginalName: 'MOBIL ODEME'},\r\n        {id: 2, name: 'Hediye Para', orginalName: 'HEDIYE PARA'}\r\n\r\n    ];\r\n    orderTypesItem = [\r\n        {id: 1, name: 'Satış', orginalName: 'SATIS'},\r\n        {id: 2, name: 'İade', orginalName: 'IADE'}\r\n\r\n    ];\r\n\r\n    paymentStatusItem = [\r\n        {id: 1, name: 'Ödendi', orginalName: 'ODENDI'},\r\n        {id: 2, name: 'Ödenmedi', orginalName: 'ODENMEDI'}\r\n    ];\r\n\r\n    onDcbPermission(merchantId: MerchantId[], startDate: string, endDate: string, orderId: number, fundingSourceType: string, orderType: string, paymentStatus: string, activePage: number) {\r\n        this.userService\r\n            .dcbTransactionHistory(new DcbTransactionHistory(merchantId, startDate, endDate, orderId, fundingSourceType, orderType, paymentStatus, activePage))\r\n            .subscribe(\r\n                (res) => {\r\n                    this.isPermission = true;\r\n                    this.isUserMerchantChild = true;\r\n                    this.showTable = false;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                  if (err instanceof HttpErrorResponse) {\r\n                    if (err.status === 403) {\r\n                      this.isPermission = false;\r\n                    }\r\n                    else if (err.status === 500) {\r\n                      this.isPermission = true;\r\n                      this.isUserMerchantChild = true;\r\n                      this.showTable = false;\r\n                      this.cdr.detectChanges();\r\n                    }\r\n                    this.cdr.detectChanges();\r\n                  }\r\n\r\n                }\r\n            );\r\n    }\r\n\r\n    isValidation(startDate, endDate) {\r\n        if (!this.selectedMerchant) {\r\n            this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (startDate == null || endDate == null) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.and.EndDate.must'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiffIsBig(startDate, endDate)) {\r\n            this.messageService.addError(this.translate.instant('dcb.startDate.cannot.greater.than.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n        }\r\n        if (this.dateDiff(startDate, endDate) > 7) {\r\n            this.messageService.addError(this.translate.instant('dcb.difference.between.startDate.and.endDate'));\r\n            return;\r\n        } else {\r\n            this.messageService.remove();\r\n            return true;\r\n        }\r\n\r\n\r\n    }\r\n    downloadFile(data: Blob) {\r\n        var link = document.createElement('a');\r\n        link.href = window.URL.createObjectURL(data);\r\n        var fileName = \"Export.xlsx\";\r\n        link.download = fileName;\r\n        link.click();\r\n    }\r\n\r\n    onDcbTransactionExport(startDate, endDate, selectedPage: number) {\r\n        if (!this.isValidation(startDate, endDate)) {\r\n            return\r\n        }\r\n        this.dcbTransactionHistory = new DcbTransactionHistory(\r\n            this.convertIdList(this.selectedMerchant),\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderId,\r\n            this.selectedFundingSourceType,\r\n            this.selectedOrderType,\r\n            this.selectedPaymentStatus,\r\n            selectedPage)\r\n\r\n        this.spinner.show(\"spinner1\");\r\n        this.userService\r\n            .dcbTransactionHistoryExport(this.dcbTransactionHistory).subscribe(\r\n                (response) => {\r\n                    this.spinner.hide(\"spinner1\");\r\n                    this.downloadFile(response);\r\n                },\r\n          async (err) => {\r\n            var result = JSON.parse(await err.error.text());\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'İşleminiz yapılamadı! ',\r\n              confirmButtonText: 'Tamam',\r\n              buttonsStyling: false,\r\n              customClass: {\r\n                confirmButton: 'btn btn-dark'\r\n              },\r\n              text: result.localizedMessage\r\n            })\r\n          });\r\n    }\r\n\r\n\r\n    onDcbTransactionList(startDate, endDate, selectedPage: number) {\r\n        if (!this.isValidation(startDate, endDate)) {\r\n            return\r\n        }\r\n\r\n        this.page = selectedPage ?? 1;\r\n\r\n        this.dcbTransactionHistory = new DcbTransactionHistory(\r\n            this.convertIdList(this.selectedMerchant),\r\n            this.dateObjToDate(startDate),\r\n            this.dateObjToDate(endDate),\r\n            this.orderId,\r\n            this.selectedFundingSourceType,\r\n            this.selectedOrderType,\r\n            this.selectedPaymentStatus,\r\n            this.page)\r\n\r\n        this.userService\r\n            .dcbTransactionHistory(this.dcbTransactionHistory).subscribe(\r\n                (res) => {\r\n                    if(res != null && res.orders != null) {\r\n                      this.dcbTransactionHistoryResponse = res;\r\n                      this.dcbOrders = this.dcbTransactionHistoryResponse.orders;\r\n                      if (this.dcbOrders == null) {\r\n                        this.isPermission = false;\r\n                      }\r\n                      if (this.dcbOrders.length < 1) {\r\n                        this.showTable = false;\r\n                        this.isNoDataToDisplay = true;\r\n                      }\r\n                      if (this.dcbOrders.length >= 1) {\r\n                        this.showTable = true;\r\n                        this.isNoDataToDisplay = false;\r\n                      }\r\n                      this.cdr.detectChanges();\r\n                      this.numberOfPage = this.dcbTransactionHistoryResponse.numberOfPage;\r\n                      this.collectionSize = res.totalCount;\r\n                      this.pageSize = res.pageSize;\r\n                    }\r\n                },\r\n           async(err) => {\r\n                  Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'İşleminiz yapılamadı! ',\r\n                    confirmButtonText: 'Tamam',\r\n                    buttonsStyling: false,\r\n                    customClass: {\r\n                      confirmButton: 'btn btn-dark'\r\n                    },\r\n                    text: err.error.localizedMessage\r\n                  })\r\n                 this.showTable = false;\r\n                });\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        this.onDcbTransactionList(this.startDate, this.endDate, page)\r\n    }\r\n\r\n  transactionDetail(detail: DcbTransactionHistoryOrderResponse) {\r\n      this.detailDcbMerchantName = detail.dcbMerchantName\r\n      this.detailDcbSubMerchantName = detail.dcbSubMerchantName\r\n      this.detailDcbServiceName = detail.dcbServiceName\r\n      this.detailOrderNo = detail.orderId;\r\n      this.detailTransactionId = detail.transactionId\r\n    if (detail.orderType == \"SATIS\") {\r\n      this.detailOrderType = this.translate.instant('dcb.sale')\r\n    }\r\n    if (detail.orderType == 'IADE') {\r\n      this.detailOrderType = this.translate.instant('dcb.refund')\r\n    }\r\n\r\n    if(detail.fundingSourceType =='MOBIL ODEME'){\r\n      this.detailFundingSourceType = this.translate.instant('dcb.mobile.payment')\r\n    }\r\n\r\n    if(detail.fundingSourceType =='HEDIYE PARA'){\r\n      this.detailFundingSourceType = this.translate.instant('dcb.gift.money')\r\n    }\r\n    this.detailPaymentType = detail.paymentType\r\n    this.detailPaymentStatus = detail.paymentStatus\r\n    this.detailTransactionAmount = detail.transactionAmount\r\n    this.detailCommissionRate = detail.commissionRate\r\n    this.detailCommissionAmount = detail.commissionAmount\r\n\r\n    this.detailOrderDate = detail.orderDate\r\n    this.detailMerchantPaymentDate = detail.merchantPaymentDate\r\n    this.detailParam1 = detail.param1;\r\n    this.detailParam2 = detail.param2;\r\n    this.detailParam3 = detail.param3;\r\n\r\n  }\r\n\r\n  openTransactionDetailModal(open: boolean): void {\r\n        this.isOpen = open;\r\n    }\r\n    //\r\n    //    transactionDetail(detail: DcbTransactionHistoryResponse) {\r\n    //\r\n    //\r\n    //    }\r\n    firmError = false;\r\n    isFirmModalOpen = false;\r\n\r\n    openFirmModal(open: boolean): void {\r\n        if (open) {\r\n            this.merchantFilters = null;\r\n            this.selectedMasterMerchant = null;\r\n            this.ll1Merchants = null;\r\n            this.selectedLl1Merchant = null;\r\n            this.ll2Merchants = null;\r\n            this.selectedLl2Merchant = null;\r\n            this.ll3Merchants = null;\r\n            this.selectedLl3Merchant = null;\r\n            this.getMerchantFilter();\r\n        } else {\r\n          this.selectedMerchant = [];\r\n            if ((this.merchantFilters == null || this.merchantFilters.length < 1)\r\n                && this.selectedMasterMerchant) {\r\n              this.selectedMerchant.push(this.selectedMasterMerchant);\r\n            }\r\n\r\n            if (this.merchantFilters && this.merchantFilters.length > 0) {\r\n                if (this.merchantFilters.length == 1 && !this.merchantFilters[0].hasSub) {\r\n                  this.selectedMerchant.push(this.merchantFilters[0]);\r\n                }\r\n                if (this.selectedMasterMerchant) {\r\n                  this.selectedMerchant.push(this.selectedMasterMerchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll1Merchants && this.ll1Merchants.length > 0) {\r\n                if (this.selectedLl1Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl1Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll2Merchants && this.ll2Merchants.length > 0) {\r\n                if (this.selectedLl2Merchant) {\r\n                  this.selectedMerchant.push(this.selectedLl2Merchant);\r\n                }\r\n            }\r\n\r\n            if (this.ll3Merchants && this.ll3Merchants.length > 0) {\r\n              if (this.selectedLl3Merchant) {\r\n                this.selectedMerchant.push(this.selectedLl3Merchant);\r\n            }\r\n          }\r\n          this.selectedMerchants = this.selectedMerchant.reverse()\r\n          this.lastSelectedMerchant = this.selectedMerchants[0]\r\n            if (!this.selectedMerchant) {\r\n                this.firmError = true;\r\n                this.messageService.addError(this.translate.instant('dcb.choose.merchant'));\r\n                return;\r\n            }\r\n            else {\r\n                this.messageService.remove();\r\n            }\r\n        }\r\n        this.isFirmModalOpen = open;\r\n    }\r\n\r\n    selectedMerchant: Merchant[];\r\n    merchantFilters: Merchant[];\r\n    selectedMasterMerchant: Merchant;\r\n    ll1Merchants: Merchant[];\r\n    selectedLl1Merchant: Merchant;\r\n    ll2Merchants: Merchant[];\r\n    selectedLl2Merchant: Merchant;\r\n    ll3Merchants: Merchant[];\r\n    selectedLl3Merchant: Merchant;\r\n    selectedMerchants: Merchant[];\r\n    lastSelectedMerchant: Merchant;\r\n\r\n    getMerchantFilter() {\r\n      const merchant = JSON.parse(localStorage.getItem('merchantName'));\r\n      if (merchant) {\r\n        this.merchantFilters = [];\r\n        this.merchantFilters.push(merchant);\r\n      }\r\n    }\r\n\r\n    onSelectedMasterMerchantChange() {\r\n        this.getChildMerchants(this.selectedMasterMerchant.merchantId, \"ll1\");\r\n    }\r\n\r\n    getOnL1MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl1Merchant.merchantId, \"ll2\");\r\n    }\r\n\r\n    getOnL2MerchantChange() {\r\n        this.getChildMerchants(this.selectedLl2Merchant.merchantId, \"ll3\");\r\n   }\r\n\r\n    getOnL3MerchantChange() {\r\n    this.getChildMerchants(this.selectedLl3Merchant.merchantId, \"ll4\");\r\n  }\r\n\r\n    getChildMerchants(merchantId, level) {\r\n        this.merchantService\r\n            .childMerchantList(merchantId)\r\n            .subscribe(\r\n                (res) => {\r\n                    this[level + 'Merchants'] = res.body;\r\n                    this.cdr.detectChanges();\r\n                },\r\n                (err) => {\r\n                    this.messageService.addHttpError({\r\n                        httpErrorResponse: err,\r\n                        defaultMessage: null\r\n                    });\r\n                }\r\n            );\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts b/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts
--- a/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/pages/full-pages/dcb-transaction/dcb-transaction.component.ts	(date 1640608224305)
@@ -92,7 +92,12 @@
         this.isOne = true;
         this.past = moment(this.currentDate).subtract(1, 'day').format("YYYY-MM-DD");
         this.current = moment(this.currentDate).format("YYYY-MM-DD");
-        this.onDcbPermission(null, this.past, this.current, null, null, null, null, 1);
+      const merchant = JSON.parse(localStorage.getItem('merchantName'));
+      const merchantIds = [];
+      merchantIds.push({
+        merchantId: merchant ? merchant.merchantId : null
+      });
+        this.onDcbPermission(merchantIds, this.past, this.current, null, null, null, null, 1);
 
     }
 
Index: src/app/models/request/pf.transactions.summary.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export class PfTransactionsSummary {\n  constructor(\n    public startDate: any,\n    public endDate: any,\n    public merchantId: String\n  ) {\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/models/request/pf.transactions.summary.ts b/src/app/models/request/pf.transactions.summary.ts
--- a/src/app/models/request/pf.transactions.summary.ts	(revision 003b1a2a38b2ef8253871b0b1f4971cb822035cf)
+++ b/src/app/models/request/pf.transactions.summary.ts	(date 1640607330585)
@@ -2,7 +2,7 @@
   constructor(
     public startDate: any,
     public endDate: any,
-    public merchantId: String
+    public merchantId: string
   ) {
   }
 }
